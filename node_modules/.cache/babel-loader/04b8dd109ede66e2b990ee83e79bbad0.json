{"ast":null,"code":"ace.define(\"ace/mode/toml_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var TomlHighlightRules = function TomlHighlightRules() {\n    var keywordMapper = this.createKeywordMapper({\n      \"constant.language.boolean\": \"true|false\"\n    }, \"identifier\");\n    var identifierRe = \"[a-zA-Z\\\\$_\\xA1-\\uFFFF][a-zA-Z\\\\d\\\\$_\\xA1-\\uFFFF]*\\\\b\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.toml\",\n        regex: /#.*$/\n      }, {\n        token: \"string\",\n        regex: '\"(?=.)',\n        next: \"qqstring\"\n      }, {\n        token: [\"variable.keygroup.toml\"],\n        regex: \"(?:^\\\\s*)(\\\\[\\\\[([^\\\\]]+)\\\\]\\\\])\"\n      }, {\n        token: [\"variable.keygroup.toml\"],\n        regex: \"(?:^\\\\s*)(\\\\[([^\\\\]]+)\\\\])\"\n      }, {\n        token: keywordMapper,\n        regex: identifierRe\n      }, {\n        token: \"support.date.toml\",\n        regex: \"\\\\d{4}-\\\\d{2}-\\\\d{2}(T)\\\\d{2}:\\\\d{2}:\\\\d{2}(Z)\"\n      }, {\n        token: \"constant.numeric.toml\",\n        regex: \"-?\\\\d+(\\\\.?\\\\d+)?\"\n      }],\n      \"qqstring\": [{\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"constant.language.escape\",\n        regex: '\\\\\\\\[0tnr\"\\\\\\\\]'\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n  };\n\n  oop.inherits(TomlHighlightRules, TextHighlightRules);\n  exports.TomlHighlightRules = TomlHighlightRules;\n});\nace.define(\"ace/mode/folding/ini\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /^\\s*\\[([^\\])]*)]\\s*(?:$|[;#])/;\n\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var re = this.foldingStartMarker;\n      var line = session.getLine(row);\n      var m = line.match(re);\n      if (!m) return;\n      var startName = m[1] + \".\";\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        if (/^\\s*$/.test(line)) continue;\n        m = line.match(re);\n        if (m && m[1].lastIndexOf(startName, 0) !== 0) break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/toml\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/toml_highlight_rules\", \"ace/mode/folding/ini\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var TomlHighlightRules = require(\"./toml_highlight_rules\").TomlHighlightRules;\n\n  var FoldMode = require(\"./folding/ini\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = TomlHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/toml\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/toml\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}