{"ast":null,"code":"import _asyncToGenerator from \"E:\\\\Developing Project\\\\Project - Pro\\\\Recent Projects\\\\026 - Daneshgah Magazi (New)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"E:\\\\Developing Project\\\\Project - Pro\\\\Recent Projects\\\\026 - Daneshgah Magazi (New)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadContacts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadConversations),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addMessageToConversation),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(createNewConversation),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetContact),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetConversation),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddMessageToConversation),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchCreateConversation),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { getCurrentTime } from \"../../helpers/Utils\";\nimport { CHAT_GET_CONTACTS, CHAT_GET_CONVERSATIONS, CHAT_ADD_MESSAGE_TO_CONVERSATION, CHAT_CREATE_CONVERSATION } from \"../actions\";\nimport { getContactsSuccess, getContactsError, getConversationsSuccess, getConversationsError } from \"./actions\";\nimport contactsData from \"../../data/chat.contacts.json\";\nimport conversationsData from \"../../data/chat.conversations.json\";\n\nfunction loadContacts() {\n  var response, contacts, currentUser;\n  return _regeneratorRuntime.wrap(function loadContacts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadContactsAsync);\n\n        case 3:\n          response = _context.sent;\n          contacts = response.contacts, currentUser = response.currentUser;\n          _context.next = 7;\n          return put(getContactsSuccess(contacts, currentUser));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(getContactsError(_context.t0));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nvar loadContactsAsync = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var contacts, currentUser;\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            contacts = contactsData.data;\n            currentUser = contacts[0];\n            _context2.next = 4;\n            return new Promise(function (success, fail) {\n              setTimeout(function () {\n                success({\n                  contacts: contacts,\n                  currentUser: currentUser\n                });\n              }, 2000);\n            }).then(function (response) {\n              return response;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 4:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadContactsAsync() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction loadConversations(userId) {\n  var response, conversations, selectedUser;\n  return _regeneratorRuntime.wrap(function loadConversations$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadConversationsAsync, userId);\n\n        case 3:\n          response = _context3.sent;\n          conversations = response.conversations, selectedUser = response.selectedUser;\n          _context3.next = 7;\n          return put(getConversationsSuccess(conversations, selectedUser));\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 13;\n          return put(getConversationsError(_context3.t0));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nvar loadConversationsAsync = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n    var payload, conversations, selectedUser;\n    return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            payload = _ref2.payload;\n            conversations = conversationsData.data;\n            conversations = conversations.filter(function (x) {\n              return x.users.includes(payload);\n            });\n            selectedUser = conversations[0].users.find(function (x) {\n              return x !== payload;\n            });\n            _context4.next = 6;\n            return new Promise(function (success, fail) {\n              setTimeout(function () {\n                success({\n                  conversations: conversations,\n                  selectedUser: selectedUser\n                });\n              }, 1000);\n            }).then(function (response) {\n              return response;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 6:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loadConversationsAsync(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nfunction addMessageToConversation(_ref4) {\n  var payload, currentUserId, selectedUserId, message, allConversations, response, conversations, selectedUser;\n  return _regeneratorRuntime.wrap(function addMessageToConversation$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          payload = _ref4.payload;\n          _context5.prev = 1;\n          currentUserId = payload.currentUserId, selectedUserId = payload.selectedUserId, message = payload.message, allConversations = payload.allConversations;\n          _context5.next = 5;\n          return call(addMessageToConversationAsync, currentUserId, selectedUserId, message, allConversations);\n\n        case 5:\n          response = _context5.sent;\n          conversations = response.conversations, selectedUser = response.selectedUser;\n          _context5.next = 9;\n          return put(getConversationsSuccess(conversations, selectedUser));\n\n        case 9:\n          _context5.next = 15;\n          break;\n\n        case 11:\n          _context5.prev = 11;\n          _context5.t0 = _context5[\"catch\"](1);\n          _context5.next = 15;\n          return put(getConversationsError(_context5.t0));\n\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3, null, [[1, 11]]);\n}\n\nvar addMessageToConversationAsync = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(currentUserId, selectedUserId, message, allConversations) {\n    var conversation, time, conversations;\n    return _regeneratorRuntime.wrap(function _callee3$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            conversation = allConversations.find(function (x) {\n              return x.users.includes(currentUserId) && x.users.includes(selectedUserId);\n            });\n            time = getCurrentTime();\n\n            if (!conversation) {\n              _context6.next = 10;\n              break;\n            }\n\n            conversation.messages.push({\n              sender: currentUserId,\n              time: time,\n              text: message\n            });\n            conversation.lastMessageTime = time;\n            conversations = allConversations.filter(function (x) {\n              return x.id !== conversation.id;\n            });\n            conversations.splice(0, 0, conversation);\n            _context6.next = 9;\n            return new Promise(function (success, fail) {\n              setTimeout(function () {\n                success({\n                  conversations: conversations,\n                  selectedUser: selectedUserId\n                });\n              }, 500);\n            }).then(function (response) {\n              return response;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 9:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function addMessageToConversationAsync(_x2, _x3, _x4, _x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nfunction createNewConversation(_ref6) {\n  var payload, currentUserId, selectedUserId, allConversations, response, conversations, selectedUser;\n  return _regeneratorRuntime.wrap(function createNewConversation$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          payload = _ref6.payload;\n          _context7.prev = 1;\n          currentUserId = payload.currentUserId, selectedUserId = payload.selectedUserId, allConversations = payload.allConversations;\n          _context7.next = 5;\n          return call(createNewConversationAsync, currentUserId, selectedUserId, allConversations);\n\n        case 5:\n          response = _context7.sent;\n          conversations = response.conversations, selectedUser = response.selectedUser;\n          _context7.next = 9;\n          return put(getConversationsSuccess(conversations, selectedUser));\n\n        case 9:\n          _context7.next = 15;\n          break;\n\n        case 11:\n          _context7.prev = 11;\n          _context7.t0 = _context7[\"catch\"](1);\n          _context7.next = 15;\n          return put(getConversationsError(_context7.t0));\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked4, null, [[1, 11]]);\n}\n\nvar createNewConversationAsync = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(currentUserId, selectedUserId, allConversations) {\n    var conversation;\n    return _regeneratorRuntime.wrap(function _callee4$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            conversation = {\n              id: allConversations.length + 1,\n              users: [currentUserId, selectedUserId],\n              lastMessageTime: \"-\",\n              messages: []\n            };\n            allConversations.splice(0, 0, conversation);\n            _context8.next = 4;\n            return new Promise(function (success, fail) {\n              setTimeout(function () {\n                success({\n                  conversations: allConversations,\n                  selectedUser: selectedUserId\n                });\n              }, 500);\n            }).then(function (response) {\n              return response;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 4:\n            return _context8.abrupt(\"return\", _context8.sent);\n\n          case 5:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function createNewConversationAsync(_x6, _x7, _x8) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nexport function watchGetContact() {\n  return _regeneratorRuntime.wrap(function watchGetContact$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeEvery(CHAT_GET_CONTACTS, loadContacts);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked5);\n}\nexport function watchGetConversation() {\n  return _regeneratorRuntime.wrap(function watchGetConversation$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeEvery(CHAT_GET_CONVERSATIONS, loadConversations);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked6);\n}\nexport function watchAddMessageToConversation() {\n  return _regeneratorRuntime.wrap(function watchAddMessageToConversation$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeEvery(CHAT_ADD_MESSAGE_TO_CONVERSATION, addMessageToConversation);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked7);\n}\nexport function watchCreateConversation() {\n  return _regeneratorRuntime.wrap(function watchCreateConversation$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeEvery(CHAT_CREATE_CONVERSATION, createNewConversation);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked8);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([fork(watchGetContact), fork(watchGetConversation), fork(watchAddMessageToConversation), fork(watchCreateConversation)]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["E:/Developing Project/Project - Pro/Recent Projects/026 - Daneshgah Magazi (New)/src/redux/chat/saga.js"],"names":["loadContacts","loadConversations","addMessageToConversation","createNewConversation","watchGetContact","watchGetConversation","watchAddMessageToConversation","watchCreateConversation","rootSaga","all","call","fork","put","takeEvery","getCurrentTime","CHAT_GET_CONTACTS","CHAT_GET_CONVERSATIONS","CHAT_ADD_MESSAGE_TO_CONVERSATION","CHAT_CREATE_CONVERSATION","getContactsSuccess","getContactsError","getConversationsSuccess","getConversationsError","contactsData","conversationsData","loadContactsAsync","response","contacts","currentUser","data","Promise","success","fail","setTimeout","then","catch","error","userId","loadConversationsAsync","conversations","selectedUser","payload","filter","x","users","includes","find","currentUserId","selectedUserId","message","allConversations","addMessageToConversationAsync","conversation","time","messages","push","sender","text","lastMessageTime","id","splice","createNewConversationAsync","length"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\r\nimport { getCurrentTime } from \"../../helpers/Utils\";\r\n\r\nimport {\r\n  CHAT_GET_CONTACTS,\r\n  CHAT_GET_CONVERSATIONS,\r\n  CHAT_ADD_MESSAGE_TO_CONVERSATION,\r\n  CHAT_CREATE_CONVERSATION\r\n} from \"../actions\";\r\n\r\nimport {\r\n  getContactsSuccess,\r\n  getContactsError,\r\n  getConversationsSuccess,\r\n  getConversationsError\r\n} from \"./actions\";\r\n\r\nimport contactsData from \"../../data/chat.contacts.json\";\r\nimport conversationsData from \"../../data/chat.conversations.json\";\r\n\r\nfunction* loadContacts() {\r\n  try {\r\n    const response = yield call(loadContactsAsync);\r\n    const { contacts, currentUser } = response;\r\n    yield put(getContactsSuccess(contacts, currentUser));\r\n  } catch (error) {\r\n    yield put(getContactsError(error));\r\n  }\r\n}\r\n\r\nconst loadContactsAsync = async () => {\r\n  const contacts = contactsData.data;\r\n  const currentUser = contacts[0];\r\n  return await new Promise((success, fail) => {\r\n    setTimeout(() => {\r\n      success({ contacts, currentUser });\r\n    }, 2000);\r\n  })\r\n    .then(response => response)\r\n    .catch(error => error);\r\n};\r\n\r\nfunction* loadConversations(userId) {\r\n  try {\r\n    const response = yield call(loadConversationsAsync, userId);\r\n    const { conversations, selectedUser } = response;\r\n    yield put(getConversationsSuccess(conversations, selectedUser));\r\n  } catch (error) {\r\n    yield put(getConversationsError(error));\r\n  }\r\n}\r\n\r\nconst loadConversationsAsync = async ({ payload }) => {\r\n  let conversations = conversationsData.data;\r\n  conversations = conversations.filter(x => x.users.includes(payload));\r\n  const selectedUser = conversations[0].users.find(x => x !== payload);\r\n  return await new Promise((success, fail) => {\r\n    setTimeout(() => {\r\n      success({ conversations, selectedUser });\r\n    }, 1000);\r\n  })\r\n    .then(response => response)\r\n    .catch(error => error);\r\n};\r\n\r\nfunction* addMessageToConversation({ payload }) {\r\n  try {\r\n    const {\r\n      currentUserId,\r\n      selectedUserId,\r\n      message,\r\n      allConversations\r\n    } = payload;\r\n\r\n    const response = yield call(\r\n      addMessageToConversationAsync,\r\n      currentUserId,\r\n      selectedUserId,\r\n      message,\r\n      allConversations\r\n    );\r\n    const { conversations, selectedUser } = response;\r\n    yield put(getConversationsSuccess(conversations, selectedUser));\r\n  } catch (error) {\r\n    yield put(getConversationsError(error));\r\n  }\r\n}\r\nconst addMessageToConversationAsync = async (\r\n  currentUserId,\r\n  selectedUserId,\r\n  message,\r\n  allConversations\r\n) => {\r\n  let conversation = allConversations.find(\r\n    x => x.users.includes(currentUserId) && x.users.includes(selectedUserId)\r\n  );\r\n  const time = getCurrentTime();\r\n  if (conversation) {\r\n    conversation.messages.push({\r\n      sender: currentUserId,\r\n      time: time,\r\n      text: message\r\n    });\r\n    conversation.lastMessageTime = time;\r\n    let conversations = allConversations.filter(x => x.id !== conversation.id);\r\n    conversations.splice(0, 0, conversation);\r\n\r\n    return await new Promise((success, fail) => {\r\n      setTimeout(() => {\r\n        success({ conversations, selectedUser: selectedUserId });\r\n      }, 500);\r\n    })\r\n      .then(response => response)\r\n      .catch(error => error);\r\n  }\r\n};\r\n\r\nfunction* createNewConversation({ payload }) {\r\n  try {\r\n    const { currentUserId, selectedUserId, allConversations } = payload;\r\n    const response = yield call(\r\n      createNewConversationAsync,\r\n      currentUserId,\r\n      selectedUserId,\r\n      allConversations\r\n    );\r\n    const { conversations, selectedUser } = response;\r\n    yield put(getConversationsSuccess(conversations, selectedUser));\r\n  } catch (error) {\r\n    yield put(getConversationsError(error));\r\n  }\r\n}\r\n\r\nconst createNewConversationAsync = async (\r\n  currentUserId,\r\n  selectedUserId,\r\n  allConversations\r\n) => {\r\n  let conversation = {\r\n    id: allConversations.length + 1,\r\n    users: [currentUserId, selectedUserId],\r\n    lastMessageTime: \"-\",\r\n    messages: []\r\n  };\r\n\r\n  allConversations.splice(0, 0, conversation);\r\n  return await new Promise((success, fail) => {\r\n    setTimeout(() => {\r\n      success({\r\n        conversations: allConversations,\r\n        selectedUser: selectedUserId\r\n      });\r\n    }, 500);\r\n  })\r\n    .then(response => response)\r\n    .catch(error => error);\r\n};\r\n\r\nexport function* watchGetContact() {\r\n  yield takeEvery(CHAT_GET_CONTACTS, loadContacts);\r\n}\r\nexport function* watchGetConversation() {\r\n  yield takeEvery(CHAT_GET_CONVERSATIONS, loadConversations);\r\n}\r\nexport function* watchAddMessageToConversation() {\r\n  yield takeEvery(CHAT_ADD_MESSAGE_TO_CONVERSATION, addMessageToConversation);\r\n}\r\nexport function* watchCreateConversation() {\r\n  yield takeEvery(CHAT_CREATE_CONVERSATION, createNewConversation);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(watchGetContact),\r\n    fork(watchGetConversation),\r\n    fork(watchAddMessageToConversation),\r\n    fork(watchCreateConversation)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}