{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport { setTransform, isTransform3dSupported, getLeft, getStyle, getTop, getActiveIndex } from './utils';\n\nfunction _componentDidUpdate(component, init) {\n  var _component$props = component.props,\n      styles = _component$props.styles,\n      panels = _component$props.panels,\n      activeKey = _component$props.activeKey,\n      direction = _component$props.direction;\n  var rootNode = component.props.getRef('root');\n  var wrapNode = component.props.getRef('nav') || rootNode;\n  var inkBarNode = component.props.getRef('inkBar');\n  var activeTab = component.props.getRef('activeTab');\n  var inkBarNodeStyle = inkBarNode.style;\n  var tabBarPosition = component.props.tabBarPosition;\n  var activeIndex = getActiveIndex(panels, activeKey);\n\n  if (init) {\n    // prevent mount animation\n    inkBarNodeStyle.display = 'none';\n  }\n\n  if (activeTab) {\n    var tabNode = activeTab;\n    var transformSupported = isTransform3dSupported(inkBarNodeStyle); // Reset current style\n\n    setTransform(inkBarNodeStyle, '');\n    inkBarNodeStyle.width = '';\n    inkBarNodeStyle.height = '';\n    inkBarNodeStyle.left = '';\n    inkBarNodeStyle.top = '';\n    inkBarNodeStyle.bottom = '';\n    inkBarNodeStyle.right = '';\n\n    if (tabBarPosition === 'top' || tabBarPosition === 'bottom') {\n      var left = getLeft(tabNode, wrapNode);\n      var width = tabNode.offsetWidth; // If tabNode'width width equal to wrapNode'width when tabBarPosition is top or bottom\n      // It means no css working, then ink bar should not have width until css is loaded\n      // Fix https://github.com/ant-design/ant-design/issues/7564\n\n      if (width === rootNode.offsetWidth) {\n        width = 0;\n      } else if (styles.inkBar && styles.inkBar.width !== undefined) {\n        width = parseFloat(styles.inkBar.width, 10);\n\n        if (width) {\n          left += (tabNode.offsetWidth - width) / 2;\n        }\n      }\n\n      if (direction === 'rtl') {\n        left = getStyle(tabNode, 'margin-left') - left;\n      } // use 3d gpu to optimize render\n\n\n      if (transformSupported) {\n        setTransform(inkBarNodeStyle, \"translate3d(\".concat(left, \"px,0,0)\"));\n      } else {\n        inkBarNodeStyle.left = \"\".concat(left, \"px\");\n      }\n\n      inkBarNodeStyle.width = \"\".concat(width, \"px\");\n    } else {\n      var top = getTop(tabNode, wrapNode, true);\n      var height = tabNode.offsetHeight;\n\n      if (styles.inkBar && styles.inkBar.height !== undefined) {\n        height = parseFloat(styles.inkBar.height, 10);\n\n        if (height) {\n          top += (tabNode.offsetHeight - height) / 2;\n        }\n      }\n\n      if (transformSupported) {\n        setTransform(inkBarNodeStyle, \"translate3d(0,\".concat(top, \"px,0)\"));\n        inkBarNodeStyle.top = '0';\n      } else {\n        inkBarNodeStyle.top = \"\".concat(top, \"px\");\n      }\n\n      inkBarNodeStyle.height = \"\".concat(height, \"px\");\n    }\n  }\n\n  inkBarNodeStyle.display = activeIndex !== -1 ? 'block' : 'none';\n}\n\nvar InkTabBarNode = /*#__PURE__*/function (_React$Component) {\n  _inherits(InkTabBarNode, _React$Component);\n\n  function InkTabBarNode() {\n    _classCallCheck(this, InkTabBarNode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(InkTabBarNode).apply(this, arguments));\n  }\n\n  _createClass(InkTabBarNode, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this; // ref https://github.com/ant-design/ant-design/issues/8678\n      // ref https://github.com/react-component/tabs/issues/135\n      // InkTabBarNode need parent/root ref for calculating position\n      // since parent componentDidMount triggered after child componentDidMount\n      // we're doing a quick fix here to use setTimeout to calculate position\n      // after parent/root component mounted\n\n\n      this.timeout = setTimeout(function () {\n        _componentDidUpdate(_this, true);\n      }, 0);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      _componentDidUpdate(this);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.timeout);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classnames;\n\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          styles = _this$props.styles,\n          inkBarAnimated = _this$props.inkBarAnimated;\n      var className = \"\".concat(prefixCls, \"-ink-bar\");\n      var classes = classnames((_classnames = {}, _defineProperty(_classnames, className, true), _defineProperty(_classnames, inkBarAnimated ? \"\".concat(className, \"-animated\") : \"\".concat(className, \"-no-animated\"), true), _classnames));\n      return React.createElement(\"div\", {\n        style: styles.inkBar,\n        className: classes,\n        key: \"inkBar\",\n        ref: this.props.saveRef('inkBar')\n      });\n    }\n  }]);\n\n  return InkTabBarNode;\n}(React.Component);\n\nexport { InkTabBarNode as default };\nInkTabBarNode.defaultProps = {\n  prefixCls: '',\n  inkBarAnimated: true,\n  styles: {},\n  saveRef: function saveRef() {}\n};","map":null,"metadata":{},"sourceType":"module"}