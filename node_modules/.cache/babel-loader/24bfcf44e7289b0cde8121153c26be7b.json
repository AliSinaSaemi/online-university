{"ast":null,"code":"ace.define(\"ace/mode/kotlin_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var KotlinHighlightRules = function KotlinHighlightRules() {\n    this.$rules = {\n      start: [{\n        include: \"#comments\"\n      }, {\n        token: [\"text\", \"keyword.other.kotlin\", \"text\", \"entity.name.package.kotlin\", \"text\"],\n        regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*))?/\n      }, {\n        include: \"#imports\"\n      }, {\n        include: \"#statements\"\n      }],\n      \"#classes\": [{\n        token: \"text\",\n        regex: /(?=\\s*(?:companion|class|object|interface))/,\n        push: [{\n          token: \"text\",\n          regex: /}|(?=$)/,\n          next: \"pop\"\n        }, {\n          token: [\"keyword.other.kotlin\", \"text\"],\n          regex: /\\b((?:companion\\s*)?)(class|object|interface)\\b/,\n          push: [{\n            token: \"text\",\n            regex: /(?=<|{|\\(|:)/,\n            next: \"pop\"\n          }, {\n            token: \"keyword.other.kotlin\",\n            regex: /\\bobject\\b/\n          }, {\n            token: \"entity.name.type.class.kotlin\",\n            regex: /\\w+/\n          }]\n        }, {\n          token: \"text\",\n          regex: /</,\n          push: [{\n            token: \"text\",\n            regex: />/,\n            next: \"pop\"\n          }, {\n            include: \"#generics\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\(/,\n          push: [{\n            token: \"text\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"#parameters\"\n          }]\n        }, {\n          token: \"keyword.operator.declaration.kotlin\",\n          regex: /:/,\n          push: [{\n            token: \"text\",\n            regex: /(?={|$)/,\n            next: \"pop\"\n          }, {\n            token: \"entity.other.inherited-class.kotlin\",\n            regex: /\\w+/\n          }, {\n            token: \"text\",\n            regex: /\\(/,\n            push: [{\n              token: \"text\",\n              regex: /\\)/,\n              next: \"pop\"\n            }, {\n              include: \"#expressions\"\n            }]\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"#statements\"\n          }]\n        }]\n      }],\n      \"#comments\": [{\n        token: \"punctuation.definition.comment.kotlin\",\n        regex: /\\/\\*/,\n        push: [{\n          token: \"punctuation.definition.comment.kotlin\",\n          regex: /\\*\\//,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.block.kotlin\"\n        }]\n      }, {\n        token: [\"text\", \"punctuation.definition.comment.kotlin\", \"comment.line.double-slash.kotlin\"],\n        regex: /(\\s*)(\\/\\/)(.*$)/\n      }],\n      \"#constants\": [{\n        token: \"constant.language.kotlin\",\n        regex: /\\b(?:true|false|null|this|super)\\b/\n      }, {\n        token: \"constant.numeric.kotlin\",\n        regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\b/\n      }, {\n        token: \"constant.other.kotlin\",\n        regex: /\\b[A-Z][A-Z0-9_]+\\b/\n      }],\n      \"#expressions\": [{\n        token: \"text\",\n        regex: /\\(/,\n        push: [{\n          token: \"text\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#expressions\"\n        }]\n      }, {\n        include: \"#types\"\n      }, {\n        include: \"#strings\"\n      }, {\n        include: \"#constants\"\n      }, {\n        include: \"#comments\"\n      }, {\n        include: \"#keywords\"\n      }],\n      \"#functions\": [{\n        token: \"text\",\n        regex: /(?=\\s*fun)/,\n        push: [{\n          token: \"text\",\n          regex: /}|(?=$)/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.other.kotlin\",\n          regex: /\\bfun\\b/,\n          push: [{\n            token: \"text\",\n            regex: /(?=\\()/,\n            next: \"pop\"\n          }, {\n            token: \"text\",\n            regex: /</,\n            push: [{\n              token: \"text\",\n              regex: />/,\n              next: \"pop\"\n            }, {\n              include: \"#generics\"\n            }]\n          }, {\n            token: [\"text\", \"entity.name.function.kotlin\"],\n            regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\(/,\n          push: [{\n            token: \"text\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"#parameters\"\n          }]\n        }, {\n          token: \"keyword.operator.declaration.kotlin\",\n          regex: /:/,\n          push: [{\n            token: \"text\",\n            regex: /(?={|=|$)/,\n            next: \"pop\"\n          }, {\n            include: \"#types\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /(?=\\})/,\n            next: \"pop\"\n          }, {\n            include: \"#statements\"\n          }]\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }]\n      }],\n      \"#generics\": [{\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /:/,\n        push: [{\n          token: \"text\",\n          regex: /(?=,|>)/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }]\n      }, {\n        include: \"#keywords\"\n      }, {\n        token: \"storage.type.generic.kotlin\",\n        regex: /\\w+/\n      }],\n      \"#getters-and-setters\": [{\n        token: [\"entity.name.function.kotlin\", \"text\"],\n        regex: /\\b(get)\\b(\\s*\\(\\s*\\))/,\n        push: [{\n          token: \"text\",\n          regex: /\\}|(?=\\bset\\b)|$/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$|\\bset\\b)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }]\n      }, {\n        token: [\"entity.name.function.kotlin\", \"text\"],\n        regex: /\\b(set)\\b(\\s*)(?=\\()/,\n        push: [{\n          token: \"text\",\n          regex: /\\}|(?=\\bget\\b)|$/,\n          next: \"pop\"\n        }, {\n          token: \"text\",\n          regex: /\\(/,\n          push: [{\n            token: \"text\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"#parameters\"\n          }]\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$|\\bset\\b)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }]\n      }],\n      \"#imports\": [{\n        token: [\"text\", \"keyword.other.kotlin\", \"text\", \"keyword.other.kotlin\"],\n        regex: /^(\\s*)(import)(\\s+[^ $]+\\s+)((?:as)?)/\n      }],\n      \"#keywords\": [{\n        token: \"storage.modifier.kotlin\",\n        regex: /\\b(?:var|val|public|private|protected|abstract|final|enum|open|attribute|annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|yield|typealias|typeof)\\b/\n      }, {\n        token: \"keyword.control.catch-exception.kotlin\",\n        regex: /\\b(?:try|catch|finally|throw)\\b/\n      }, {\n        token: \"keyword.control.kotlin\",\n        regex: /\\b(?:if|else|while|for|do|return|when|where|break|continue)\\b/\n      }, {\n        token: \"keyword.operator.kotlin\",\n        regex: /\\b(?:in|is|as|assert)\\b/\n      }, {\n        token: \"keyword.operator.comparison.kotlin\",\n        regex: /==|!=|===|!==|<=|>=|<|>/\n      }, {\n        token: \"keyword.operator.assignment.kotlin\",\n        regex: /=/\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /:/\n      }, {\n        token: \"keyword.operator.dot.kotlin\",\n        regex: /\\./\n      }, {\n        token: \"keyword.operator.increment-decrement.kotlin\",\n        regex: /\\-\\-|\\+\\+/\n      }, {\n        token: \"keyword.operator.arithmetic.kotlin\",\n        regex: /\\-|\\+|\\*|\\/|%/\n      }, {\n        token: \"keyword.operator.arithmetic.assign.kotlin\",\n        regex: /\\+=|\\-=|\\*=|\\/=/\n      }, {\n        token: \"keyword.operator.logical.kotlin\",\n        regex: /!|&&|\\|\\|/\n      }, {\n        token: \"keyword.operator.range.kotlin\",\n        regex: /\\.\\./\n      }, {\n        token: \"punctuation.terminator.kotlin\",\n        regex: /;/\n      }],\n      \"#namespaces\": [{\n        token: \"keyword.other.kotlin\",\n        regex: /\\bnamespace\\b/\n      }, {\n        token: \"text\",\n        regex: /\\{/,\n        push: [{\n          token: \"text\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#statements\"\n        }]\n      }],\n      \"#parameters\": [{\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /:/,\n        push: [{\n          token: \"text\",\n          regex: /(?=,|\\)|=)/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }]\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /=/,\n        push: [{\n          token: \"text\",\n          regex: /(?=,|\\))/,\n          next: \"pop\"\n        }, {\n          include: \"#expressions\"\n        }]\n      }, {\n        include: \"#keywords\"\n      }, {\n        token: \"variable.parameter.function.kotlin\",\n        regex: /\\w+/\n      }],\n      \"#statements\": [{\n        include: \"#namespaces\"\n      }, {\n        include: \"#typedefs\"\n      }, {\n        include: \"#classes\"\n      }, {\n        include: \"#functions\"\n      }, {\n        include: \"#variables\"\n      }, {\n        include: \"#getters-and-setters\"\n      }, {\n        include: \"#expressions\"\n      }],\n      \"#strings\": [{\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /\"\"\"/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /\"\"\"/,\n          next: \"pop\"\n        }, {\n          token: \"variable.parameter.template.kotlin\",\n          regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.third.kotlin\"\n        }]\n      }, {\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /\"/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          token: \"variable.parameter.template.kotlin\",\n          regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.double.kotlin\"\n        }]\n      }, {\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /'/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /'/,\n          next: \"pop\"\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.single.kotlin\"\n        }]\n      }, {\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /`/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /`/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.quoted.single.kotlin\"\n        }]\n      }],\n      \"#typedefs\": [{\n        token: \"text\",\n        regex: /(?=\\s*type)/,\n        push: [{\n          token: \"text\",\n          regex: /(?=$)/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.other.kotlin\",\n          regex: /\\btype\\b/\n        }, {\n          token: \"text\",\n          regex: /</,\n          push: [{\n            token: \"text\",\n            regex: />/,\n            next: \"pop\"\n          }, {\n            include: \"#generics\"\n          }]\n        }, {\n          include: \"#expressions\"\n        }]\n      }],\n      \"#types\": [{\n        token: \"storage.type.buildin.kotlin\",\n        regex: /\\b(?:Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic)\\b/\n      }, {\n        token: \"storage.type.buildin.array.kotlin\",\n        regex: /\\b(?:IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray)\\b/\n      }, {\n        token: [\"storage.type.buildin.collection.kotlin\", \"text\"],\n        regex: /\\b(Array|List|Map)(<\\b)/,\n        push: [{\n          token: \"text\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }, {\n          include: \"#keywords\"\n        }]\n      }, {\n        token: \"text\",\n        regex: /\\w+</,\n        push: [{\n          token: \"text\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }, {\n          include: \"#keywords\"\n        }]\n      }, {\n        token: [\"keyword.operator.tuple.kotlin\", \"text\"],\n        regex: /(#)(\\()/,\n        push: [{\n          token: \"text\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#expressions\"\n        }]\n      }, {\n        token: \"text\",\n        regex: /\\{/,\n        push: [{\n          token: \"text\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#statements\"\n        }]\n      }, {\n        token: \"text\",\n        regex: /\\(/,\n        push: [{\n          token: \"text\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }]\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /->/\n      }],\n      \"#variables\": [{\n        token: \"text\",\n        regex: /(?=\\s*(?:var|val))/,\n        push: [{\n          token: \"text\",\n          regex: /(?=:|=|$)/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.other.kotlin\",\n          regex: /\\b(?:var|val)\\b/,\n          push: [{\n            token: \"text\",\n            regex: /(?=:|=|$)/,\n            next: \"pop\"\n          }, {\n            token: \"text\",\n            regex: /</,\n            push: [{\n              token: \"text\",\n              regex: />/,\n              next: \"pop\"\n            }, {\n              include: \"#generics\"\n            }]\n          }, {\n            token: [\"text\", \"entity.name.variable.kotlin\"],\n            regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n          }]\n        }, {\n          token: \"keyword.operator.declaration.kotlin\",\n          regex: /:/,\n          push: [{\n            token: \"text\",\n            regex: /(?==|$)/,\n            next: \"pop\"\n          }, {\n            include: \"#types\"\n          }, {\n            include: \"#getters-and-setters\"\n          }]\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }, {\n            include: \"#getters-and-setters\"\n          }]\n        }]\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  KotlinHighlightRules.metaData = {\n    fileTypes: [\"kt\", \"kts\"],\n    name: \"Kotlin\",\n    scopeName: \"source.Kotlin\"\n  };\n  oop.inherits(KotlinHighlightRules, TextHighlightRules);\n  exports.KotlinHighlightRules = KotlinHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/kotlin\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/kotlin_highlight_rules\", \"ace/mode/behaviour/cstyle\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var KotlinHighlightRules = require(\"./kotlin_highlight_rules\").KotlinHighlightRules;\n\n  var CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = KotlinHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = new CstyleBehaviour();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/kotlin\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/kotlin\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}