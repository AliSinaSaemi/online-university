{"ast":null,"code":"ace.define(\"ace/mode/perl6_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var Perl6HighlightRules = function Perl6HighlightRules() {\n    var keywords = \"my|our|class|role|grammar|is|does|sub|method|submethod|try|\" + \"default|when|if|elsif|else|unless|with|orwith|without|for|given|proceed|\" + \"succeed|loop|while|until|repeat|module|use|need|import|require|unit|\" + \"constant|enum|multi|return|has|token|rule|make|made|proto|state|augment|\" + \"but|anon|supersede|let|subset|gather|returns|return-rw|temp|\" + \"BEGIN|CHECK|INIT|END|CLOSE|ENTER|LEAVE|KEEP|UNDO|PRE|POST|FIRST|NEXT|LAST|CATCH|CONTROL|QUIT|DOC\";\n    var types = \"Any|Array|Associative|AST|atomicint|Attribute|Backtrace|Backtrace::Frame|\" + \"Bag|Baggy|BagHash|Blob|Block|Bool|Buf|Callable|CallFrame|Cancellation|\" + \"Capture|Channel|Code|compiler|Complex|ComplexStr|Cool|CurrentThreadScheduler|\" + \"Cursor|Date|Dateish|DateTime|Distro|Duration|Encoding|Exception|Failure|\" + \"FatRat|Grammar|Hash|HyperWhatever|Instant|Int|IntStr|IO|IO::ArgFiles|\" + \"IO::CatHandle|IO::Handle|IO::Notification|IO::Path|IO::Path::Cygwin|\" + \"IO::Path::QNX|IO::Path::Unix|IO::Path::Win32|IO::Pipe|IO::Socket|\" + \"IO::Socket::Async|IO::Socket::INET|IO::Spec|IO::Spec::Cygwin|IO::Spec::QNX|\" + \"IO::Spec::Unix|IO::Spec::Win32|IO::Special|Iterable|Iterator|Junction|Kernel|\" + \"Label|List|Lock|Lock::Async|Macro|Map|Match|Metamodel::AttributeContainer|\" + \"Metamodel::C3MRO|Metamodel::ClassHOW|Metamodel::EnumHOW|Metamodel::Finalization|\" + \"Metamodel::MethodContainer|Metamodel::MROBasedMethodDispatch|Metamodel::MultipleInheritance|\" + \"Metamodel::Naming|Metamodel::Primitives|Metamodel::PrivateMethodContainer|\" + \"Metamodel::RoleContainer|Metamodel::Trusting|Method|Mix|MixHash|Mixy|Mu|\" + \"NFC|NFD|NFKC|NFKD|Nil|Num|Numeric|NumStr|ObjAt|Order|Pair|Parameter|Perl|\" + \"Pod::Block|Pod::Block::Code|Pod::Block::Comment|Pod::Block::Declarator|\" + \"Pod::Block::Named|Pod::Block::Para|Pod::Block::Table|Pod::Heading|Pod::Item|\" + \"Positional|PositionalBindFailover|Proc|Proc::Async|Promise|Proxy|PseudoStash|\" + \"QuantHash|Range|Rat|Rational|RatStr|Real|Regex|Routine|Scalar|Scheduler|\" + \"Semaphore|Seq|Set|SetHash|Setty|Signature|Slip|Stash|Str|StrDistance|Stringy|\" + \"Sub|Submethod|Supplier|Supplier::Preserving|Supply|Systemic|Tap|Telemetry|\" + \"Telemetry::Instrument::Thread|Telemetry::Instrument::Usage|Telemetry::Period|\" + \"Telemetry::Sampler|Thread|ThreadPoolScheduler|UInt|Uni|utf8|Variable|Version|\" + \"VM|Whatever|WhateverCode|WrapHandle|int|uint|num|str|\" + \"int8|int16|int32|int64|uint8|uint16|uint32|uint64|long|longlong|num32|num64|size_t|bool|CArray|Pointer|\" + \"Backtrace|Backtrace::Frame|Exception|Failure|X::AdHoc|X::Anon::Augment|X::Anon::Multi|\" + \"X::Assignment::RO|X::Attribute::NoPackage|X::Attribute::Package|X::Attribute::Undeclared|\" + \"X::Augment::NoSuchType|X::Bind|X::Bind::NativeType|X::Bind::Slice|X::Caller::NotDynamic|\" + \"X::Channel::ReceiveOnClosed|X::Channel::SendOnClosed|X::Comp|X::Composition::NotComposable|\" + \"X::Constructor::Positional|X::ControlFlow|X::ControlFlow::Return|X::DateTime::TimezoneClash|\" + \"X::Declaration::Scope|X::Declaration::Scope::Multi|X::Does::TypeObject|X::Eval::NoSuchLang|\" + \"X::Export::NameClash|X::IO|X::IO::Chdir|X::IO::Chmod|X::IO::Copy|X::IO::Cwd|X::IO::Dir|\" + \"X::IO::DoesNotExist|X::IO::Link|X::IO::Mkdir|X::IO::Move|X::IO::Rename|X::IO::Rmdir|X::IO::Symlink|\" + \"X::IO::Unlink|X::Inheritance::NotComposed|X::Inheritance::Unsupported|X::Method::InvalidQualifier|\" + \"X::Method::NotFound|X::Method::Private::Permission|X::Method::Private::Unqualified|\" + \"X::Mixin::NotComposable|X::NYI|X::NoDispatcher|X::Numeric::Real|X::OS|X::Obsolete|X::OutOfRange|\" + \"X::Package::Stubbed|X::Parameter::Default|X::Parameter::MultipleTypeConstraints|\" + \"X::Parameter::Placeholder|X::Parameter::Twigil|X::Parameter::WrongOrder|X::Phaser::Multiple|\" + \"X::Phaser::PrePost|X::Placeholder::Block|X::Placeholder::Mainline|X::Pod|X::Proc::Async|\" + \"X::Proc::Async::AlreadyStarted|X::Proc::Async::CharsOrBytes|X::Proc::Async::MustBeStarted|\" + \"X::Proc::Async::OpenForWriting|X::Proc::Async::TapBeforeSpawn|X::Proc::Unsuccessful|\" + \"X::Promise::CauseOnlyValidOnBroken|X::Promise::Vowed|X::Redeclaration|X::Role::Initialization|\" + \"X::Seq::Consumed|X::Sequence::Deduction|X::Signature::NameClash|X::Signature::Placeholder|\" + \"X::Str::Numeric|X::StubCode|X::Syntax|X::Syntax::Augment::WithoutMonkeyTyping|\" + \"X::Syntax::Comment::Embedded|X::Syntax::Confused|X::Syntax::InfixInTermPosition|\" + \"X::Syntax::Malformed|X::Syntax::Missing|X::Syntax::NegatedPair|X::Syntax::NoSelf|\" + \"X::Syntax::Number::RadixOutOfRange|X::Syntax::P5|X::Syntax::Regex::Adverb|\" + \"X::Syntax::Regex::SolitaryQuantifier|X::Syntax::Reserved|X::Syntax::Self::WithoutObject|\" + \"X::Syntax::Signature::InvocantMarker|X::Syntax::Term::MissingInitializer|X::Syntax::UnlessElse|\" + \"X::Syntax::Variable::Match|X::Syntax::Variable::Numeric|X::Syntax::Variable::Twigil|X::Temporal|\" + \"X::Temporal::InvalidFormat|X::TypeCheck|X::TypeCheck::Assignment|X::TypeCheck::Binding|\" + \"X::TypeCheck::Return|X::TypeCheck::Splice|X::Undeclared\";\n    var builtinFunctions = \"abs|abs2rel|absolute|accept|ACCEPTS|accessed|acos|acosec|acosech|acosh|\" + \"acotan|acotanh|acquire|act|action|actions|add|add_attribute|add_enum_value|\" + \"add_fallback|add_method|add_parent|add_private_method|add_role|add_trustee|\" + \"adverb|after|all|allocate|allof|allowed|alternative-names|annotations|antipair|\" + \"antipairs|any|anyof|app_lifetime|append|arch|archname|args|arity|asec|asech|\" + \"asin|asinh|ASSIGN-KEY|ASSIGN-POS|assuming|ast|at|atan|atan2|atanh|AT-KEY|\" + \"atomic-assign|atomic-dec-fetch|atomic-fetch|atomic-fetch-add|atomic-fetch-dec|\" + \"atomic-fetch-inc|atomic-fetch-sub|atomic-inc-fetch|AT-POS|attributes|auth|await|\" + \"backtrace|Bag|BagHash|base|basename|base-repeating|batch|BIND-KEY|BIND-POS|\" + \"bind-stderr|bind-stdin|bind-stdout|bind-udp|bits|bless|block|bool-only|\" + \"bounds|break|Bridge|broken|BUILD|build-date|bytes|cache|callframe|calling-package|\" + \"CALL-ME|callsame|callwith|can|cancel|candidates|cando|canonpath|caps|caption|\" + \"Capture|cas|catdir|categorize|categorize-list|catfile|catpath|cause|ceiling|\" + \"cglobal|changed|Channel|chars|chdir|child|child-name|child-typename|chmod|chomp|\" + \"chop|chr|chrs|chunks|cis|classify|classify-list|cleanup|clone|close|closed|\" + \"close-stdin|code|codes|collate|column|comb|combinations|command|comment|\" + \"compiler|Complex|compose|compose_type|composer|condition|config|configure_destroy|\" + \"configure_type_checking|conj|connect|constraints|construct|contains|contents|copy|\" + \"cos|cosec|cosech|cosh|cotan|cotanh|count|count-only|cpu-cores|cpu-usage|CREATE|\" + \"create_type|cross|cue|curdir|curupdir|d|Date|DateTime|day|daycount|day-of-month|\" + \"day-of-week|day-of-year|days-in-month|declaration|decode|decoder|deepmap|\" + \"defined|DEFINITE|delayed|DELETE-KEY|DELETE-POS|denominator|desc|DESTROY|destroyers|\" + \"devnull|did-you-mean|die|dir|dirname|dir-sep|DISTROnames|do|done|duckmap|dynamic|\" + \"e|eager|earlier|elems|emit|enclosing|encode|encoder|encoding|end|ends-with|enum_from_value|\" + \"enum_value_list|enum_values|enums|eof|EVAL|EVALFILE|exception|excludes-max|excludes-min|\" + \"EXISTS-KEY|EXISTS-POS|exit|exitcode|exp|expected|explicitly-manage|expmod|extension|f|\" + \"fail|fc|feature|file|filename|find_method|find_method_qualified|finish|first|flat|flatmap|\" + \"flip|floor|flush|fmt|format|formatter|freeze|from|from-list|from-loop|from-posix|full|\" + \"full-barrier|get|get_value|getc|gist|got|grab|grabpairs|grep|handle|handled|handles|\" + \"hardware|has_accessor|head|headers|hh-mm-ss|hidden|hides|hour|how|hyper|id|illegal|\" + \"im|in|indent|index|indices|indir|infinite|infix|install_method_cache|\" + \"Instant|instead|int-bounds|interval|in-timezone|invalid-str|invert|invocant|IO|\" + \"IO::Notification.watch-path|is_trusted|is_type|isa|is-absolute|is-hidden|is-initial-thread|\" + \"is-int|is-lazy|is-leap-year|isNaN|is-prime|is-relative|is-routine|is-setting|is-win|item|\" + \"iterator|join|keep|kept|KERNELnames|key|keyof|keys|kill|kv|kxxv|l|lang|last|lastcall|later|\" + \"lazy|lc|leading|level|line|lines|link|listen|live|local|lock|log|log10|lookup|lsb|\" + \"MAIN|match|max|maxpairs|merge|message|method_table|methods|migrate|min|minmax|\" + \"minpairs|minute|misplaced|Mix|MixHash|mkdir|mode|modified|month|move|mro|msb|multiness|\" + \"name|named|named_names|narrow|nativecast|native-descriptor|nativesizeof|new|new_type|\" + \"new-from-daycount|new-from-pairs|next|nextcallee|next-handle|nextsame|nextwith|NFC|NFD|\" + \"NFKC|NFKD|nl-in|nl-out|nodemap|none|norm|not|note|now|nude|numerator|Numeric|of|\" + \"offset|offset-in-hours|offset-in-minutes|old|on-close|one|on-switch|open|opened|\" + \"operation|optional|ord|ords|orig|os-error|osname|out-buffer|pack|package|package-kind|\" + \"package-name|packages|pair|pairs|pairup|parameter|params|parent|parent-name|parents|parse|\" + \"parse-base|parsefile|parse-names|parts|path|path-sep|payload|peer-host|peer-port|periods|\" + \"perl|permutations|phaser|pick|pickpairs|pid|placeholder|plus|polar|poll|polymod|pop|pos|\" + \"positional|posix|postfix|postmatch|precomp-ext|precomp-target|pred|prefix|prematch|prepend|\" + \"print|printf|print-nl|print-to|private|private_method_table|proc|produce|Promise|prompt|\" + \"protect|pull-one|push|push-all|push-at-least|push-exactly|push-until-lazy|put|\" + \"qualifier-type|quit|r|race|radix|rand|range|raw|re|read|readchars|readonly|\" + \"ready|Real|reallocate|reals|reason|rebless|receive|recv|redispatcher|redo|reduce|\" + \"rel2abs|relative|release|rename|repeated|replacement|report|reserved|resolve|\" + \"restore|result|resume|rethrow|reverse|right|rindex|rmdir|roles_to_compose|\" + \"rolish|roll|rootdir|roots|rotate|rotor|round|roundrobin|routine-type|run|rwx|s|\" + \"samecase|samemark|samewith|say|schedule-on|scheduler|scope|sec|sech|second|seek|\" + \"self|send|Set|set_hidden|set_name|set_package|set_rw|set_value|SetHash|\" + \"set-instruments|setup_finalization|shape|share|shell|shift|sibling|sigil|\" + \"sign|signal|signals|signature|sin|sinh|sink|sink-all|skip|skip-at-least|\" + \"skip-at-least-pull-one|skip-one|sleep|sleep-timer|sleep-until|Slip|slurp|\" + \"slurp-rest|slurpy|snap|snapper|so|socket-host|socket-port|sort|source|\" + \"source-package|spawn|SPEC|splice|split|splitdir|splitpath|sprintf|spurt|\" + \"sqrt|squish|srand|stable|start|started|starts-with|status|stderr|stdout|\" + \"sub_signature|subbuf|subbuf-rw|subname|subparse|subst|subst-mutate|\" + \"substr|substr-eq|substr-rw|succ|sum|Supply|symlink|t|tail|take|take-rw|\" + \"tan|tanh|tap|target|target-name|tc|tclc|tell|then|throttle|throw|timezone|\" + \"tmpdir|to|today|toggle|to-posix|total|trailing|trans|tree|trim|trim-leading|\" + \"trim-trailing|truncate|truncated-to|trusts|try_acquire|trying|twigil|type|\" + \"type_captures|typename|uc|udp|uncaught_handler|unimatch|uniname|uninames|\" + \"uniparse|uniprop|uniprops|unique|unival|univals|unlink|unlock|unpack|unpolar|\" + \"unshift|unwrap|updir|USAGE|utc|val|value|values|VAR|variable|verbose-config|\" + \"version|VMnames|volume|vow|w|wait|warn|watch|watch-path|week|weekday-of-month|\" + \"week-number|week-year|WHAT|WHERE|WHEREFORE|WHICH|WHO|whole-second|WHY|\" + \"wordcase|words|workaround|wrap|write|write-to|yada|year|yield|yyyy-mm-dd|\" + \"z|zip|zip-latest|\" + \"plan|done-testing|bail-out|todo|skip|skip-rest|diag|subtest|pass|flunk|ok|\" + \"nok|cmp-ok|is-deeply|isnt|is-approx|like|unlike|use-ok|isa-ok|does-ok|\" + \"can-ok|dies-ok|lives-ok|eval-dies-ok|eval-lives-ok|throws-like|fails-like|\" + \"rw|required|native|repr|export|symbol\";\n    var constants_ascii = \"pi|Inf|tau|time\";\n    var ops_txt = \"eq|ne|gt|lt|le|ge|div|gcd|lcm|leg|cmp|ff|fff|\" + \"x|before|after|Z|X|and|or|andthen|notandthen|orelse|xor\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword\": keywords,\n      \"storage.type\": types,\n      \"constant.language\": constants_ascii,\n      \"support.function\": builtinFunctions,\n      \"keyword.operator\": ops_txt\n    }, \"identifier\");\n    var moduleName = \"[a-zA-Z_][a-zA-Z_0-9:-]*\\\\b\";\n    var hex = {\n      token: \"constant.numeric\",\n      regex: \"0x[0-9a-fA-F]+\\\\b\"\n    };\n    var num_rat = {\n      token: \"constant.numeric\",\n      regex: \"[+-.]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n    };\n    var num_with_ = {\n      token: \"constant.numeric\",\n      regex: \"(?:\\\\d+_?\\\\d+)+\\\\b\"\n    };\n    var complex_numbers = {\n      token: \"constant.numeric\",\n      regex: \"\\\\+?\\\\d+i\\\\b\"\n    };\n    var booleans = {\n      token: \"constant.language.boolean\",\n      regex: \"(?:True|False)\\\\b\"\n    };\n    var versions = {\n      token: \"constant.other\",\n      regex: \"v[0-9](?:\\\\.[a-zA-Z0-9*])*\\\\b\"\n    };\n    var lang_keywords = {\n      token: keywordMapper,\n      regex: \"[a-zA-Z][\\\\:a-zA-Z0-9_-]*\\\\b\"\n    };\n    var variables = {\n      token: \"variable.language\",\n      regex: \"[$@%&][?*!.]?[a-zA-Z0-9_-]+\\\\b\"\n    };\n    var vars_special = {\n      token: \"variable.language\",\n      regex: \"\\\\$[/|!]?|@\\\\$/\"\n    };\n    var ops_char = {\n      token: \"keyword.operator\",\n      regex: \"=|<|>|\\\\+|\\\\*|-|/|~|%|\\\\?|!|\\\\^|\\\\.|\\\\:|\\\\,|\" + \"»|«|\\\\||\\\\&|⚛|∘\"\n    };\n    var constants_unicode = {\n      token: \"constant.language\",\n      regex: \"𝑒|π|τ|∞\"\n    };\n    var qstrings = {\n      token: \"string.quoted.single\",\n      regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n    };\n    var word_quoting = {\n      token: \"string.quoted.single\",\n      regex: \"[<](?:[a-zA-Z0-9 ])*[>]\"\n    };\n    var regexp = {\n      token: \"string.regexp\",\n      regex: \"[m|rx]?[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\n    };\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.block\",\n        // Embedded Comments - Parentheses\n        regex: \"#[`|=]\\\\(.*\\\\)\"\n      }, {\n        token: \"comment.block\",\n        // Embedded Comments - Brackets\n        regex: \"#[`|=]\\\\[.*\\\\]\"\n      }, {\n        token: \"comment.doc\",\n        // Multiline Comments\n        regex: \"^=(?:begin)\\\\b\",\n        next: \"block_comment\"\n      }, {\n        token: \"string.unquoted\",\n        // q Heredocs\n        regex: \"q[x|w]?\\\\:to/END/;\",\n        next: \"qheredoc\"\n      }, {\n        token: \"string.unquoted\",\n        // qq Heredocs\n        regex: \"qq[x|w]?\\\\:to/END/;\",\n        next: \"qqheredoc\"\n      }, regexp, qstrings, {\n        token: \"string.quoted.double\",\n        // Double Quoted String\n        regex: '\"',\n        next: \"qqstring\"\n      }, word_quoting, {\n        token: [\"keyword\", \"text\", \"variable.module\"],\n        // use - Module Names, Pragmas, etc.\n        regex: \"(use)(\\\\s+)((?:\" + moduleName + \"\\\\.?)*)\"\n      }, hex, num_rat, num_with_, complex_numbers, booleans, versions, lang_keywords, variables, vars_special, ops_char, constants_unicode, {\n        token: \"comment\",\n        // Sigle Line Comments\n        regex: \"#.*$\"\n      }, {\n        token: \"lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.language.escape\",\n        regex: '\\\\\\\\(?:[nrtef\\\\\\\\\"$]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2})'\n      }, variables, vars_special, {\n        token: \"lparen\",\n        regex: \"{\",\n        next: \"qqinterpolation\"\n      }, {\n        token: \"string.quoted.double\",\n        regex: '\"',\n        next: \"start\"\n      }, {\n        defaultToken: \"string.quoted.double\"\n      }],\n      \"qqinterpolation\": [hex, num_rat, num_with_, complex_numbers, booleans, versions, lang_keywords, variables, vars_special, ops_char, constants_unicode, qstrings, regexp, {\n        token: \"rparen\",\n        regex: \"}\",\n        next: \"qqstring\"\n      }],\n      \"block_comment\": [{\n        token: \"comment.doc\",\n        regex: \"^=end +[a-zA-Z_0-9]*\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment.doc\"\n      }],\n      \"qheredoc\": [{\n        token: \"string.unquoted\",\n        regex: \"END$\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string.unquoted\"\n      }],\n      \"qqheredoc\": [variables, vars_special, {\n        token: \"lparen\",\n        regex: \"{\",\n        next: \"qqheredocinterpolation\"\n      }, {\n        token: \"string.unquoted\",\n        regex: \"END$\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string.unquoted\"\n      }],\n      \"qqheredocinterpolation\": [hex, num_rat, num_with_, complex_numbers, booleans, versions, lang_keywords, variables, vars_special, ops_char, constants_unicode, qstrings, regexp, {\n        token: \"rparen\",\n        regex: \"}\",\n        next: \"qqheredoc\"\n      }]\n    };\n  };\n\n  oop.inherits(Perl6HighlightRules, TextHighlightRules);\n  exports.Perl6HighlightRules = Perl6HighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/perl6\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/perl6_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var Perl6HighlightRules = require(\"./perl6_highlight_rules\").Perl6HighlightRules;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = Perl6HighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode({\n      start: \"^=(begin)\\\\b\",\n      end: \"^=(end)\\\\b\"\n    });\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.blockComment = [{\n      start: \"=begin\",\n      end: \"=end\",\n      lineStartOnly: true\n    }, {\n      start: \"=item\",\n      end: \"=end\",\n      lineStartOnly: true\n    }];\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/perl6\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/perl6\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}