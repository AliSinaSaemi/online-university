{"ast":null,"code":"/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\n'use strict';\n\nvar ExpGolomb;\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n * scheme used by h264.\n */\n\nExpGolomb = function ExpGolomb(workingData) {\n  var // the number of bytes left to examine in workingData\n  workingBytesAvailable = workingData.byteLength,\n      // the current word being examined\n  workingWord = 0,\n      // :uint\n  // the number of bits left to examine in the current word\n  workingBitsAvailable = 0; // :uint;\n  // ():uint\n\n  this.length = function () {\n    return 8 * workingBytesAvailable;\n  }; // ():uint\n\n\n  this.bitsAvailable = function () {\n    return 8 * workingBytesAvailable + workingBitsAvailable;\n  }; // ():void\n\n\n  this.loadWord = function () {\n    var position = workingData.byteLength - workingBytesAvailable,\n        workingBytes = new Uint8Array(4),\n        availableBytes = Math.min(4, workingBytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(workingData.subarray(position, position + availableBytes));\n    workingWord = new DataView(workingBytes.buffer).getUint32(0); // track the amount of workingData that has been processed\n\n    workingBitsAvailable = availableBytes * 8;\n    workingBytesAvailable -= availableBytes;\n  }; // (count:int):void\n\n\n  this.skipBits = function (count) {\n    var skipBytes; // :int\n\n    if (workingBitsAvailable > count) {\n      workingWord <<= count;\n      workingBitsAvailable -= count;\n    } else {\n      count -= workingBitsAvailable;\n      skipBytes = Math.floor(count / 8);\n      count -= skipBytes * 8;\n      workingBytesAvailable -= skipBytes;\n      this.loadWord();\n      workingWord <<= count;\n      workingBitsAvailable -= count;\n    }\n  }; // (size:int):uint\n\n\n  this.readBits = function (size) {\n    var bits = Math.min(workingBitsAvailable, size),\n        // :uint\n    valu = workingWord >>> 32 - bits; // :uint\n    // if size > 31, handle error\n\n    workingBitsAvailable -= bits;\n\n    if (workingBitsAvailable > 0) {\n      workingWord <<= bits;\n    } else if (workingBytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n\n    if (bits > 0) {\n      return valu << bits | this.readBits(bits);\n    }\n\n    return valu;\n  }; // ():uint\n\n\n  this.skipLeadingZeros = function () {\n    var leadingZeroCount; // :uint\n\n    for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n      if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {\n        // the first bit of working word is 1\n        workingWord <<= leadingZeroCount;\n        workingBitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    } // we exhausted workingWord and still have not found a 1\n\n\n    this.loadWord();\n    return leadingZeroCount + this.skipLeadingZeros();\n  }; // ():void\n\n\n  this.skipUnsignedExpGolomb = function () {\n    this.skipBits(1 + this.skipLeadingZeros());\n  }; // ():void\n\n\n  this.skipExpGolomb = function () {\n    this.skipBits(1 + this.skipLeadingZeros());\n  }; // ():uint\n\n\n  this.readUnsignedExpGolomb = function () {\n    var clz = this.skipLeadingZeros(); // :uint\n\n    return this.readBits(clz + 1) - 1;\n  }; // ():int\n\n\n  this.readExpGolomb = function () {\n    var valu = this.readUnsignedExpGolomb(); // :int\n\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n    }\n\n    return -1 * (valu >>> 1); // divide by two then make it negative\n  }; // Some convenience functions\n  // :Boolean\n\n\n  this.readBoolean = function () {\n    return this.readBits(1) === 1;\n  }; // ():int\n\n\n  this.readUnsignedByte = function () {\n    return this.readBits(8);\n  };\n\n  this.loadWord();\n};\n\nmodule.exports = ExpGolomb;","map":null,"metadata":{},"sourceType":"script"}