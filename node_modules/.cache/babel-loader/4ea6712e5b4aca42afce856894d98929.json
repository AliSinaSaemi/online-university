{"ast":null,"code":"/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js'),\n    CaptionStream = require('./caption-stream'),\n    StreamTypes = require('./stream-types'),\n    TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\n\nvar m2tsStreamTypes = require('./stream-types.js'); // object types\n\n\nvar _TransportPacketStream, _TransportParseStream, _ElementaryStream; // constants\n\n\nvar MP2T_PACKET_LENGTH = 188,\n    // bytes\nSYNC_BYTE = 0x47;\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\n\n_TransportPacketStream = function TransportPacketStream() {\n  var buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n      bytesInBuffer = 0;\n\n  _TransportPacketStream.prototype.init.call(this); // Deliver new bytes to the stream.\n\n  /**\n   * Split a stream of data into M2TS packets\n  **/\n\n\n  this.push = function (bytes) {\n    var startIndex = 0,\n        endIndex = MP2T_PACKET_LENGTH,\n        everything; // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    } // While we have enough data for a packet\n\n\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n\n      startIndex++;\n      endIndex++;\n    } // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n\n\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n  /**\n   * Passes identified M2TS packets to the TransportParseStream to be parsed\n  **/\n\n\n  this.flush = function () {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n\n    this.trigger('done');\n  };\n};\n\n_TransportPacketStream.prototype = new Stream();\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\n\n_TransportParseStream = function TransportParseStream() {\n  var parsePsi, parsePat, parsePmt, self;\n\n  _TransportParseStream.prototype.init.call(this);\n\n  self = this;\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n\n  parsePsi = function parsePsi(payload, psi) {\n    var offset = 0; // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n\n  parsePat = function parsePat(payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n    // skip the PSI header and parse the first PMT entry\n\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n\n\n  parsePmt = function parsePmt(payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset; // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n\n    if (!(payload[5] & 0x01)) {\n      return;\n    } // overwrite any existing program map table\n\n\n    self.programMapTable = {\n      video: null,\n      audio: null,\n      'timed-metadata': {}\n    }; // the mapping table ends at the end of the current section\n\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11]; // advance the offset to the first entry in the mapping table\n\n    offset = 12 + programInfoLength;\n\n    while (offset < tableEnd) {\n      var streamType = payload[offset];\n      var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]; // only map a single elementary_pid for audio and video stream types\n      // TODO: should this be done for metadata too? for now maintain behavior of\n      //       multiple metadata streams\n\n      if (streamType === StreamTypes.H264_STREAM_TYPE && self.programMapTable.video === null) {\n        self.programMapTable.video = pid;\n      } else if (streamType === StreamTypes.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {\n        self.programMapTable.audio = pid;\n      } else if (streamType === StreamTypes.METADATA_STREAM_TYPE) {\n        // map pid to stream type for metadata streams\n        self.programMapTable['timed-metadata'][pid] = streamType;\n      } // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n\n\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    } // record the map on the packet as well\n\n\n    pmt.programMapTable = self.programMapTable;\n  };\n  /**\n   * Deliver a new MP2T packet to the next stream in the pipeline.\n   */\n\n\n  this.push = function (packet) {\n    var result = {},\n        offset = 4;\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40); // pid is a 13-bit field starting at the last bit of packet[1]\n\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2]; // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n\n    if ((packet[3] & 0x30) >>> 4 > 0x01) {\n      offset += packet[offset] + 1;\n    } // parse the rest of the packet based on the type\n\n\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result); // if there are any packets waiting for a PMT to be found, process them now\n\n      while (this.packetsWaitingForPmt.length) {\n        this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n      }\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n\n  this.processPes_ = function (packet, offset, result) {\n    // set the appropriate stream type\n    if (result.pid === this.programMapTable.video) {\n      result.streamType = StreamTypes.H264_STREAM_TYPE;\n    } else if (result.pid === this.programMapTable.audio) {\n      result.streamType = StreamTypes.ADTS_STREAM_TYPE;\n    } else {\n      // if not video or audio, it is timed-metadata or unknown\n      // if unknown, streamType will be undefined\n      result.streamType = this.programMapTable['timed-metadata'][result.pid];\n    }\n\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n    this.trigger('data', result);\n  };\n};\n\n_TransportParseStream.prototype = new Stream();\n_TransportParseStream.STREAM_TYPES = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\n\n_ElementaryStream = function ElementaryStream() {\n  var self = this,\n      // PES packet fragments\n  video = {\n    data: [],\n    size: 0\n  },\n      audio = {\n    data: [],\n    size: 0\n  },\n      timedMetadata = {\n    data: [],\n    size: 0\n  },\n      parsePes = function parsePes(payload, pes) {\n    var ptsDtsFlags; // get the packet length, this will be 0 for video\n\n    pes.packetLength = 6 + (payload[4] << 8 | payload[5]); // find out if this packets starts a new keyframe\n\n    pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0; // PES packets may be annotated with a PTS value, or a PTS value\n    // and a DTS value. Determine what combination of values is\n    // available to work with.\n\n    ptsDtsFlags = payload[7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\n    // performs all bitwise operations on 32-bit integers but javascript\n    // supports a much greater range (52-bits) of integer using standard\n    // mathematical operations.\n    // We construct a 31-bit value using bitwise operators over the 31\n    // most significant bits and then multiply by 4 (equal to a left-shift\n    // of 2) before we add the final 2 least significant bits of the\n    // timestamp (equal to an OR.)\n\n    if (ptsDtsFlags & 0xC0) {\n      // the PTS and DTS are not written out directly. For information\n      // on how they are encoded, see\n      // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n      pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;\n      pes.pts *= 4; // Left shift by 2\n\n      pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n\n      pes.dts = pes.pts;\n\n      if (ptsDtsFlags & 0x40) {\n        pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;\n        pes.dts *= 4; // Left shift by 2\n\n        pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n      }\n    } // the data section starts immediately after the PES header.\n    // pes_header_data_length specifies the number of header bytes\n    // that follow the last byte of the field.\n\n\n    pes.data = payload.subarray(9 + payload[8]);\n  },\n\n  /**\n    * Pass completely parsed PES packets to the next stream in the pipeline\n   **/\n  flushStream = function flushStream(stream, type, forceFlush) {\n    var packetData = new Uint8Array(stream.size),\n        event = {\n      type: type\n    },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment; // do nothing if there is not enough buffered data for a complete\n    // PES header\n\n    if (!stream.data.length || stream.size < 9) {\n      return;\n    }\n\n    event.trackId = stream.data[0].pid; // reassemble the packet\n\n    for (i = 0; i < stream.data.length; i++) {\n      fragment = stream.data[i];\n      packetData.set(fragment.data, offset);\n      offset += fragment.data.byteLength;\n    } // parse assembled packet's PES header\n\n\n    parsePes(packetData, event); // non-video PES packets MUST have a non-zero PES_packet_length\n    // check that there is enough stream data to fill the packet\n\n    packetFlushable = type === 'video' || event.packetLength <= stream.size; // flush pending packets if the conditions are right\n\n    if (forceFlush || packetFlushable) {\n      stream.size = 0;\n      stream.data.length = 0;\n    } // only emit packets that are complete. this is to avoid assembling\n    // incomplete PES packets due to poor segmentation\n\n\n    if (packetFlushable) {\n      self.trigger('data', event);\n    }\n  };\n\n  _ElementaryStream.prototype.init.call(this);\n  /**\n   * Identifies M2TS packet types and parses PES packets using metadata\n   * parsed from the PMT\n   **/\n\n\n  this.push = function (data) {\n    ({\n      pat: function pat() {// we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function pes() {\n        var stream, streamType;\n\n        switch (data.streamType) {\n          case StreamTypes.H264_STREAM_TYPE:\n          case m2tsStreamTypes.H264_STREAM_TYPE:\n            stream = video;\n            streamType = 'video';\n            break;\n\n          case StreamTypes.ADTS_STREAM_TYPE:\n            stream = audio;\n            streamType = 'audio';\n            break;\n\n          case StreamTypes.METADATA_STREAM_TYPE:\n            stream = timedMetadata;\n            streamType = 'timed-metadata';\n            break;\n\n          default:\n            // ignore unknown stream types\n            return;\n        } // if a new packet is starting, we can flush the completed\n        // packet\n\n\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        } // buffer this fragment until we are sure we've received the\n        // complete payload\n\n\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function pmt() {\n        var event = {\n          type: 'metadata',\n          tracks: []\n        },\n            programMapTable = data.programMapTable; // translate audio and video streams to tracks\n\n        if (programMapTable.video !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.video,\n            codec: 'avc',\n            type: 'video'\n          });\n        }\n\n        if (programMapTable.audio !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.audio,\n            codec: 'adts',\n            type: 'audio'\n          });\n        }\n\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n\n\n  this.flush = function () {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\n\n_ElementaryStream.prototype = new Stream();\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: _TransportPacketStream,\n  TransportParseStream: _TransportParseStream,\n  ElementaryStream: _ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\n\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\n\nmodule.exports = m2ts;","map":null,"metadata":{},"sourceType":"script"}