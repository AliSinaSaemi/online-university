{"ast":null,"code":"ace.define(\"ace/mode/prolog_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var PrologHighlightRules = function PrologHighlightRules() {\n    this.$rules = {\n      start: [{\n        include: '#comment'\n      }, {\n        include: '#basic_fact'\n      }, {\n        include: '#rule'\n      }, {\n        include: '#directive'\n      }, {\n        include: '#fact'\n      }],\n      '#atom': [{\n        token: 'constant.other.atom.prolog',\n        regex: '\\\\b[a-z][a-zA-Z0-9_]*\\\\b'\n      }, {\n        token: 'constant.numeric.prolog',\n        regex: '-?\\\\d+(?:\\\\.\\\\d+)?'\n      }, {\n        include: '#string'\n      }],\n      '#basic_elem': [{\n        include: '#comment'\n      }, {\n        include: '#statement'\n      }, {\n        include: '#constants'\n      }, {\n        include: '#operators'\n      }, {\n        include: '#builtins'\n      }, {\n        include: '#list'\n      }, {\n        include: '#atom'\n      }, {\n        include: '#variable'\n      }],\n      '#basic_fact': [{\n        token: ['entity.name.function.fact.basic.prolog', 'punctuation.end.fact.basic.prolog'],\n        regex: '([a-z]\\\\w*)(\\\\.)'\n      }],\n      '#builtins': [{\n        token: 'support.function.builtin.prolog',\n        regex: '\\\\b(?:abolish|abort|ancestors|arg|ascii|assert[az]|atom(?:ic)?|body|char|close|conc|concat|consult|define|definition|dynamic|dump|fail|file|free|free_proc|functor|getc|goal|halt|head|head|integer|length|listing|match_args|member|next_clause|nl|nonvar|nth|number|cvars|nvars|offset|op|print?|prompt|putc|quoted|ratom|read|redefine|rename|retract(?:all)?|see|seeing|seen|skip|spy|statistics|system|tab|tell|telling|term|time|told|univ|unlink_clause|unspy_predicate|var|write)\\\\b'\n      }],\n      '#comment': [{\n        token: ['punctuation.definition.comment.prolog', 'comment.line.percentage.prolog'],\n        regex: '(%)(.*$)'\n      }, {\n        token: 'punctuation.definition.comment.prolog',\n        regex: '/\\\\*',\n        push: [{\n          token: 'punctuation.definition.comment.prolog',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.prolog'\n        }]\n      }],\n      '#constants': [{\n        token: 'constant.language.prolog',\n        regex: '\\\\b(?:true|false|yes|no)\\\\b'\n      }],\n      '#directive': [{\n        token: 'keyword.operator.directive.prolog',\n        regex: ':-',\n        push: [{\n          token: 'meta.directive.prolog',\n          regex: '\\\\.',\n          next: 'pop'\n        }, {\n          include: '#comment'\n        }, {\n          include: '#statement'\n        }, {\n          defaultToken: 'meta.directive.prolog'\n        }]\n      }],\n      '#expr': [{\n        include: '#comments'\n      }, {\n        token: 'meta.expression.prolog',\n        regex: '\\\\(',\n        push: [{\n          token: 'meta.expression.prolog',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#expr'\n        }, {\n          defaultToken: 'meta.expression.prolog'\n        }]\n      }, {\n        token: 'keyword.control.cutoff.prolog',\n        regex: '!'\n      }, {\n        token: 'punctuation.control.and.prolog',\n        regex: ','\n      }, {\n        token: 'punctuation.control.or.prolog',\n        regex: ';'\n      }, {\n        include: '#basic_elem'\n      }],\n      '#fact': [{\n        token: ['entity.name.function.fact.prolog', 'punctuation.begin.fact.parameters.prolog'],\n        regex: '([a-z]\\\\w*)(\\\\()(?!.*:-)',\n        push: [{\n          token: ['punctuation.end.fact.parameters.prolog', 'punctuation.end.fact.prolog'],\n          regex: '(\\\\))(\\\\.?)',\n          next: 'pop'\n        }, {\n          include: '#parameter'\n        }, {\n          defaultToken: 'meta.fact.prolog'\n        }]\n      }],\n      '#list': [{\n        token: 'punctuation.begin.list.prolog',\n        regex: '\\\\[(?=.*\\\\])',\n        push: [{\n          token: 'punctuation.end.list.prolog',\n          regex: '\\\\]',\n          next: 'pop'\n        }, {\n          include: '#comment'\n        }, {\n          token: 'punctuation.separator.list.prolog',\n          regex: ','\n        }, {\n          token: 'punctuation.concat.list.prolog',\n          regex: '\\\\|',\n          push: [{\n            token: 'meta.list.concat.prolog',\n            regex: '(?=\\\\s*\\\\])',\n            next: 'pop'\n          }, {\n            include: '#basic_elem'\n          }, {\n            defaultToken: 'meta.list.concat.prolog'\n          }]\n        }, {\n          include: '#basic_elem'\n        }, {\n          defaultToken: 'meta.list.prolog'\n        }]\n      }],\n      '#operators': [{\n        token: 'keyword.operator.prolog',\n        regex: '\\\\\\\\\\\\+|\\\\bnot\\\\b|\\\\bis\\\\b|->|[><]|[><\\\\\\\\:=]?=|(?:=\\\\\\\\|\\\\\\\\=)='\n      }],\n      '#parameter': [{\n        token: 'variable.language.anonymous.prolog',\n        regex: '\\\\b_\\\\b'\n      }, {\n        token: 'variable.parameter.prolog',\n        regex: '\\\\b[A-Z_]\\\\w*\\\\b'\n      }, {\n        token: 'punctuation.separator.parameters.prolog',\n        regex: ','\n      }, {\n        include: '#basic_elem'\n      }, {\n        token: 'text',\n        regex: '[^\\\\s]'\n      }],\n      '#rule': [{\n        token: 'meta.rule.prolog',\n        regex: '(?=[a-z]\\\\w*.*:-)',\n        push: [{\n          token: 'punctuation.rule.end.prolog',\n          regex: '\\\\.',\n          next: 'pop'\n        }, {\n          token: 'meta.rule.signature.prolog',\n          regex: '(?=[a-z]\\\\w*.*:-)',\n          push: [{\n            token: 'meta.rule.signature.prolog',\n            regex: '(?=:-)',\n            next: 'pop'\n          }, {\n            token: 'entity.name.function.rule.prolog',\n            regex: '[a-z]\\\\w*(?=\\\\(|\\\\s*:-)'\n          }, {\n            token: 'punctuation.rule.parameters.begin.prolog',\n            regex: '\\\\(',\n            push: [{\n              token: 'punctuation.rule.parameters.end.prolog',\n              regex: '\\\\)',\n              next: 'pop'\n            }, {\n              include: '#parameter'\n            }, {\n              defaultToken: 'meta.rule.parameters.prolog'\n            }]\n          }, {\n            defaultToken: 'meta.rule.signature.prolog'\n          }]\n        }, {\n          token: 'keyword.operator.definition.prolog',\n          regex: ':-',\n          push: [{\n            token: 'meta.rule.definition.prolog',\n            regex: '(?=\\\\.)',\n            next: 'pop'\n          }, {\n            include: '#comment'\n          }, {\n            include: '#expr'\n          }, {\n            defaultToken: 'meta.rule.definition.prolog'\n          }]\n        }, {\n          defaultToken: 'meta.rule.prolog'\n        }]\n      }],\n      '#statement': [{\n        token: 'meta.statement.prolog',\n        regex: '(?=[a-z]\\\\w*\\\\()',\n        push: [{\n          token: 'punctuation.end.statement.parameters.prolog',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#builtins'\n        }, {\n          include: '#atom'\n        }, {\n          token: 'punctuation.begin.statement.parameters.prolog',\n          regex: '\\\\(',\n          push: [{\n            token: 'meta.statement.parameters.prolog',\n            regex: '(?=\\\\))',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.statement.prolog',\n            regex: ','\n          }, {\n            include: '#basic_elem'\n          }, {\n            defaultToken: 'meta.statement.parameters.prolog'\n          }]\n        }, {\n          defaultToken: 'meta.statement.prolog'\n        }]\n      }],\n      '#string': [{\n        token: 'punctuation.definition.string.begin.prolog',\n        regex: '\\'',\n        push: [{\n          token: 'punctuation.definition.string.end.prolog',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.prolog',\n          regex: '\\\\\\\\.'\n        }, {\n          token: 'constant.character.escape.quote.prolog',\n          regex: '\\'\\''\n        }, {\n          defaultToken: 'string.quoted.single.prolog'\n        }]\n      }],\n      '#variable': [{\n        token: 'variable.language.anonymous.prolog',\n        regex: '\\\\b_\\\\b'\n      }, {\n        token: 'variable.other.prolog',\n        regex: '\\\\b[A-Z_][a-zA-Z0-9_]*\\\\b'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  PrologHighlightRules.metaData = {\n    fileTypes: ['plg', 'prolog'],\n    foldingStartMarker: '(%\\\\s*region \\\\w*)|([a-z]\\\\w*.*:- ?)',\n    foldingStopMarker: '(%\\\\s*end(\\\\s*region)?)|(?=\\\\.)',\n    keyEquivalent: '^~P',\n    name: 'Prolog',\n    scopeName: 'source.prolog'\n  };\n  oop.inherits(PrologHighlightRules, TextHighlightRules);\n  exports.PrologHighlightRules = PrologHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/prolog\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/prolog_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var PrologHighlightRules = require(\"./prolog_highlight_rules\").PrologHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = PrologHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/prolog\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/prolog\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}