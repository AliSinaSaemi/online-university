{"ast":null,"code":"ace.define(\"ace/snippets/vala\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippets = [{\n    \"content\": \"case ${1:condition}:\\n\\t$0\\n\\tbreak;\\n\",\n    \"name\": \"case\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"case\"\n  }, {\n    \"content\": \"/**\\n * ${6}\\n */\\n${1:public} class ${2:MethodName}${3: : GLib.Object} {\\n\\n\\t/**\\n\\t * ${7}\\n\\t */\\n\\tpublic ${2}(${4}) {\\n\\t\\t${5}\\n\\t}\\n\\n\\t$0\\n}\",\n    \"name\": \"class\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"class\"\n  }, {\n    \"content\": \"(${1}) => {\\n\\t${0}\\n}\\n\",\n    \"name\": \"closure\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"=>\"\n  }, {\n    \"content\": \"/*\\n * $0\\n */\",\n    \"name\": \"Comment (multiline)\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"/*\"\n  }, {\n    \"content\": \"Console.WriteLine($1);\\n$0\",\n    \"name\": \"Console.WriteLine (writeline)\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"writeline\"\n  }, {\n    \"content\": \"[DBus(name = \\\"$0\\\")]\",\n    \"name\": \"DBus annotation\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"[DBus\"\n  }, {\n    \"content\": \"delegate ${1:void} ${2:DelegateName}($0);\",\n    \"name\": \"delegate\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"delegate\"\n  }, {\n    \"content\": \"do {\\n\\t$0\\n} while ($1);\\n\",\n    \"name\": \"do while\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"dowhile\"\n  }, {\n    \"content\": \"/**\\n * $0\\n */\",\n    \"name\": \"DocBlock\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"/**\"\n  }, {\n    \"content\": \"else if ($1) {\\n\\t$0\\n}\\n\",\n    \"name\": \"else if (elseif)\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"elseif\"\n  }, {\n    \"content\": \"else {\\n\\t$0\\n}\",\n    \"name\": \"else\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"else\"\n  }, {\n    \"content\": \"enum {$1:EnumName} {\\n\\t$0\\n}\",\n    \"name\": \"enum\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"enum\"\n  }, {\n    \"content\": \"public errordomain ${1:Error} {\\n\\t$0\\n}\",\n    \"name\": \"error domain\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"errordomain\"\n  }, {\n    \"content\": \"for ($1;$2;$3) {\\n\\t$0\\n}\",\n    \"name\": \"for\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"for\"\n  }, {\n    \"content\": \"foreach ($1 in $2) {\\n\\t$0\\n}\",\n    \"name\": \"foreach\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"foreach\"\n  }, {\n    \"content\": \"Gee.ArrayList<${1:G}>($0);\",\n    \"name\": \"Gee.ArrayList\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"ArrayList\"\n  }, {\n    \"content\": \"Gee.HashMap<${1:K},${2:V}>($0);\",\n    \"name\": \"Gee.HashMap\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"HashMap\"\n  }, {\n    \"content\": \"Gee.HashSet<${1:G}>($0);\",\n    \"name\": \"Gee.HashSet\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"HashSet\"\n  }, {\n    \"content\": \"if ($1) {\\n\\t$0\\n}\",\n    \"name\": \"if\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"if\"\n  }, {\n    \"content\": \"interface ${1:InterfaceName}{$2: : SuperInterface} {\\n\\t$0\\n}\",\n    \"name\": \"interface\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"interface\"\n  }, {\n    \"content\": \"public static int main(string [] argv) {\\n\\t${0}\\n\\treturn 0;\\n}\",\n    \"name\": \"Main function\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"main\"\n  }, {\n    \"content\": \"namespace $1 {\\n\\t$0\\n}\\n\",\n    \"name\": \"namespace (ns)\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"ns\"\n  }, {\n    \"content\": \"stdout.printf($0);\",\n    \"name\": \"printf\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"printf\"\n  }, {\n    \"content\": \"${1:public} ${2:Type} ${3:Name} {\\n\\tset {\\n\\t\\t$0\\n\\t}\\n\\tget {\\n\\n\\t}\\n}\",\n    \"name\": \"property (prop)\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"prop\"\n  }, {\n    \"content\": \"${1:public} ${2:Type} ${3:Name} {\\n\\tget {\\n\\t\\t$0\\n\\t}\\n}\",\n    \"name\": \"read-only property (roprop)\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"roprop\"\n  }, {\n    \"content\": \"@\\\"${1:\\\\$var}\\\"\",\n    \"name\": \"String template (@)\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"@\"\n  }, {\n    \"content\": \"struct ${1:StructName} {\\n\\t$0\\n}\",\n    \"name\": \"struct\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"struct\"\n  }, {\n    \"content\": \"switch ($1) {\\n\\t$0\\n}\",\n    \"name\": \"switch\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"switch\"\n  }, {\n    \"content\": \"try {\\n\\t$2\\n} catch (${1:Error} e) {\\n\\t$0\\n}\",\n    \"name\": \"try/catch\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"try\"\n  }, {\n    \"content\": \"\\\"\\\"\\\"$0\\\"\\\"\\\";\",\n    \"name\": \"Verbatim string (\\\"\\\"\\\")\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"verbatim\"\n  }, {\n    \"content\": \"while ($1) {\\n\\t$0\\n}\",\n    \"name\": \"while\",\n    \"scope\": \"vala\",\n    \"tabTrigger\": \"while\"\n  }];\n  exports.scope = \"\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/vala\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}