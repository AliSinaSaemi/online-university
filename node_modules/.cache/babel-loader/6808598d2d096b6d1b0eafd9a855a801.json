{"ast":null,"code":"ace.define(\"ace/mode/pascal_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var PascalHighlightRules = function PascalHighlightRules() {\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword.control\": \"absolute|abstract|all|and|and_then|array|as|asm|attribute|begin|bindable|case|class\" + \"|const|constructor|destructor|div|do|do|else|end|except|export|exports|external|far|file|finalization\" + \"|finally|for|forward|goto|if|implementation|import|in|inherited|initialization|interface|interrupt|is\" + \"|label|library|mod|module|name|near|nil|not|object|of|only|operator|or|or_else|otherwise|packed|pow|private\" + \"|program|property|protected|public|published|qualified|record|repeat|resident|restricted|segment|set|shl|shr\" + \"|then|to|try|type|unit|until|uses|value|var|view|virtual|while|with|xor\"\n    }, \"identifier\", true);\n    this.$rules = {\n      start: [{\n        caseInsensitive: true,\n        token: ['variable', \"text\", 'storage.type.prototype', 'entity.name.function.prototype'],\n        regex: '\\\\b(function|procedure)(\\\\s+)(\\\\w+)(\\\\.\\\\w+)?(?=(?:\\\\(.*?\\\\))?;\\\\s*(?:attribute|forward|external))'\n      }, {\n        caseInsensitive: true,\n        token: ['variable', \"text\", 'storage.type.function', 'entity.name.function'],\n        regex: '\\\\b(function|procedure)(\\\\s+)(\\\\w+)(\\\\.\\\\w+)?'\n      }, {\n        caseInsensitive: true,\n        token: keywordMapper,\n        regex: /\\b[a-z_]+\\b/\n      }, {\n        token: 'constant.numeric',\n        regex: '\\\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\\\.?[0-9]*)|(\\\\.[0-9]+))((e|E)(\\\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b'\n      }, {\n        token: 'punctuation.definition.comment',\n        regex: '--.*$'\n      }, {\n        token: 'punctuation.definition.comment',\n        regex: '//.*$'\n      }, {\n        token: 'punctuation.definition.comment',\n        regex: '\\\\(\\\\*',\n        push: [{\n          token: 'punctuation.definition.comment',\n          regex: '\\\\*\\\\)',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.one'\n        }]\n      }, {\n        token: 'punctuation.definition.comment',\n        regex: '\\\\{',\n        push: [{\n          token: 'punctuation.definition.comment',\n          regex: '\\\\}',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.two'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin',\n        regex: '\"',\n        push: [{\n          token: 'constant.character.escape',\n          regex: '\\\\\\\\.'\n        }, {\n          token: 'punctuation.definition.string.end',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.double'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin',\n        regex: '\\'',\n        push: [{\n          token: 'constant.character.escape.apostrophe',\n          regex: '\\'\\''\n        }, {\n          token: 'punctuation.definition.string.end',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.single'\n        }]\n      }, {\n        token: 'keyword.operator',\n        regex: '[+\\\\-;,/*%]|:=|='\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(PascalHighlightRules, TextHighlightRules);\n  exports.PascalHighlightRules = PascalHighlightRules;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var Range = require(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/pascal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/pascal_highlight_rules\", \"ace/mode/folding/coffee\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var PascalHighlightRules = require(\"./pascal_highlight_rules\").PascalHighlightRules;\n\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = PascalHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = [\"--\", \"//\"];\n    this.blockComment = [{\n      start: \"(*\",\n      end: \"*)\"\n    }, {\n      start: \"{\",\n      end: \"}\"\n    }];\n    this.$id = \"ace/mode/pascal\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/pascal\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}