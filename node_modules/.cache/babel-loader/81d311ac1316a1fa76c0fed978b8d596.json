{"ast":null,"code":"ace.define(\"ace/mode/erlang_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var ErlangHighlightRules = function ErlangHighlightRules() {\n    this.$rules = {\n      start: [{\n        include: '#module-directive'\n      }, {\n        include: '#import-export-directive'\n      }, {\n        include: '#behaviour-directive'\n      }, {\n        include: '#record-directive'\n      }, {\n        include: '#define-directive'\n      }, {\n        include: '#macro-directive'\n      }, {\n        include: '#directive'\n      }, {\n        include: '#function'\n      }, {\n        include: '#everything-else'\n      }],\n      '#atom': [{\n        token: 'punctuation.definition.symbol.begin.erlang',\n        regex: '\\'',\n        push: [{\n          token: 'punctuation.definition.symbol.end.erlang',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          token: ['punctuation.definition.escape.erlang', 'constant.other.symbol.escape.erlang', 'punctuation.definition.escape.erlang', 'constant.other.symbol.escape.erlang', 'constant.other.symbol.escape.erlang'],\n          regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'\n        }, {\n          token: 'invalid.illegal.atom.erlang',\n          regex: '\\\\\\\\\\\\^?.?'\n        }, {\n          defaultToken: 'constant.other.symbol.quoted.single.erlang'\n        }]\n      }, {\n        token: 'constant.other.symbol.unquoted.erlang',\n        regex: '[a-z][a-zA-Z\\\\d@_]*'\n      }],\n      '#behaviour-directive': [{\n        token: ['meta.directive.behaviour.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.behaviour.erlang', 'keyword.control.directive.behaviour.erlang', 'meta.directive.behaviour.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.behaviour.erlang', 'entity.name.type.class.behaviour.definition.erlang', 'meta.directive.behaviour.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.behaviour.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(behaviour)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }],\n      '#binary': [{\n        token: 'punctuation.definition.binary.begin.erlang',\n        regex: '<<',\n        push: [{\n          token: 'punctuation.definition.binary.end.erlang',\n          regex: '>>',\n          next: 'pop'\n        }, {\n          token: ['punctuation.separator.binary.erlang', 'punctuation.separator.value-size.erlang'],\n          regex: '(,)|(:)'\n        }, {\n          include: '#internal-type-specifiers'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.binary.erlang'\n        }]\n      }],\n      '#character': [{\n        token: ['punctuation.definition.character.erlang', 'punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'constant.character.escape.erlang'],\n        regex: '(\\\\$)(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'\n      }, {\n        token: 'invalid.illegal.character.erlang',\n        regex: '\\\\$\\\\\\\\\\\\^?.?'\n      }, {\n        token: ['punctuation.definition.character.erlang', 'constant.character.erlang'],\n        regex: '(\\\\$)(\\\\S)'\n      }, {\n        token: 'invalid.illegal.character.erlang',\n        regex: '\\\\$.?'\n      }],\n      '#comment': [{\n        token: 'punctuation.definition.comment.erlang',\n        regex: '%.*$',\n        push_: [{\n          token: 'comment.line.percentage.erlang',\n          regex: '$',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.line.percentage.erlang'\n        }]\n      }],\n      '#define-directive': [{\n        token: ['meta.directive.define.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.define.erlang', 'keyword.control.directive.define.erlang', 'meta.directive.define.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.define.erlang', 'entity.name.function.macro.definition.erlang', 'meta.directive.define.erlang', 'punctuation.separator.parameters.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(,)',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.define.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.directive.define.erlang'\n        }]\n      }, {\n        token: 'meta.directive.define.erlang',\n        regex: '(?=^\\\\s*-\\\\s*define\\\\s*\\\\(\\\\s*[a-zA-Z\\\\d@_]+\\\\s*\\\\()',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.define.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          token: ['text', 'punctuation.section.directive.begin.erlang', 'text', 'keyword.control.directive.define.erlang', 'text', 'punctuation.definition.parameters.begin.erlang', 'text', 'entity.name.function.macro.definition.erlang', 'text', 'punctuation.definition.parameters.begin.erlang'],\n          regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\()',\n          push: [{\n            token: ['punctuation.definition.parameters.end.erlang', 'text', 'punctuation.separator.parameters.erlang'],\n            regex: '(\\\\))(\\\\s*)(,)',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: 'punctuation.separator.define.erlang',\n          regex: '\\\\|\\\\||\\\\||:|;|,|\\\\.|->'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.directive.define.erlang'\n        }]\n      }],\n      '#directive': [{\n        token: ['meta.directive.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.erlang', 'keyword.control.directive.erlang', 'meta.directive.erlang', 'punctuation.definition.parameters.begin.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\(?)',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\)?)(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.directive.erlang'\n        }]\n      }, {\n        token: ['meta.directive.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.erlang', 'keyword.control.directive.erlang', 'meta.directive.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\.)'\n      }],\n      '#everything-else': [{\n        include: '#comment'\n      }, {\n        include: '#record-usage'\n      }, {\n        include: '#macro-usage'\n      }, {\n        include: '#expression'\n      }, {\n        include: '#keyword'\n      }, {\n        include: '#textual-operator'\n      }, {\n        include: '#function-call'\n      }, {\n        include: '#tuple'\n      }, {\n        include: '#list'\n      }, {\n        include: '#binary'\n      }, {\n        include: '#parenthesized-expression'\n      }, {\n        include: '#character'\n      }, {\n        include: '#number'\n      }, {\n        include: '#atom'\n      }, {\n        include: '#string'\n      }, {\n        include: '#symbolic-operator'\n      }, {\n        include: '#variable'\n      }],\n      '#expression': [{\n        token: 'keyword.control.if.erlang',\n        regex: '\\\\bif\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.if.erlang'\n        }]\n      }, {\n        token: 'keyword.control.case.erlang',\n        regex: '\\\\bcase\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.case.erlang'\n        }]\n      }, {\n        token: 'keyword.control.receive.erlang',\n        regex: '\\\\breceive\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.receive.erlang'\n        }]\n      }, {\n        token: ['keyword.control.fun.erlang', 'text', 'entity.name.type.class.module.erlang', 'text', 'punctuation.separator.module-function.erlang', 'text', 'entity.name.function.erlang', 'text', 'punctuation.separator.function-arity.erlang'],\n        regex: '\\\\b(fun)(\\\\s*)(?:([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(/)'\n      }, {\n        token: 'keyword.control.fun.erlang',\n        regex: '\\\\bfun\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          token: 'text',\n          regex: '(?=\\\\()',\n          push: [{\n            token: 'punctuation.separator.clauses.erlang',\n            regex: ';|(?=\\\\bend\\\\b)',\n            next: 'pop'\n          }, {\n            include: '#internal-function-parts'\n          }]\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.fun.erlang'\n        }]\n      }, {\n        token: 'keyword.control.try.erlang',\n        regex: '\\\\btry\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.try.erlang'\n        }]\n      }, {\n        token: 'keyword.control.begin.erlang',\n        regex: '\\\\bbegin\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.begin.erlang'\n        }]\n      }, {\n        token: 'keyword.control.query.erlang',\n        regex: '\\\\bquery\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.query.erlang'\n        }]\n      }],\n      '#function': [{\n        token: ['meta.function.erlang', 'entity.name.function.definition.erlang', 'meta.function.erlang'],\n        regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()',\n        push: [{\n          token: 'punctuation.terminator.function.erlang',\n          regex: '\\\\.',\n          next: 'pop'\n        }, {\n          token: ['text', 'entity.name.function.erlang', 'text'],\n          regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()'\n        }, {\n          token: 'text',\n          regex: '(?=\\\\()',\n          push: [{\n            token: 'punctuation.separator.clauses.erlang',\n            regex: ';|(?=\\\\.)',\n            next: 'pop'\n          }, {\n            include: '#parenthesized-expression'\n          }, {\n            include: '#internal-function-parts'\n          }]\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.function.erlang'\n        }]\n      }],\n      '#function-call': [{\n        token: 'meta.function-call.erlang',\n        regex: '(?=(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*(?:\\\\(|:\\\\s*(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*\\\\())',\n        push: [{\n          token: 'punctuation.definition.parameters.end.erlang',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          token: ['entity.name.type.class.module.erlang', 'text', 'punctuation.separator.module-function.erlang', 'text', 'entity.name.function.guard.erlang', 'text', 'punctuation.definition.parameters.begin.erlang'],\n          regex: '(?:(erlang)(\\\\s*)(:)(\\\\s*))?(is_atom|is_binary|is_constant|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_reference|is_tuple|is_record|abs|element|hd|length|node|round|self|size|tl|trunc)(\\\\s*)(\\\\()',\n          push: [{\n            token: 'text',\n            regex: '(?=\\\\))',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: ['entity.name.type.class.module.erlang', 'text', 'punctuation.separator.module-function.erlang', 'text', 'entity.name.function.erlang', 'text', 'punctuation.definition.parameters.begin.erlang'],\n          regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\()',\n          push: [{\n            token: 'text',\n            regex: '(?=\\\\))',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          defaultToken: 'meta.function-call.erlang'\n        }]\n      }],\n      '#import-export-directive': [{\n        token: ['meta.directive.import.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.import.erlang', 'keyword.control.directive.import.erlang', 'meta.directive.import.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.import.erlang', 'entity.name.type.class.module.erlang', 'meta.directive.import.erlang', 'punctuation.separator.parameters.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(import)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.import.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#internal-function-list'\n        }, {\n          defaultToken: 'meta.directive.import.erlang'\n        }]\n      }, {\n        token: ['meta.directive.export.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.export.erlang', 'keyword.control.directive.export.erlang', 'meta.directive.export.erlang', 'punctuation.definition.parameters.begin.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(export)(\\\\s*)(\\\\()',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.export.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#internal-function-list'\n        }, {\n          defaultToken: 'meta.directive.export.erlang'\n        }]\n      }],\n      '#internal-expression-punctuation': [{\n        token: ['punctuation.separator.clause-head-body.erlang', 'punctuation.separator.clauses.erlang', 'punctuation.separator.expressions.erlang'],\n        regex: '(->)|(;)|(,)'\n      }],\n      '#internal-function-list': [{\n        token: 'punctuation.definition.list.begin.erlang',\n        regex: '\\\\[',\n        push: [{\n          token: 'punctuation.definition.list.end.erlang',\n          regex: '\\\\]',\n          next: 'pop'\n        }, {\n          token: ['entity.name.function.erlang', 'text', 'punctuation.separator.function-arity.erlang'],\n          regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(/)',\n          push: [{\n            token: 'punctuation.separator.list.erlang',\n            regex: ',|(?=\\\\])',\n            next: 'pop'\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.list.function.erlang'\n        }]\n      }],\n      '#internal-function-parts': [{\n        token: 'text',\n        regex: '(?=\\\\()',\n        push: [{\n          token: 'punctuation.separator.clause-head-body.erlang',\n          regex: '->',\n          next: 'pop'\n        }, {\n          token: 'punctuation.definition.parameters.begin.erlang',\n          regex: '\\\\(',\n          push: [{\n            token: 'punctuation.definition.parameters.end.erlang',\n            regex: '\\\\)',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: 'punctuation.separator.guards.erlang',\n          regex: ',|;'\n        }, {\n          include: '#everything-else'\n        }]\n      }, {\n        token: 'punctuation.separator.expressions.erlang',\n        regex: ','\n      }, {\n        include: '#everything-else'\n      }],\n      '#internal-record-body': [{\n        token: 'punctuation.definition.class.record.begin.erlang',\n        regex: '\\\\{',\n        push: [{\n          token: 'meta.structure.record.erlang',\n          regex: '(?=\\\\})',\n          next: 'pop'\n        }, {\n          token: ['variable.other.field.erlang', 'variable.language.omitted.field.erlang', 'text', 'keyword.operator.assignment.erlang'],\n          regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')|(_))(\\\\s*)(=|::)',\n          push: [{\n            token: 'punctuation.separator.class.record.erlang',\n            regex: ',|(?=\\\\})',\n            next: 'pop'\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: ['variable.other.field.erlang', 'text', 'punctuation.separator.class.record.erlang'],\n          regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)((?:,)?)'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.record.erlang'\n        }]\n      }],\n      '#internal-type-specifiers': [{\n        token: 'punctuation.separator.value-type.erlang',\n        regex: '/',\n        push: [{\n          token: 'text',\n          regex: '(?=,|:|>>)',\n          next: 'pop'\n        }, {\n          token: ['storage.type.erlang', 'storage.modifier.signedness.erlang', 'storage.modifier.endianness.erlang', 'storage.modifier.unit.erlang', 'punctuation.separator.type-specifiers.erlang'],\n          regex: '(integer|float|binary|bytes|bitstring|bits)|(signed|unsigned)|(big|little|native)|(unit)|(-)'\n        }]\n      }],\n      '#keyword': [{\n        token: 'keyword.control.erlang',\n        regex: '\\\\b(?:after|begin|case|catch|cond|end|fun|if|let|of|query|try|receive|when)\\\\b'\n      }],\n      '#list': [{\n        token: 'punctuation.definition.list.begin.erlang',\n        regex: '\\\\[',\n        push: [{\n          token: 'punctuation.definition.list.end.erlang',\n          regex: '\\\\]',\n          next: 'pop'\n        }, {\n          token: 'punctuation.separator.list.erlang',\n          regex: '\\\\||\\\\|\\\\||,'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.list.erlang'\n        }]\n      }],\n      '#macro-directive': [{\n        token: ['meta.directive.ifdef.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.ifdef.erlang', 'keyword.control.directive.ifdef.erlang', 'meta.directive.ifdef.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.ifdef.erlang', 'entity.name.function.macro.erlang', 'meta.directive.ifdef.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.ifdef.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(ifdef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }, {\n        token: ['meta.directive.ifndef.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.ifndef.erlang', 'keyword.control.directive.ifndef.erlang', 'meta.directive.ifndef.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.ifndef.erlang', 'entity.name.function.macro.erlang', 'meta.directive.ifndef.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.ifndef.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(ifndef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }, {\n        token: ['meta.directive.undef.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.undef.erlang', 'keyword.control.directive.undef.erlang', 'meta.directive.undef.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.undef.erlang', 'entity.name.function.macro.erlang', 'meta.directive.undef.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.undef.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(undef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }],\n      '#macro-usage': [{\n        token: ['keyword.operator.macro.erlang', 'meta.macro-usage.erlang', 'entity.name.function.macro.erlang'],\n        regex: '(\\\\?\\\\??)(\\\\s*)([a-zA-Z\\\\d@_]+)'\n      }],\n      '#module-directive': [{\n        token: ['meta.directive.module.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.module.erlang', 'keyword.control.directive.module.erlang', 'meta.directive.module.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.module.erlang', 'entity.name.type.class.module.definition.erlang', 'meta.directive.module.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.module.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(module)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }],\n      '#number': [{\n        token: 'text',\n        regex: '(?=\\\\d)',\n        push: [{\n          token: 'text',\n          regex: '(?!\\\\d)',\n          next: 'pop'\n        }, {\n          token: ['constant.numeric.float.erlang', 'punctuation.separator.integer-float.erlang', 'constant.numeric.float.erlang', 'punctuation.separator.float-exponent.erlang'],\n          regex: '(\\\\d+)(\\\\.)(\\\\d+)((?:[eE][\\\\+\\\\-]?\\\\d+)?)'\n        }, {\n          token: ['constant.numeric.integer.binary.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.binary.erlang'],\n          regex: '(2)(#)([0-1]+)'\n        }, {\n          token: ['constant.numeric.integer.base-3.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-3.erlang'],\n          regex: '(3)(#)([0-2]+)'\n        }, {\n          token: ['constant.numeric.integer.base-4.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-4.erlang'],\n          regex: '(4)(#)([0-3]+)'\n        }, {\n          token: ['constant.numeric.integer.base-5.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-5.erlang'],\n          regex: '(5)(#)([0-4]+)'\n        }, {\n          token: ['constant.numeric.integer.base-6.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-6.erlang'],\n          regex: '(6)(#)([0-5]+)'\n        }, {\n          token: ['constant.numeric.integer.base-7.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-7.erlang'],\n          regex: '(7)(#)([0-6]+)'\n        }, {\n          token: ['constant.numeric.integer.octal.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.octal.erlang'],\n          regex: '(8)(#)([0-7]+)'\n        }, {\n          token: ['constant.numeric.integer.base-9.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-9.erlang'],\n          regex: '(9)(#)([0-8]+)'\n        }, {\n          token: ['constant.numeric.integer.decimal.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.decimal.erlang'],\n          regex: '(10)(#)(\\\\d+)'\n        }, {\n          token: ['constant.numeric.integer.base-11.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-11.erlang'],\n          regex: '(11)(#)([\\\\daA]+)'\n        }, {\n          token: ['constant.numeric.integer.base-12.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-12.erlang'],\n          regex: '(12)(#)([\\\\da-bA-B]+)'\n        }, {\n          token: ['constant.numeric.integer.base-13.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-13.erlang'],\n          regex: '(13)(#)([\\\\da-cA-C]+)'\n        }, {\n          token: ['constant.numeric.integer.base-14.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-14.erlang'],\n          regex: '(14)(#)([\\\\da-dA-D]+)'\n        }, {\n          token: ['constant.numeric.integer.base-15.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-15.erlang'],\n          regex: '(15)(#)([\\\\da-eA-E]+)'\n        }, {\n          token: ['constant.numeric.integer.hexadecimal.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.hexadecimal.erlang'],\n          regex: '(16)(#)([\\\\da-fA-F]+)'\n        }, {\n          token: ['constant.numeric.integer.base-17.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-17.erlang'],\n          regex: '(17)(#)([\\\\da-gA-G]+)'\n        }, {\n          token: ['constant.numeric.integer.base-18.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-18.erlang'],\n          regex: '(18)(#)([\\\\da-hA-H]+)'\n        }, {\n          token: ['constant.numeric.integer.base-19.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-19.erlang'],\n          regex: '(19)(#)([\\\\da-iA-I]+)'\n        }, {\n          token: ['constant.numeric.integer.base-20.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-20.erlang'],\n          regex: '(20)(#)([\\\\da-jA-J]+)'\n        }, {\n          token: ['constant.numeric.integer.base-21.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-21.erlang'],\n          regex: '(21)(#)([\\\\da-kA-K]+)'\n        }, {\n          token: ['constant.numeric.integer.base-22.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-22.erlang'],\n          regex: '(22)(#)([\\\\da-lA-L]+)'\n        }, {\n          token: ['constant.numeric.integer.base-23.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-23.erlang'],\n          regex: '(23)(#)([\\\\da-mA-M]+)'\n        }, {\n          token: ['constant.numeric.integer.base-24.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-24.erlang'],\n          regex: '(24)(#)([\\\\da-nA-N]+)'\n        }, {\n          token: ['constant.numeric.integer.base-25.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-25.erlang'],\n          regex: '(25)(#)([\\\\da-oA-O]+)'\n        }, {\n          token: ['constant.numeric.integer.base-26.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-26.erlang'],\n          regex: '(26)(#)([\\\\da-pA-P]+)'\n        }, {\n          token: ['constant.numeric.integer.base-27.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-27.erlang'],\n          regex: '(27)(#)([\\\\da-qA-Q]+)'\n        }, {\n          token: ['constant.numeric.integer.base-28.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-28.erlang'],\n          regex: '(28)(#)([\\\\da-rA-R]+)'\n        }, {\n          token: ['constant.numeric.integer.base-29.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-29.erlang'],\n          regex: '(29)(#)([\\\\da-sA-S]+)'\n        }, {\n          token: ['constant.numeric.integer.base-30.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-30.erlang'],\n          regex: '(30)(#)([\\\\da-tA-T]+)'\n        }, {\n          token: ['constant.numeric.integer.base-31.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-31.erlang'],\n          regex: '(31)(#)([\\\\da-uA-U]+)'\n        }, {\n          token: ['constant.numeric.integer.base-32.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-32.erlang'],\n          regex: '(32)(#)([\\\\da-vA-V]+)'\n        }, {\n          token: ['constant.numeric.integer.base-33.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-33.erlang'],\n          regex: '(33)(#)([\\\\da-wA-W]+)'\n        }, {\n          token: ['constant.numeric.integer.base-34.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-34.erlang'],\n          regex: '(34)(#)([\\\\da-xA-X]+)'\n        }, {\n          token: ['constant.numeric.integer.base-35.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-35.erlang'],\n          regex: '(35)(#)([\\\\da-yA-Y]+)'\n        }, {\n          token: ['constant.numeric.integer.base-36.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-36.erlang'],\n          regex: '(36)(#)([\\\\da-zA-Z]+)'\n        }, {\n          token: 'invalid.illegal.integer.erlang',\n          regex: '\\\\d+#[\\\\da-zA-Z]+'\n        }, {\n          token: 'constant.numeric.integer.decimal.erlang',\n          regex: '\\\\d+'\n        }]\n      }],\n      '#parenthesized-expression': [{\n        token: 'punctuation.section.expression.begin.erlang',\n        regex: '\\\\(',\n        push: [{\n          token: 'punctuation.section.expression.end.erlang',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.parenthesized'\n        }]\n      }],\n      '#record-directive': [{\n        token: ['meta.directive.record.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.record.erlang', 'keyword.control.directive.import.erlang', 'meta.directive.record.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.record.erlang', 'entity.name.type.class.record.definition.erlang', 'meta.directive.record.erlang', 'punctuation.separator.parameters.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(record)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n        push: [{\n          token: ['punctuation.definition.class.record.end.erlang', 'meta.directive.record.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.record.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\})(\\\\s*)(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#internal-record-body'\n        }, {\n          defaultToken: 'meta.directive.record.erlang'\n        }]\n      }],\n      '#record-usage': [{\n        token: ['keyword.operator.record.erlang', 'meta.record-usage.erlang', 'entity.name.type.class.record.erlang', 'meta.record-usage.erlang', 'punctuation.separator.record-field.erlang', 'meta.record-usage.erlang', 'variable.other.field.erlang'],\n        regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\.)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')'\n      }, {\n        token: ['keyword.operator.record.erlang', 'meta.record-usage.erlang', 'entity.name.type.class.record.erlang'],\n        regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')',\n        push: [{\n          token: 'punctuation.definition.class.record.end.erlang',\n          regex: '\\\\}',\n          next: 'pop'\n        }, {\n          include: '#internal-record-body'\n        }, {\n          defaultToken: 'meta.record-usage.erlang'\n        }]\n      }],\n      '#string': [{\n        token: 'punctuation.definition.string.begin.erlang',\n        regex: '\"',\n        push: [{\n          token: 'punctuation.definition.string.end.erlang',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: ['punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'constant.character.escape.erlang'],\n          regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'\n        }, {\n          token: 'invalid.illegal.string.erlang',\n          regex: '\\\\\\\\\\\\^?.?'\n        }, {\n          token: ['punctuation.definition.placeholder.erlang', 'punctuation.separator.placeholder-parts.erlang', 'constant.other.placeholder.erlang', 'punctuation.separator.placeholder-parts.erlang', 'punctuation.separator.placeholder-parts.erlang', 'constant.other.placeholder.erlang', 'punctuation.separator.placeholder-parts.erlang', 'punctuation.separator.placeholder-parts.erlang', 'punctuation.separator.placeholder-parts.erlang', 'constant.other.placeholder.erlang', 'constant.other.placeholder.erlang'],\n          regex: '(~)(?:((?:\\\\-)?)(\\\\d+)|(\\\\*))?(?:(\\\\.)(?:(\\\\d+)|(\\\\*)))?(?:(\\\\.)(?:(\\\\*)|(.)))?([~cfegswpWPBX#bx\\\\+ni])'\n        }, {\n          token: ['punctuation.definition.placeholder.erlang', 'punctuation.separator.placeholder-parts.erlang', 'constant.other.placeholder.erlang', 'constant.other.placeholder.erlang'],\n          regex: '(~)((?:\\\\*)?)((?:\\\\d+)?)([~du\\\\-#fsacl])'\n        }, {\n          token: 'invalid.illegal.string.erlang',\n          regex: '~.?'\n        }, {\n          defaultToken: 'string.quoted.double.erlang'\n        }]\n      }],\n      '#symbolic-operator': [{\n        token: 'keyword.operator.symbolic.erlang',\n        regex: '\\\\+\\\\+|\\\\+|--|-|\\\\*|/=|/|=/=|=:=|==|=<|=|<-|<|>=|>|!|::'\n      }],\n      '#textual-operator': [{\n        token: 'keyword.operator.textual.erlang',\n        regex: '\\\\b(?:andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\\\\b'\n      }],\n      '#tuple': [{\n        token: 'punctuation.definition.tuple.begin.erlang',\n        regex: '\\\\{',\n        push: [{\n          token: 'punctuation.definition.tuple.end.erlang',\n          regex: '\\\\}',\n          next: 'pop'\n        }, {\n          token: 'punctuation.separator.tuple.erlang',\n          regex: ','\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.tuple.erlang'\n        }]\n      }],\n      '#variable': [{\n        token: ['variable.other.erlang', 'variable.language.omitted.erlang'],\n        regex: '(_[a-zA-Z\\\\d@_]+|[A-Z][a-zA-Z\\\\d@_]*)|(_)'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  ErlangHighlightRules.metaData = {\n    comment: 'The recognition of function definitions and compiler directives (such as module, record and macro definitions) requires that each of the aforementioned constructs must be the first string inside a line (except for whitespace).  Also, the function/module/record/macro names must be given unquoted.  -- desp',\n    fileTypes: ['erl', 'hrl'],\n    keyEquivalent: '^~E',\n    name: 'Erlang',\n    scopeName: 'source.erlang'\n  };\n  oop.inherits(ErlangHighlightRules, TextHighlightRules);\n  exports.ErlangHighlightRules = ErlangHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/erlang\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/erlang_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var ErlangHighlightRules = require(\"./erlang_highlight_rules\").ErlangHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = ErlangHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/erlang\";\n    this.snippetFileId = \"ace/snippets/erlang\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/erlang\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}