{"ast":null,"code":"ace.define(\"ace/mode/vbscript_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var VBScriptHighlightRules = function VBScriptHighlightRules() {\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword.control.asp\": \"If|Then|Else|ElseIf|End|While|Wend|For|To|Each|Case|Select|Return\" + \"|Continue|Do|Until|Loop|Next|With|Exit|Function|Property|Type|Enum|Sub|IIf|Class\",\n      \"storage.type.asp\": \"Dim|Call|Const|Redim|Set|Let|Get|New|Randomize|Option|Explicit\",\n      \"storage.modifier.asp\": \"Private|Public|Default\",\n      \"keyword.operator.asp\": \"Mod|And|Not|Or|Xor|as\",\n      \"constant.language.asp\": \"Empty|False|Nothing|Null|True\",\n      \"support.class.asp\": \"Application|ObjectContext|Request|Response|Server|Session\",\n      \"support.class.collection.asp\": \"Contents|StaticObjects|ClientCertificate|Cookies|Form|QueryString|ServerVariables\",\n      \"support.constant.asp\": \"TotalBytes|Buffer|CacheControl|Charset|ContentType|Expires|ExpiresAbsolute\" + \"|IsClientConnected|PICS|Status|ScriptTimeout|CodePage|LCID|SessionID|Timeout\",\n      \"support.function.asp\": \"Lock|Unlock|SetAbort|SetComplete|BinaryRead|AddHeader|AppendToLog\" + \"|BinaryWrite|Clear|Flush|Redirect|Write|CreateObject|HTMLEncode|MapPath|URLEncode|Abandon|Convert|Regex\",\n      \"support.function.event.asp\": \"Application_OnEnd|Application_OnStart\" + \"|OnTransactionAbort|OnTransactionCommit|Session_OnEnd|Session_OnStart\",\n      \"support.function.vb.asp\": \"Array|Add|Asc|Atn|CBool|CByte|CCur|CDate|CDbl|Chr|CInt|CLng\" + \"|Conversions|Cos|CreateObject|CSng|CStr|Date|DateAdd|DateDiff|DatePart|DateSerial\" + \"|DateValue|Day|Derived|Math|Escape|Eval|Exists|Exp|Filter|FormatCurrency\" + \"|FormatDateTime|FormatNumber|FormatPercent|GetLocale|GetObject|GetRef|Hex\" + \"|Hour|InputBox|InStr|InStrRev|Int|Fix|IsArray|IsDate|IsEmpty|IsNull|IsNumeric\" + \"|IsObject|Item|Items|Join|Keys|LBound|LCase|Left|Len|LoadPicture|Log|LTrim|RTrim\" + \"|Trim|Maths|Mid|Minute|Month|MonthName|MsgBox|Now|Oct|Remove|RemoveAll|Replace\" + \"|RGB|Right|Rnd|Round|ScriptEngine|ScriptEngineBuildVersion|ScriptEngineMajorVersion\" + \"|ScriptEngineMinorVersion|Second|SetLocale|Sgn|Sin|Space|Split|Sqr|StrComp|String|StrReverse\" + \"|Tan|Time|Timer|TimeSerial|TimeValue|TypeName|UBound|UCase|Unescape|VarType|Weekday|WeekdayName|Year\",\n      \"support.type.vb.asp\": \"vbtrue|vbfalse|vbcr|vbcrlf|vbformfeed|vblf|vbnewline|vbnullchar|vbnullstring|\" + \"int32|vbtab|vbverticaltab|vbbinarycompare|vbtextcomparevbsunday|vbmonday|vbtuesday|vbwednesday\" + \"|vbthursday|vbfriday|vbsaturday|vbusesystemdayofweek|vbfirstjan1|vbfirstfourdays|vbfirstfullweek\" + \"|vbgeneraldate|vblongdate|vbshortdate|vblongtime|vbshorttime|vbobjecterror|vbEmpty|vbNull|vbInteger\" + \"|vbLong|vbSingle|vbDouble|vbCurrency|vbDate|vbString|vbObject|vbError|vbBoolean|vbVariant\" + \"|vbDataObject|vbDecimal|vbByte|vbArray\"\n    }, \"identifier\", true);\n    this.$rules = {\n      \"start\": [{\n        token: [\"meta.ending-space\"],\n        regex: \"$\"\n      }, {\n        token: [null],\n        regex: \"^(?=\\\\t)\",\n        next: \"state_3\"\n      }, {\n        token: [null],\n        regex: \"^(?= )\",\n        next: \"state_4\"\n      }, {\n        token: [\"text\", \"storage.type.function.asp\", \"text\", \"entity.name.function.asp\", \"text\", \"punctuation.definition.parameters.asp\", \"variable.parameter.function.asp\", \"punctuation.definition.parameters.asp\"],\n        regex: \"^(\\\\s*)(Function|Sub)(\\\\s+)([a-zA-Z_]\\\\w*)(\\\\s*)(\\\\()([^)]*)(\\\\))\"\n      }, {\n        token: \"punctuation.definition.comment.asp\",\n        regex: \"'|REM(?=\\\\s|$)\",\n        next: \"comment\",\n        caseInsensitive: true\n      }, {\n        token: \"storage.type.asp\",\n        regex: \"On Error Resume Next|On Error GoTo\",\n        caseInsensitive: true\n      }, {\n        token: \"punctuation.definition.string.begin.asp\",\n        regex: '\"',\n        next: \"string\"\n      }, {\n        token: [\"punctuation.definition.variable.asp\"],\n        regex: \"(\\\\$)[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\\\b\\\\s*\"\n      }, {\n        token: \"constant.numeric.asp\",\n        regex: \"-?\\\\b(?:(?:0(?:x|X)[0-9a-fA-F]*)|(?:(?:[0-9]+\\\\.?[0-9]*)|(?:\\\\.[0-9]+))(?:(?:e|E)(?:\\\\+|-)?[0-9]+)?)(?:L|l|UL|ul|u|U|F|f)?\\\\b\"\n      }, {\n        regex: \"\\\\w+\",\n        token: keywordMapper\n      }, {\n        token: [\"entity.name.function.asp\"],\n        regex: \"(?:(\\\\b[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\\\b)(?=\\\\(\\\\)?))\"\n      }, {\n        token: [\"keyword.operator.asp\"],\n        regex: \"\\\\-|\\\\+|\\\\*\\\\/|\\\\>|\\\\<|\\\\=|\\\\&\"\n      }],\n      \"state_3\": [{\n        token: [\"meta.odd-tab.tabs\", \"meta.even-tab.tabs\"],\n        regex: \"(\\\\t)(\\\\t)?\"\n      }, {\n        token: \"meta.leading-space\",\n        regex: \"(?=[^\\\\t])\",\n        next: \"start\"\n      }, {\n        token: \"meta.leading-space\",\n        regex: \".\",\n        next: \"state_3\"\n      }],\n      \"state_4\": [{\n        token: [\"meta.odd-tab.spaces\", \"meta.even-tab.spaces\"],\n        regex: \"(  )(  )?\"\n      }, {\n        token: \"meta.leading-space\",\n        regex: \"(?=[^ ])\",\n        next: \"start\"\n      }, {\n        defaultToken: \"meta.leading-space\"\n      }],\n      \"comment\": [{\n        token: \"comment.line.apostrophe.asp\",\n        regex: \"$|(?=(?:%>))\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment.line.apostrophe.asp\"\n      }],\n      \"string\": [{\n        token: \"constant.character.escape.apostrophe.asp\",\n        regex: '\"\"'\n      }, {\n        token: \"string.quoted.double.asp\",\n        regex: '\"',\n        next: \"start\"\n      }, {\n        defaultToken: \"string.quoted.double.asp\"\n      }]\n    };\n  };\n\n  oop.inherits(VBScriptHighlightRules, TextHighlightRules);\n  exports.VBScriptHighlightRules = VBScriptHighlightRules;\n});\nace.define(\"ace/mode/folding/vbscript\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\", \"ace/token_iterator\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var Range = require(\"../../range\").Range;\n\n  var TokenIterator = require(\"../../token_iterator\").TokenIterator;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.indentKeywords = {\n      \"class\": 1,\n      \"function\": 1,\n      \"sub\": 1,\n      \"if\": 1,\n      \"select\": 1,\n      \"do\": 1,\n      \"for\": 1,\n      \"while\": 1,\n      \"with\": 1,\n      \"property\": 1,\n      \"else\": 1,\n      \"elseif\": 1,\n      \"end\": -1,\n      \"loop\": -1,\n      \"next\": -1,\n      \"wend\": -1\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var match = /(\\w+)\\b/i.exec(line);\n      var keyword = match && match[1].toLowerCase();\n\n      if (keyword && this.indentKeywords.hasOwnProperty(keyword)) {\n        return this.vbsBlock(session, row, match.index + 1);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var match = /^\\s*(\\w+)\\b/i.exec(line);\n      var keyword = match && match[1].toLowerCase();\n\n      if (keyword && this.indentKeywords.hasOwnProperty(keyword)) {\n        if (this.indentKeywords[keyword] == -1) return \"\";\n        if (keyword == \"if\" && !/then\\s*$/i.test(line)) return \"\";\n        return \"start\";\n      }\n\n      return \"\";\n    };\n\n    this.vbsBlock = function (session, row, column, tokenRange) {\n      var stream = new TokenIterator(session, row, column);\n      var endOpenings = {\n        \"class\": 1,\n        \"function\": 1,\n        \"sub\": 1,\n        \"if\": 1,\n        \"select\": 1,\n        \"with\": 1,\n        \"property\": 1,\n        \"else\": 1,\n        \"elseif\": 1\n      };\n      var token = stream.getCurrentToken();\n      if (!token || token.type != \"keyword.control.asp\" && token.type != \"storage.type.function.asp\") return;\n      var startTokenValue = token.value.toLowerCase();\n      var val = token.value.toLowerCase();\n      var stack = [val];\n      var dir = this.indentKeywords[val];\n      if (!dir) return;\n      var firstRange = stream.getCurrentTokenRange();\n      var modifiers = '';\n\n      switch (val) {\n        case \"property\":\n        case \"sub\":\n        case \"function\":\n          modifiers = \"(?:(?:Private|Public(?:\\\\s+Default)?)\\\\s+)?\";\n\n        case \"if\":\n        case \"select\":\n        case \"do\":\n        case \"for\":\n        case \"class\":\n        case \"while\":\n        case \"with\":\n          var line = session.getLine(row);\n          var singleLineCondition = /^\\s*(If)\\s+(.)*\\s+Then\\s+(\\S)+/i.test(line);\n          if (singleLineCondition) return;\n          var checkToken = new RegExp(\"^\\\\s*\" + modifiers + val, \"i\");\n          var endTest = /^\\s*End\\s(If|Sub|Select|Function|Class|With|Property)\\s*/i.test(line);\n\n          if (!checkToken.test(line) && !endTest) {\n            return;\n          }\n\n          if (endTest) {\n            var tokenRange = stream.getCurrentTokenRange();\n            stream.step = stream.stepBackward;\n            stream.step();\n            stream.step();\n            token = stream.getCurrentToken();\n\n            if (token) {\n              val = token.value.toLowerCase();\n\n              if (val == \"end\") {\n                firstRange = stream.getCurrentTokenRange();\n                firstRange = new Range(firstRange.start.row, firstRange.start.column, tokenRange.start.row, tokenRange.end.column);\n              }\n            }\n\n            dir = -1;\n          }\n\n          break;\n\n        case \"end\":\n          var tokenPos = stream.getCurrentTokenPosition();\n          firstRange = stream.getCurrentTokenRange();\n          stream.step = stream.stepForward;\n          stream.step();\n          stream.step();\n          token = stream.getCurrentToken();\n\n          if (token) {\n            val = token.value.toLowerCase();\n\n            if (val in endOpenings) {\n              startTokenValue = val;\n              var nextTokenPos = stream.getCurrentTokenPosition();\n              var endColumn = nextTokenPos.column + val.length;\n              firstRange = new Range(tokenPos.row, tokenPos.column, nextTokenPos.row, endColumn);\n            }\n          }\n\n          stream.step = stream.stepBackward;\n          stream.step();\n          stream.step();\n          break;\n      }\n\n      var startColumn = dir === -1 ? session.getLine(row - 1).length : session.getLine(row).length;\n      var startRow = row;\n      var ranges = [];\n      ranges.push(firstRange);\n      stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;\n\n      while (token = stream.step()) {\n        modifiers = '';\n        var outputRange = null;\n        var ignore = false;\n        if (token.type != \"keyword.control.asp\" && token.type != \"storage.type.function.asp\") continue;\n        val = token.value.toLowerCase();\n        var level = dir * this.indentKeywords[val];\n\n        switch (val) {\n          case \"property\":\n          case \"sub\":\n          case \"function\":\n            modifiers = \"(?:(?:Private|Public(?:\\\\sDefault)?)\\\\s+)?\";\n\n          case \"if\":\n          case \"select\":\n          case \"do\":\n          case \"for\":\n          case \"class\":\n          case \"while\":\n          case \"with\":\n            var line = session.getLine(stream.getCurrentTokenRow());\n            var singleLineCondition = /^\\s*(If)\\s+(.)*\\s+Then\\s+(\\S)+/i.test(line);\n\n            if (singleLineCondition) {\n              level = 0;\n              ignore = true;\n            }\n\n            var checkToken = new RegExp(\"^\\\\s*\" + modifiers + val, \"i\");\n\n            if (!checkToken.test(line)) {\n              level = 0;\n              ignore = true;\n            }\n\n            break;\n\n          case \"elseif\":\n          case \"else\":\n            level = 0;\n\n            if (startTokenValue != \"elseif\") {\n              ignore = true;\n            }\n\n            break;\n        }\n\n        if (level > 0) {\n          stack.unshift(val);\n        } else if (level <= 0 && ignore === false) {\n          stack.shift();\n\n          if (!stack.length) {\n            switch (val) {\n              case \"end\":\n                var tokenPos = stream.getCurrentTokenPosition();\n                outputRange = stream.getCurrentTokenRange();\n                stream.step();\n                stream.step();\n                token = stream.getCurrentToken();\n\n                if (token) {\n                  val = token.value.toLowerCase();\n\n                  if (val in endOpenings) {\n                    if (startTokenValue == \"else\" || startTokenValue == \"elseif\") {\n                      if (val !== \"if\") {\n                        ranges.shift();\n                      }\n                    } else {\n                      if (val != startTokenValue) ranges.shift();\n                    }\n\n                    var nextTokenPos = stream.getCurrentTokenPosition();\n                    var endColumn = nextTokenPos.column + val.length;\n                    outputRange = new Range(tokenPos.row, tokenPos.column, nextTokenPos.row, endColumn);\n                  } else {\n                    ranges.shift();\n                  }\n                } else {\n                  ranges.shift();\n                }\n\n                stream.step = stream.stepBackward;\n                stream.step();\n                stream.step();\n                token = stream.getCurrentToken();\n                val = token.value.toLowerCase();\n                break;\n\n              case \"select\":\n              case \"sub\":\n              case \"if\":\n              case \"function\":\n              case \"class\":\n              case \"with\":\n              case \"property\":\n                if (val != startTokenValue) ranges.shift();\n                break;\n\n              case \"do\":\n                if (startTokenValue != \"loop\") ranges.shift();\n                break;\n\n              case \"loop\":\n                if (startTokenValue != \"do\") ranges.shift();\n                break;\n\n              case \"for\":\n                if (startTokenValue != \"next\") ranges.shift();\n                break;\n\n              case \"next\":\n                if (startTokenValue != \"for\") ranges.shift();\n                break;\n\n              case \"while\":\n                if (startTokenValue != \"wend\") ranges.shift();\n                break;\n\n              case \"wend\":\n                if (startTokenValue != \"while\") ranges.shift();\n                break;\n            }\n\n            break;\n          }\n\n          if (level === 0) {\n            stack.unshift(val);\n          }\n        }\n      }\n\n      if (!token) return null;\n\n      if (tokenRange) {\n        if (!outputRange) {\n          ranges.push(stream.getCurrentTokenRange());\n        } else {\n          ranges.push(outputRange);\n        }\n\n        return ranges;\n      }\n\n      var row = stream.getCurrentTokenRow();\n\n      if (dir === -1) {\n        var endColumn = session.getLine(row).length;\n        return new Range(row, endColumn, startRow - 1, startColumn);\n      } else return new Range(startRow, startColumn, row - 1, session.getLine(row - 1).length);\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/vbscript\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/vbscript_highlight_rules\", \"ace/mode/folding/vbscript\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var VBScriptHighlightRules = require(\"./vbscript_highlight_rules\").VBScriptHighlightRules;\n\n  var FoldMode = require(\"./folding/vbscript\").FoldMode;\n\n  var Range = require(\"../range\").Range;\n\n  var Mode = function Mode() {\n    this.HighlightRules = VBScriptHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n    this.indentKeywords = this.foldingRules.indentKeywords;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = [\"'\", \"REM\"];\n    var outdentKeywords = [\"else\", \"elseif\", \"end\", \"loop\", \"next\", \"wend\"];\n\n    function getNetIndentLevel(tokens, line, indentKeywords) {\n      var level = 0;\n      var modifiers = '';\n\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n\n        if (token.type == \"keyword.control.asp\" || token.type == \"storage.type.function.asp\") {\n          var val = token.value.toLowerCase();\n\n          if (val in indentKeywords) {\n            switch (val) {\n              case \"property\":\n              case \"sub\":\n              case \"function\":\n                modifiers = \"(?:(?:Private|Public(?:\\\\s+Default)?)\\\\s+)?\";\n\n              case \"select\":\n              case \"do\":\n              case \"for\":\n              case \"class\":\n              case \"while\":\n              case \"with\":\n                var checkToken = new RegExp(\"^\\\\s*\" + modifiers + val, \"i\");\n\n                if (checkToken.test(line)) {\n                  level += indentKeywords[val];\n                }\n\n                break;\n\n              case \"if\":\n                var singleLineCondition = /^\\s*(If)\\s+(.)*\\s+Then\\s+(\\S)+/i.test(line);\n                if (!singleLineCondition) level += indentKeywords[val];\n                break;\n\n              default:\n                level += indentKeywords[val];\n                break;\n            }\n          }\n        }\n      }\n\n      if (level < 0) {\n        return -1;\n      } else if (level > 0) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var level = 0;\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (state == \"start\") {\n        level = getNetIndentLevel(tokens, line, this.indentKeywords);\n      }\n\n      if (level > 0) {\n        return indent + tab;\n      } else if (level < 0 && indent.substr(indent.length - tab.length) == tab) {\n        if (!this.checkOutdent(state, line, \"\\n\")) {\n          return indent.substr(0, indent.length - tab.length);\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      if (input != \"\\n\" && input != \"\\r\" && input != \"\\r\\n\") return false;\n      var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n      if (!tokens || !tokens.length) return false;\n      var val = tokens[0].value.toLowerCase();\n      return (tokens[0].type == \"keyword.control.asp\" || tokens[0].type == \"storage.type.function.asp\") && outdentKeywords.indexOf(val) != -1;\n    };\n\n    this.getMatching = function (session, row, column, tokenRange) {\n      if (row == undefined) {\n        var pos = session.selection.lead;\n        column = pos.column;\n        row = pos.row;\n      }\n\n      if (tokenRange == undefined) tokenRange = true;\n      var startToken = session.getTokenAt(row, column);\n\n      if (startToken) {\n        var val = startToken.value.toLowerCase();\n        if (val in this.indentKeywords) return this.foldingRules.vbsBlock(session, row, column, tokenRange);\n      }\n    };\n\n    this.autoOutdent = function (state, session, row) {\n      var line = session.getLine(row);\n      var column = line.match(/^\\s*/)[0].length;\n      if (!column || !row) return;\n      var startRange = this.getMatching(session, row, column + 1, false);\n      if (!startRange || startRange.start.row == row) return;\n      var indent = this.$getIndent(session.getLine(startRange.start.row));\n\n      if (indent.length != column) {\n        session.replace(new Range(row, 0, row, column), indent);\n        session.outdentRows(new Range(row + 1, 0, row + 1, 0));\n      }\n    };\n\n    this.$id = \"ace/mode/vbscript\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/vbscript\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}