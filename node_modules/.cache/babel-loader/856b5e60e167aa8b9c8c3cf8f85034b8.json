{"ast":null,"code":"ace.define(\"ace/mode/mushcode_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var MushCodeRules = function MushCodeRules() {\n    var keywords = \"@if|\" + \"@ifelse|\" + \"@switch|\" + \"@halt|\" + \"@dolist|\" + \"@create|\" + \"@scent|\" + \"@sound|\" + \"@touch|\" + \"@ataste|\" + \"@osound|\" + \"@ahear|\" + \"@aahear|\" + \"@amhear|\" + \"@otouch|\" + \"@otaste|\" + \"@drop|\" + \"@odrop|\" + \"@adrop|\" + \"@dropfail|\" + \"@odropfail|\" + \"@smell|\" + \"@oemit|\" + \"@emit|\" + \"@pemit|\" + \"@parent|\" + \"@clone|\" + \"@taste|\" + \"whisper|\" + \"page|\" + \"say|\" + \"pose|\" + \"semipose|\" + \"teach|\" + \"touch|\" + \"taste|\" + \"smell|\" + \"listen|\" + \"look|\" + \"move|\" + \"go|\" + \"home|\" + \"follow|\" + \"unfollow|\" + \"desert|\" + \"dismiss|\" + \"@tel\";\n    var builtinConstants = \"=#0\";\n    var builtinFunctions = \"default|\" + \"edefault|\" + \"eval|\" + \"get_eval|\" + \"get|\" + \"grep|\" + \"grepi|\" + \"hasattr|\" + \"hasattrp|\" + \"hasattrval|\" + \"hasattrpval|\" + \"lattr|\" + \"nattr|\" + \"poss|\" + \"udefault|\" + \"ufun|\" + \"u|\" + \"v|\" + \"uldefault|\" + \"xget|\" + \"zfun|\" + \"band|\" + \"bnand|\" + \"bnot|\" + \"bor|\" + \"bxor|\" + \"shl|\" + \"shr|\" + \"and|\" + \"cand|\" + \"cor|\" + \"eq|\" + \"gt|\" + \"gte|\" + \"lt|\" + \"lte|\" + \"nand|\" + \"neq|\" + \"nor|\" + \"not|\" + \"or|\" + \"t|\" + \"xor|\" + \"con|\" + \"entrances|\" + \"exit|\" + \"followers|\" + \"home|\" + \"lcon|\" + \"lexits|\" + \"loc|\" + \"locate|\" + \"lparent|\" + \"lsearch|\" + \"next|\" + \"num|\" + \"owner|\" + \"parent|\" + \"pmatch|\" + \"rloc|\" + \"rnum|\" + \"room|\" + \"where|\" + \"zone|\" + \"worn|\" + \"held|\" + \"carried|\" + \"acos|\" + \"asin|\" + \"atan|\" + \"ceil|\" + \"cos|\" + \"e|\" + \"exp|\" + \"fdiv|\" + \"fmod|\" + \"floor|\" + \"log|\" + \"ln|\" + \"pi|\" + \"power|\" + \"round|\" + \"sin|\" + \"sqrt|\" + \"tan|\" + \"aposs|\" + \"andflags|\" + \"conn|\" + \"commandssent|\" + \"controls|\" + \"doing|\" + \"elock|\" + \"findable|\" + \"flags|\" + \"fullname|\" + \"hasflag|\" + \"haspower|\" + \"hastype|\" + \"hidden|\" + \"idle|\" + \"isbaker|\" + \"lock|\" + \"lstats|\" + \"money|\" + \"who|\" + \"name|\" + \"nearby|\" + \"obj|\" + \"objflags|\" + \"photo|\" + \"poll|\" + \"powers|\" + \"pendingtext|\" + \"receivedtext|\" + \"restarts|\" + \"restarttime|\" + \"subj|\" + \"shortestpath|\" + \"tmoney|\" + \"type|\" + \"visible|\" + \"cat|\" + \"element|\" + \"elements|\" + \"extract|\" + \"filter|\" + \"filterbool|\" + \"first|\" + \"foreach|\" + \"fold|\" + \"grab|\" + \"graball|\" + \"index|\" + \"insert|\" + \"itemize|\" + \"items|\" + \"iter|\" + \"last|\" + \"ldelete|\" + \"map|\" + \"match|\" + \"matchall|\" + \"member|\" + \"mix|\" + \"munge|\" + \"pick|\" + \"remove|\" + \"replace|\" + \"rest|\" + \"revwords|\" + \"setdiff|\" + \"setinter|\" + \"setunion|\" + \"shuffle|\" + \"sort|\" + \"sortby|\" + \"splice|\" + \"step|\" + \"wordpos|\" + \"words|\" + \"add|\" + \"lmath|\" + \"max|\" + \"mean|\" + \"median|\" + \"min|\" + \"mul|\" + \"percent|\" + \"sign|\" + \"stddev|\" + \"sub|\" + \"val|\" + \"bound|\" + \"abs|\" + \"inc|\" + \"dec|\" + \"dist2d|\" + \"dist3d|\" + \"div|\" + \"floordiv|\" + \"mod|\" + \"modulo|\" + \"remainder|\" + \"vadd|\" + \"vdim|\" + \"vdot|\" + \"vmag|\" + \"vmax|\" + \"vmin|\" + \"vmul|\" + \"vsub|\" + \"vunit|\" + \"regedit|\" + \"regeditall|\" + \"regeditalli|\" + \"regediti|\" + \"regmatch|\" + \"regmatchi|\" + \"regrab|\" + \"regraball|\" + \"regraballi|\" + \"regrabi|\" + \"regrep|\" + \"regrepi|\" + \"after|\" + \"alphamin|\" + \"alphamax|\" + \"art|\" + \"before|\" + \"brackets|\" + \"capstr|\" + \"case|\" + \"caseall|\" + \"center|\" + \"containsfansi|\" + \"comp|\" + \"decompose|\" + \"decrypt|\" + \"delete|\" + \"edit|\" + \"encrypt|\" + \"escape|\" + \"if|\" + \"ifelse|\" + \"lcstr|\" + \"left|\" + \"lit|\" + \"ljust|\" + \"merge|\" + \"mid|\" + \"ostrlen|\" + \"pos|\" + \"repeat|\" + \"reverse|\" + \"right|\" + \"rjust|\" + \"scramble|\" + \"secure|\" + \"space|\" + \"spellnum|\" + \"squish|\" + \"strcat|\" + \"strmatch|\" + \"strinsert|\" + \"stripansi|\" + \"stripfansi|\" + \"strlen|\" + \"switch|\" + \"switchall|\" + \"table|\" + \"tr|\" + \"trim|\" + \"ucstr|\" + \"unsafe|\" + \"wrap|\" + \"ctitle|\" + \"cwho|\" + \"channels|\" + \"clock|\" + \"cflags|\" + \"ilev|\" + \"itext|\" + \"inum|\" + \"convsecs|\" + \"convutcsecs|\" + \"convtime|\" + \"ctime|\" + \"etimefmt|\" + \"isdaylight|\" + \"mtime|\" + \"secs|\" + \"msecs|\" + \"starttime|\" + \"time|\" + \"timefmt|\" + \"timestring|\" + \"utctime|\" + \"atrlock|\" + \"clone|\" + \"create|\" + \"cook|\" + \"dig|\" + \"emit|\" + \"lemit|\" + \"link|\" + \"oemit|\" + \"open|\" + \"pemit|\" + \"remit|\" + \"set|\" + \"tel|\" + \"wipe|\" + \"zemit|\" + \"fbcreate|\" + \"fbdestroy|\" + \"fbwrite|\" + \"fbclear|\" + \"fbcopy|\" + \"fbcopyto|\" + \"fbclip|\" + \"fbdump|\" + \"fbflush|\" + \"fbhset|\" + \"fblist|\" + \"fbstats|\" + \"qentries|\" + \"qentry|\" + \"play|\" + \"ansi|\" + \"break|\" + \"c|\" + \"asc|\" + \"die|\" + \"isdbref|\" + \"isint|\" + \"isnum|\" + \"isletters|\" + \"linecoords|\" + \"localize|\" + \"lnum|\" + \"nameshort|\" + \"null|\" + \"objeval|\" + \"r|\" + \"rand|\" + \"s|\" + \"setq|\" + \"setr|\" + \"soundex|\" + \"soundslike|\" + \"valid|\" + \"vchart|\" + \"vchart2|\" + \"vlabel|\" + \"@@|\" + \"bakerdays|\" + \"bodybuild|\" + \"box|\" + \"capall|\" + \"catalog|\" + \"children|\" + \"ctrailer|\" + \"darttime|\" + \"debt|\" + \"detailbar|\" + \"exploredroom|\" + \"fansitoansi|\" + \"fansitoxansi|\" + \"fullbar|\" + \"halfbar|\" + \"isdarted|\" + \"isnewbie|\" + \"isword|\" + \"lambda|\" + \"lobjects|\" + \"lplayers|\" + \"lthings|\" + \"lvexits|\" + \"lvobjects|\" + \"lvplayers|\" + \"lvthings|\" + \"newswrap|\" + \"numsuffix|\" + \"playerson|\" + \"playersthisweek|\" + \"randomad|\" + \"randword|\" + \"realrandword|\" + \"replacechr|\" + \"second|\" + \"splitamount|\" + \"strlenall|\" + \"text|\" + \"third|\" + \"tofansi|\" + \"totalac|\" + \"unique|\" + \"getaddressroom|\" + \"listpropertycomm|\" + \"listpropertyres|\" + \"lotowner|\" + \"lotrating|\" + \"lotratingcount|\" + \"lotvalue|\" + \"boughtproduct|\" + \"companyabb|\" + \"companyicon|\" + \"companylist|\" + \"companyname|\" + \"companyowners|\" + \"companyvalue|\" + \"employees|\" + \"invested|\" + \"productlist|\" + \"productname|\" + \"productowners|\" + \"productrating|\" + \"productratingcount|\" + \"productsoldat|\" + \"producttype|\" + \"ratedproduct|\" + \"soldproduct|\" + \"topproducts|\" + \"totalspentonproduct|\" + \"totalstock|\" + \"transfermoney|\" + \"uniquebuyercount|\" + \"uniqueproductsbought|\" + \"validcompany|\" + \"deletepicture|\" + \"fbsave|\" + \"getpicturesecurity|\" + \"haspicture|\" + \"listpictures|\" + \"picturesize|\" + \"replacecolor|\" + \"rgbtocolor|\" + \"savepicture|\" + \"setpicturesecurity|\" + \"showpicture|\" + \"piechart|\" + \"piechartlabel|\" + \"createmaze|\" + \"drawmaze|\" + \"drawwireframe\";\n    var keywordMapper = this.createKeywordMapper({\n      \"invalid.deprecated\": \"debugger\",\n      \"support.function\": builtinFunctions,\n      \"constant.language\": builtinConstants,\n      \"keyword\": keywords\n    }, \"identifier\");\n    var strPre = \"(?:r|u|ur|R|U|UR|Ur|uR)?\";\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    this.$rules = {\n      \"start\": [{\n        token: \"variable\",\n        // mush substitution register\n        regex: \"%[0-9]{1}\"\n      }, {\n        token: \"variable\",\n        // mush substitution register\n        regex: \"%q[0-9A-Za-z]{1}\"\n      }, {\n        token: \"variable\",\n        // mush special character register\n        regex: \"%[a-zA-Z]{1}\"\n      }, {\n        token: \"variable.language\",\n        regex: \"%[a-z0-9-_]+\"\n      }, {\n        token: \"constant.numeric\",\n        // imaginary\n        regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: floatNumber\n      }, {\n        token: \"constant.numeric\",\n        // long integer\n        regex: integer + \"[lL]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // integer\n        regex: integer + \"\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|#|%|<<|>>|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[\\\\[\\\\(\\\\{]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\]\\\\)\\\\}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }]\n    };\n  };\n\n  oop.inherits(MushCodeRules, TextHighlightRules);\n  exports.MushCodeRules = MushCodeRules;\n});\nace.define(\"ace/mode/folding/pythonic\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (markers) {\n    this.foldingStartMarker = new RegExp(\"([\\\\[{])(?:\\\\s*)$|(\" + markers + \")(?:\\\\s*)(?:#.*)?$\");\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, match.index);\n        if (match[2]) return this.indentationBlock(session, row, match.index + match[2].length);\n        return this.indentationBlock(session, row);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/mushcode\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/mushcode_highlight_rules\", \"ace/mode/folding/pythonic\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var MushCodeRules = require(\"./mushcode_highlight_rules\").MushCodeRules;\n\n  var PythonFoldMode = require(\"./folding/pythonic\").FoldMode;\n\n  var Range = require(\"../range\").Range;\n\n  var Mode = function Mode() {\n    this.HighlightRules = MushCodeRules;\n    this.foldingRules = new PythonFoldMode(\"\\\\:\");\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    var outdents = {\n      \"pass\": 1,\n      \"return\": 1,\n      \"raise\": 1,\n      \"break\": 1,\n      \"continue\": 1\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\") return false;\n      var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n      if (!tokens) return false;\n\n      do {\n        var last = tokens.pop();\n      } while (last && (last.type == \"comment\" || last.type == \"text\" && last.value.match(/^\\s+$/)));\n\n      if (!last) return false;\n      return last.type == \"keyword\" && outdents[last.value];\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      row += 1;\n      var indent = this.$getIndent(doc.getLine(row));\n      var tab = doc.getTabString();\n      if (indent.slice(-tab.length) == tab) doc.remove(new Range(row, indent.length - tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/mushcode\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/mushcode\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}