{"ast":null,"code":"ace.define(\"ace/mode/jssm_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var JSSMHighlightRules = function JSSMHighlightRules() {\n    this.$rules = {\n      start: [{\n        token: \"punctuation.definition.comment.mn\",\n        regex: /\\/\\*/,\n        push: [{\n          token: \"punctuation.definition.comment.mn\",\n          regex: /\\*\\//,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.block.jssm\"\n        }],\n        comment: \"block comment\"\n      }, {\n        token: \"comment.line.jssm\",\n        regex: /\\/\\//,\n        push: [{\n          token: \"comment.line.jssm\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.line.jssm\"\n        }],\n        comment: \"block comment\"\n      }, {\n        token: \"entity.name.function\",\n        regex: /\\${/,\n        push: [{\n          token: \"entity.name.function\",\n          regex: /}/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"keyword.other\"\n        }],\n        comment: \"js outcalls\"\n      }, {\n        token: \"constant.numeric\",\n        regex: /[0-9]*\\.[0-9]*\\.[0-9]*/,\n        comment: \"semver\"\n      }, {\n        token: \"constant.language.jssmLanguage\",\n        regex: /graph_layout\\s*:/,\n        comment: \"jssm language tokens\"\n      }, {\n        token: \"constant.language.jssmLanguage\",\n        regex: /machine_name\\s*:/,\n        comment: \"jssm language tokens\"\n      }, {\n        token: \"constant.language.jssmLanguage\",\n        regex: /machine_version\\s*:/,\n        comment: \"jssm language tokens\"\n      }, {\n        token: \"constant.language.jssmLanguage\",\n        regex: /jssm_version\\s*:/,\n        comment: \"jssm language tokens\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.legal_legal\",\n        regex: /<->/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.legal_none\",\n        regex: /<-/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.none_legal\",\n        regex: /->/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.main_main\",\n        regex: /<=>/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.none_main\",\n        regex: /=>/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.main_none\",\n        regex: /<=/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.forced_forced\",\n        regex: /<~>/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.none_forced\",\n        regex: /~>/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.forced_none\",\n        regex: /<~/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.legal_main\",\n        regex: /<-=>/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.main_legal\",\n        regex: /<=->/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.legal_forced\",\n        regex: /<-~>/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.forced_legal\",\n        regex: /<~->/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.main_forced\",\n        regex: /<=~>/,\n        comment: \"transitions\"\n      }, {\n        token: \"keyword.control.transition.jssmArrow.forced_main\",\n        regex: /<~=>/,\n        comment: \"transitions\"\n      }, {\n        token: \"constant.numeric.jssmProbability\",\n        regex: /[0-9]+%/,\n        comment: \"edge probability annotation\"\n      }, {\n        token: \"constant.character.jssmAction\",\n        regex: /\\'[^']*\\'/,\n        comment: \"action annotation\"\n      }, {\n        token: \"entity.name.tag.jssmLabel.doublequoted\",\n        regex: /\\\"[^\"]*\\\"/,\n        comment: \"jssm label annotation\"\n      }, {\n        token: \"entity.name.tag.jssmLabel.atom\",\n        regex: /[a-zA-Z0-9_.+&()#@!?,]/,\n        comment: \"jssm label annotation\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  JSSMHighlightRules.metaData = {\n    fileTypes: [\"jssm\", \"jssm_state\"],\n    name: \"JSSM\",\n    scopeName: \"source.jssm\"\n  };\n  oop.inherits(JSSMHighlightRules, TextHighlightRules);\n  exports.JSSMHighlightRules = JSSMHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/jssm\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/jssm_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var JSSMHighlightRules = require(\"./jssm_highlight_rules\").JSSMHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = JSSMHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/jssm\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/jssm\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}