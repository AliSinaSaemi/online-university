{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport assign from 'object-assign';\nimport { showMenu, hideMenu } from './actions';\nimport { callIfExists, cssClasses } from './helpers';\n\nvar ContextMenuTrigger = function (_Component) {\n  _inherits(ContextMenuTrigger, _Component);\n\n  function ContextMenuTrigger() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ContextMenuTrigger);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ContextMenuTrigger.__proto__ || Object.getPrototypeOf(ContextMenuTrigger)).call.apply(_ref, [this].concat(args))), _this), _this.touchHandled = false, _this.handleMouseDown = function (event) {\n      if (_this.props.holdToDisplay >= 0 && event.button === 0) {\n        event.persist();\n        event.stopPropagation();\n        _this.mouseDownTimeoutId = setTimeout(function () {\n          return _this.handleContextClick(event);\n        }, _this.props.holdToDisplay);\n      }\n\n      callIfExists(_this.props.attributes.onMouseDown, event);\n    }, _this.handleMouseUp = function (event) {\n      if (event.button === 0) {\n        clearTimeout(_this.mouseDownTimeoutId);\n      }\n\n      callIfExists(_this.props.attributes.onMouseUp, event);\n    }, _this.handleMouseOut = function (event) {\n      if (event.button === 0) {\n        clearTimeout(_this.mouseDownTimeoutId);\n      }\n\n      callIfExists(_this.props.attributes.onMouseOut, event);\n    }, _this.handleTouchstart = function (event) {\n      _this.touchHandled = false;\n\n      if (_this.props.holdToDisplay >= 0) {\n        event.persist();\n        event.stopPropagation();\n        _this.touchstartTimeoutId = setTimeout(function () {\n          _this.handleContextClick(event);\n\n          _this.touchHandled = true;\n        }, _this.props.holdToDisplay);\n      }\n\n      callIfExists(_this.props.attributes.onTouchStart, event);\n    }, _this.handleTouchEnd = function (event) {\n      if (_this.touchHandled) {\n        event.preventDefault();\n      }\n\n      clearTimeout(_this.touchstartTimeoutId);\n      callIfExists(_this.props.attributes.onTouchEnd, event);\n    }, _this.handleContextMenu = function (event) {\n      _this.handleContextClick(event);\n\n      callIfExists(_this.props.attributes.onContextMenu, event);\n    }, _this.handleContextClick = function (event) {\n      if (_this.props.disable) return;\n      if (_this.props.disableIfShiftIsPressed && event.shiftKey) return;\n      event.preventDefault();\n      event.stopPropagation();\n      var x = event.clientX || event.touches && event.touches[0].pageX;\n      var y = event.clientY || event.touches && event.touches[0].pageY;\n\n      if (_this.props.posX) {\n        x -= _this.props.posX;\n      }\n\n      if (_this.props.posY) {\n        y -= _this.props.posY;\n      }\n\n      hideMenu();\n      var data = callIfExists(_this.props.collect, _this.props);\n      var showMenuConfig = {\n        position: {\n          x: x,\n          y: y\n        },\n        target: _this.elem,\n        id: _this.props.id\n      };\n\n      if (data && typeof data.then === 'function') {\n        // it's promise\n        data.then(function (resp) {\n          showMenuConfig.data = assign({}, resp, {\n            target: event.target\n          });\n          showMenu(showMenuConfig);\n        });\n      } else {\n        showMenuConfig.data = assign({}, data, {\n          target: event.target\n        });\n        showMenu(showMenuConfig);\n      }\n    }, _this.elemRef = function (c) {\n      _this.elem = c;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ContextMenuTrigger, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          renderTag = _props.renderTag,\n          attributes = _props.attributes,\n          children = _props.children;\n      var newAttrs = assign({}, attributes, {\n        className: cx(cssClasses.menuWrapper, attributes.className),\n        onContextMenu: this.handleContextMenu,\n        onMouseDown: this.handleMouseDown,\n        onMouseUp: this.handleMouseUp,\n        onTouchStart: this.handleTouchstart,\n        onTouchEnd: this.handleTouchEnd,\n        onMouseOut: this.handleMouseOut,\n        ref: this.elemRef\n      });\n      return React.createElement(renderTag, newAttrs, children);\n    }\n  }]);\n\n  return ContextMenuTrigger;\n}(Component);\n\nContextMenuTrigger.propTypes = {\n  id: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  attributes: PropTypes.object,\n  collect: PropTypes.func,\n  disable: PropTypes.bool,\n  holdToDisplay: PropTypes.number,\n  posX: PropTypes.number,\n  posY: PropTypes.number,\n  renderTag: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  disableIfShiftIsPressed: PropTypes.bool\n};\nContextMenuTrigger.defaultProps = {\n  attributes: {},\n  collect: function collect() {\n    return null;\n  },\n  disable: false,\n  holdToDisplay: 1000,\n  renderTag: 'div',\n  posX: 0,\n  posY: 0,\n  disableIfShiftIsPressed: false\n};\nexport default ContextMenuTrigger;","map":null,"metadata":{},"sourceType":"module"}