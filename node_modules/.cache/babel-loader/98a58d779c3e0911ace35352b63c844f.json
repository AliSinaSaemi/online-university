{"ast":null,"code":"ace.define(\"ace/mode/scheme_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var SchemeHighlightRules = function SchemeHighlightRules() {\n    var keywordControl = \"case|do|let|loop|if|else|when\";\n    var keywordOperator = \"eq?|eqv?|equal?|and|or|not|null?\";\n    var constantLanguage = \"#t|#f\";\n    var supportFunctions = \"cons|car|cdr|cond|lambda|lambda*|syntax-rules|format|set!|quote|eval|append|list|list?|member?|load\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword.control\": keywordControl,\n      \"keyword.operator\": keywordOperator,\n      \"constant.language\": constantLanguage,\n      \"support.function\": supportFunctions\n    }, \"identifier\", true);\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \";.*$\"\n      }, {\n        \"token\": [\"storage.type.function-type.scheme\", \"text\", \"entity.name.function.scheme\"],\n        \"regex\": \"(?:\\\\b(?:(define|define-syntax|define-macro))\\\\b)(\\\\s+)((?:\\\\w|\\\\-|\\\\!|\\\\?)*)\"\n      }, {\n        \"token\": \"punctuation.definition.constant.character.scheme\",\n        \"regex\": \"#:\\\\S+\"\n      }, {\n        \"token\": [\"punctuation.definition.variable.scheme\", \"variable.other.global.scheme\", \"punctuation.definition.variable.scheme\"],\n        \"regex\": \"(\\\\*)(\\\\S*)(\\\\*)\"\n      }, {\n        \"token\": \"constant.numeric\",\n        // hex\n        \"regex\": \"#[xXoObB][0-9a-fA-F]+\"\n      }, {\n        \"token\": \"constant.numeric\",\n        // float\n        \"regex\": \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\"\n      }, {\n        \"token\": keywordMapper,\n        \"regex\": \"[a-zA-Z_#][a-zA-Z0-9_\\\\-\\\\?\\\\!\\\\*]*\"\n      }, {\n        \"token\": \"string\",\n        \"regex\": '\"(?=.)',\n        \"next\": \"qqstring\"\n      }],\n      \"qqstring\": [{\n        \"token\": \"constant.character.escape.scheme\",\n        \"regex\": \"\\\\\\\\.\"\n      }, {\n        \"token\": \"string\",\n        \"regex\": '[^\"\\\\\\\\]+',\n        \"merge\": true\n      }, {\n        \"token\": \"string\",\n        \"regex\": \"\\\\\\\\$\",\n        \"next\": \"qqstring\",\n        \"merge\": true\n      }, {\n        \"token\": \"string\",\n        \"regex\": '\"|$',\n        \"next\": \"start\",\n        \"merge\": true\n      }]\n    };\n  };\n\n  oop.inherits(SchemeHighlightRules, TextHighlightRules);\n  exports.SchemeHighlightRules = SchemeHighlightRules;\n});\nace.define(\"ace/mode/matching_parens_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingParensOutdent = function MatchingParensOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\)/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\))/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      var match = line.match(/^(\\s+)/);\n\n      if (match) {\n        return match[1];\n      }\n\n      return \"\";\n    };\n  }).call(MatchingParensOutdent.prototype);\n  exports.MatchingParensOutdent = MatchingParensOutdent;\n});\nace.define(\"ace/mode/scheme\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/scheme_highlight_rules\", \"ace/mode/matching_parens_outdent\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var SchemeHighlightRules = require(\"./scheme_highlight_rules\").SchemeHighlightRules;\n\n  var MatchingParensOutdent = require(\"./matching_parens_outdent\").MatchingParensOutdent;\n\n  var Mode = function Mode() {\n    this.HighlightRules = SchemeHighlightRules;\n    this.$outdent = new MatchingParensOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \";\";\n    this.minorIndentFunctions = [\"define\", \"lambda\", \"define-macro\", \"define-syntax\", \"syntax-rules\", \"define-record-type\", \"define-structure\"];\n\n    this.$toIndent = function (str) {\n      return str.split('').map(function (ch) {\n        if (/\\s/.exec(ch)) {\n          return ch;\n        } else {\n          return ' ';\n        }\n      }).join('');\n    };\n\n    this.$calculateIndent = function (line, tab) {\n      var baseIndent = this.$getIndent(line);\n      var delta = 0;\n      var isParen, ch;\n\n      for (var i = line.length - 1; i >= 0; i--) {\n        ch = line[i];\n\n        if (ch === '(') {\n          delta--;\n          isParen = true;\n        } else if (ch === '(' || ch === '[' || ch === '{') {\n          delta--;\n          isParen = false;\n        } else if (ch === ')' || ch === ']' || ch === '}') {\n          delta++;\n        }\n\n        if (delta < 0) {\n          break;\n        }\n      }\n\n      if (delta < 0 && isParen) {\n        i += 1;\n        var iBefore = i;\n        var fn = '';\n\n        while (true) {\n          ch = line[i];\n\n          if (ch === ' ' || ch === '\\t') {\n            if (this.minorIndentFunctions.indexOf(fn) !== -1) {\n              return this.$toIndent(line.substring(0, iBefore - 1) + tab);\n            } else {\n              return this.$toIndent(line.substring(0, i + 1));\n            }\n          } else if (ch === undefined) {\n            return this.$toIndent(line.substring(0, iBefore - 1) + tab);\n          }\n\n          fn += line[i];\n          i++;\n        }\n      } else if (delta < 0 && !isParen) {\n        return this.$toIndent(line.substring(0, i + 1));\n      } else if (delta > 0) {\n        baseIndent = baseIndent.substring(0, baseIndent.length - tab.length);\n        return baseIndent;\n      } else {\n        return baseIndent;\n      }\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      return this.$calculateIndent(line, tab);\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/scheme\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/scheme\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}