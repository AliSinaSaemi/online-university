{"ast":null,"code":"ace.define(\"ace/mode/logtalk_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var LogtalkHighlightRules = function LogtalkHighlightRules() {\n    this.$rules = {\n      start: [{\n        token: 'punctuation.definition.comment.logtalk',\n        regex: '/\\\\*',\n        push: [{\n          token: 'punctuation.definition.comment.logtalk',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.logtalk'\n        }]\n      }, {\n        todo: 'fix grouping',\n        token: ['comment.line.percentage.logtalk', 'punctuation.definition.comment.logtalk'],\n        regex: '%.*$\\\\n?'\n      }, {\n        todo: 'fix grouping',\n        token: ['storage.type.opening.logtalk', 'punctuation.definition.storage.type.logtalk'],\n        regex: ':-\\\\s(?:object|protocol|category|module)(?=[(])'\n      }, {\n        todo: 'fix grouping',\n        token: ['storage.type.closing.logtalk', 'punctuation.definition.storage.type.logtalk'],\n        regex: ':-\\\\send_(?:object|protocol|category)(?=[.])'\n      }, {\n        caseInsensitive: false,\n        token: 'storage.type.relations.logtalk',\n        regex: '\\\\b(?:complements|extends|i(?:nstantiates|mp(?:orts|lements))|specializes)(?=[(])'\n      }, {\n        caseInsensitive: false,\n        todo: 'fix grouping',\n        token: ['storage.modifier.others.logtalk', 'punctuation.definition.storage.modifier.logtalk'],\n        regex: ':-\\\\s(?:e(?:lse|ndif)|built_in|dynamic|synchronized|threaded)(?=[.])'\n      }, {\n        caseInsensitive: false,\n        todo: 'fix grouping',\n        token: ['storage.modifier.others.logtalk', 'punctuation.definition.storage.modifier.logtalk'],\n        regex: ':-\\\\s(?:c(?:alls|oinductive)|e(?:lif|n(?:coding|sure_loaded)|xport)|i(?:f|n(?:clude|itialization|fo))|reexport|set_(?:logtalk|prolog)_flag|uses)(?=[(])'\n      }, {\n        caseInsensitive: false,\n        todo: 'fix grouping',\n        token: ['storage.modifier.others.logtalk', 'punctuation.definition.storage.modifier.logtalk'],\n        regex: ':-\\\\s(?:alias|info|d(?:ynamic|iscontiguous)|m(?:eta_(?:non_terminal|predicate)|ode|ultifile)|p(?:ublic|r(?:otected|ivate))|op|use(?:s|_module)|synchronized)(?=[(])'\n      }, {\n        token: 'keyword.operator.message-sending.logtalk',\n        regex: '(:|::|\\\\^\\\\^)'\n      }, {\n        token: 'keyword.operator.external-call.logtalk',\n        regex: '([{}])'\n      }, {\n        token: 'keyword.operator.mode.logtalk',\n        regex: '(\\\\?|@)'\n      }, {\n        token: 'keyword.operator.comparison.term.logtalk',\n        regex: '(@=<|@<|@>|@>=|==|\\\\\\\\==)'\n      }, {\n        token: 'keyword.operator.comparison.arithmetic.logtalk',\n        regex: '(=<|<|>|>=|=:=|=\\\\\\\\=)'\n      }, {\n        token: 'keyword.operator.bitwise.logtalk',\n        regex: '(<<|>>|/\\\\\\\\|\\\\\\\\/|\\\\\\\\)'\n      }, {\n        token: 'keyword.operator.evaluable.logtalk',\n        regex: '\\\\b(?:e|pi|div|mod|rem)\\\\b(?![-!(^~])'\n      }, {\n        token: 'keyword.operator.evaluable.logtalk',\n        regex: '(\\\\*\\\\*|\\\\+|-|\\\\*|/|//)'\n      }, {\n        token: 'keyword.operator.misc.logtalk',\n        regex: '(:-|!|\\\\\\\\+|,|;|-->|->|=|\\\\=|\\\\.|=\\\\.\\\\.|\\\\^|\\\\bas\\\\b|\\\\bis\\\\b)'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.evaluable.logtalk',\n        regex: '\\\\b(a(bs|cos|sin|tan|tan2)|c(eiling|os)|div|exp|flo(at(_(integer|fractional)_part)?|or)|log|m(ax|in|od)|r(em|ound)|s(i(n|gn)|qrt)|t(an|runcate)|xor)(?=[(])'\n      }, {\n        token: 'support.function.control.logtalk',\n        regex: '\\\\b(?:true|fa(?:il|lse)|repeat|(?:instantiation|system)_error)\\\\b(?![-!(^~])'\n      }, {\n        token: 'support.function.control.logtalk',\n        regex: '\\\\b((?:type|domain|existence|permission|representation|evaluation|resource|syntax)_error)(?=[(])'\n      }, {\n        token: 'support.function.control.logtalk',\n        regex: '\\\\b(?:ca(?:ll|tch)|ignore|throw|once)(?=[(])'\n      }, {\n        token: 'support.function.chars-and-bytes-io.logtalk',\n        regex: '\\\\b(?:(?:get|p(?:eek|ut))_(c(?:har|ode)|byte)|nl)(?=[(])'\n      }, {\n        token: 'support.function.chars-and-bytes-io.logtalk',\n        regex: '\\\\bnl\\\\b'\n      }, {\n        token: 'support.function.atom-term-processing.logtalk',\n        regex: '\\\\b(?:atom_(?:length|c(?:hars|o(?:ncat|des)))|sub_atom|char_code|number_c(?:har|ode)s)(?=[(])'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.term-testing.logtalk',\n        regex: '\\\\b(?:var|atom(ic)?|integer|float|c(?:allable|ompound)|n(?:onvar|umber)|ground|acyclic_term)(?=[(])'\n      }, {\n        token: 'support.function.term-comparison.logtalk',\n        regex: '\\\\b(compare)(?=[(])'\n      }, {\n        token: 'support.function.term-io.logtalk',\n        regex: '\\\\b(?:read(_term)?|write(?:q|_(?:canonical|term))?|(current_)?(?:char_conversion|op))(?=[(])'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.term-creation-and-decomposition.logtalk',\n        regex: '\\\\b(arg|copy_term|functor|numbervars|term_variables)(?=[(])'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.term-unification.logtalk',\n        regex: '\\\\b(subsumes_term|unify_with_occurs_check)(?=[(])'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.stream-selection-and-control.logtalk',\n        regex: '\\\\b(?:(?:se|curren)t_(?:in|out)put|open|close|flush_output|stream_property|at_end_of_stream|set_stream_position)(?=[(])'\n      }, {\n        token: 'support.function.stream-selection-and-control.logtalk',\n        regex: '\\\\b(?:flush_output|at_end_of_stream)\\\\b'\n      }, {\n        token: 'support.function.prolog-flags.logtalk',\n        regex: '\\\\b((?:se|curren)t_prolog_flag)(?=[(])'\n      }, {\n        token: 'support.function.compiling-and-loading.logtalk',\n        regex: '\\\\b(logtalk_(?:compile|l(?:ibrary_path|oad|oad_context)|make(_target_action)?))(?=[(])'\n      }, {\n        token: 'support.function.compiling-and-loading.logtalk',\n        regex: '\\\\b(logtalk_make)\\\\b'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.event-handling.logtalk',\n        regex: '\\\\b(?:(?:abolish|define)_events|current_event)(?=[(])'\n      }, {\n        token: 'support.function.implementation-defined-hooks.logtalk',\n        regex: '\\\\b(?:(?:create|current|set)_logtalk_flag|halt)(?=[(])'\n      }, {\n        token: 'support.function.implementation-defined-hooks.logtalk',\n        regex: '\\\\b(halt)\\\\b'\n      }, {\n        token: 'support.function.sorting.logtalk',\n        regex: '\\\\b((key)?(sort))(?=[(])'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.entity-creation-and-abolishing.logtalk',\n        regex: '\\\\b((c(?:reate|urrent)|abolish)_(?:object|protocol|category))(?=[(])'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.reflection.logtalk',\n        regex: '\\\\b((object|protocol|category)_property|co(mplements_object|nforms_to_protocol)|extends_(object|protocol|category)|imp(orts_category|lements_protocol)|(instantiat|specializ)es_class)(?=[(])'\n      }, {\n        token: 'support.function.logtalk',\n        regex: '\\\\b((?:for|retract)all)(?=[(])'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.execution-context.logtalk',\n        regex: '\\\\b(?:context|parameter|se(?:lf|nder)|this)(?=[(])'\n      }, {\n        token: 'support.function.database.logtalk',\n        regex: '\\\\b(?:a(?:bolish|ssert(?:a|z))|clause|retract(all)?)(?=[(])'\n      }, {\n        token: 'support.function.all-solutions.logtalk',\n        regex: '\\\\b((?:bag|set)of|f(?:ind|or)all)(?=[(])'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.multi-threading.logtalk',\n        regex: '\\\\b(threaded(_(call|once|ignore|exit|peek|wait|notify))?)(?=[(])'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.engines.logtalk',\n        regex: '\\\\b(threaded_engine(_(create|destroy|self|next(?:_reified)?|yield|post|fetch))?)(?=[(])'\n      }, {\n        caseInsensitive: false,\n        token: 'support.function.reflection.logtalk',\n        regex: '\\\\b(?:current_predicate|predicate_property)(?=[(])'\n      }, {\n        token: 'support.function.event-handler.logtalk',\n        regex: '\\\\b(?:before|after)(?=[(])'\n      }, {\n        token: 'support.function.message-forwarding-handler.logtalk',\n        regex: '\\\\b(forward)(?=[(])'\n      }, {\n        token: 'support.function.grammar-rule.logtalk',\n        regex: '\\\\b(?:expand_(?:goal|term)|(?:goal|term)_expansion|phrase)(?=[(])'\n      }, {\n        token: 'punctuation.definition.string.begin.logtalk',\n        regex: '\\'',\n        push: [{\n          token: 'constant.character.escape.logtalk',\n          regex: '\\\\\\\\([\\\\\\\\abfnrtv\"\\']|(x[a-fA-F0-9]+|[0-7]+)\\\\\\\\)'\n        }, {\n          token: 'punctuation.definition.string.end.logtalk',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.single.logtalk'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin.logtalk',\n        regex: '\"',\n        push: [{\n          token: 'constant.character.escape.logtalk',\n          regex: '\\\\\\\\.'\n        }, {\n          token: 'punctuation.definition.string.end.logtalk',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.double.logtalk'\n        }]\n      }, {\n        token: 'constant.numeric.logtalk',\n        regex: '\\\\b(0b[0-1]+|0o[0-7]+|0x[0-9a-fA-F]+)\\\\b'\n      }, {\n        token: 'constant.numeric.logtalk',\n        regex: '\\\\b(0\\'\\\\\\\\.|0\\'.|0\\'\\'|0\\'\")'\n      }, {\n        token: 'constant.numeric.logtalk',\n        regex: '\\\\b(\\\\d+\\\\.?\\\\d*((e|E)(\\\\+|-)?\\\\d+)?)\\\\b'\n      }, {\n        token: 'variable.other.logtalk',\n        regex: '\\\\b([A-Z_][A-Za-z0-9_]*)\\\\b'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(LogtalkHighlightRules, TextHighlightRules);\n  exports.LogtalkHighlightRules = LogtalkHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/logtalk\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/tokenizer\", \"ace/mode/logtalk_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var Tokenizer = require(\"../tokenizer\").Tokenizer;\n\n  var LogtalkHighlightRules = require(\"./logtalk_highlight_rules\").LogtalkHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = LogtalkHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/logtalk\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/logtalk\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}