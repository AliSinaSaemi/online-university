{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport assign from 'object-assign';\nimport listener from './globalEventListener';\nimport AbstractMenu from './AbstractMenu';\nimport SubMenu from './SubMenu';\nimport { hideMenu } from './actions';\nimport { cssClasses, callIfExists, store } from './helpers';\n\nvar ContextMenu = function (_AbstractMenu) {\n  _inherits(ContextMenu, _AbstractMenu);\n\n  function ContextMenu(props) {\n    _classCallCheck(this, ContextMenu);\n\n    var _this = _possibleConstructorReturn(this, (ContextMenu.__proto__ || Object.getPrototypeOf(ContextMenu)).call(this, props));\n\n    _this.registerHandlers = function () {\n      document.addEventListener('mousedown', _this.handleOutsideClick);\n      document.addEventListener('touchstart', _this.handleOutsideClick);\n      document.addEventListener('scroll', _this.handleHide);\n      document.addEventListener('contextmenu', _this.handleHide);\n      document.addEventListener('keydown', _this.handleKeyNavigation);\n      window.addEventListener('resize', _this.handleHide);\n    };\n\n    _this.unregisterHandlers = function () {\n      document.removeEventListener('mousedown', _this.handleOutsideClick);\n      document.removeEventListener('touchstart', _this.handleOutsideClick);\n      document.removeEventListener('scroll', _this.handleHide);\n      document.removeEventListener('contextmenu', _this.handleHide);\n      document.removeEventListener('keydown', _this.handleKeyNavigation);\n      window.removeEventListener('resize', _this.handleHide);\n    };\n\n    _this.handleShow = function (e) {\n      if (e.detail.id !== _this.props.id || _this.state.isVisible) return;\n      var _e$detail$position = e.detail.position,\n          x = _e$detail$position.x,\n          y = _e$detail$position.y;\n\n      _this.setState({\n        isVisible: true,\n        x: x,\n        y: y\n      });\n\n      _this.registerHandlers();\n\n      callIfExists(_this.props.onShow, e);\n    };\n\n    _this.handleHide = function (e) {\n      if (_this.state.isVisible && (!e.detail || !e.detail.id || e.detail.id === _this.props.id)) {\n        _this.unregisterHandlers();\n\n        _this.setState({\n          isVisible: false,\n          selectedItem: null,\n          forceSubMenuOpen: false\n        });\n\n        callIfExists(_this.props.onHide, e);\n      }\n    };\n\n    _this.handleOutsideClick = function (e) {\n      if (!_this.menu.contains(e.target)) hideMenu();\n    };\n\n    _this.handleMouseLeave = function (event) {\n      event.preventDefault();\n      callIfExists(_this.props.onMouseLeave, event, assign({}, _this.props.data, store.data), store.target);\n      if (_this.props.hideOnLeave) hideMenu();\n    };\n\n    _this.handleContextMenu = function (e) {\n      if (process.env.NODE_ENV === 'production') {\n        e.preventDefault();\n      }\n\n      _this.handleHide(e);\n    };\n\n    _this.hideMenu = function (e) {\n      if (e.keyCode === 27 || e.keyCode === 13) {\n        // ECS or enter\n        hideMenu();\n      }\n    };\n\n    _this.getMenuPosition = function () {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var menuStyles = {\n        top: y,\n        left: x\n      };\n      if (!_this.menu) return menuStyles;\n      var _window = window,\n          innerWidth = _window.innerWidth,\n          innerHeight = _window.innerHeight;\n\n      var rect = _this.menu.getBoundingClientRect();\n\n      if (y + rect.height > innerHeight) {\n        menuStyles.top -= rect.height;\n      }\n\n      if (x + rect.width > innerWidth) {\n        menuStyles.left -= rect.width;\n      }\n\n      if (menuStyles.top < 0) {\n        menuStyles.top = rect.height < innerHeight ? (innerHeight - rect.height) / 2 : 0;\n      }\n\n      if (menuStyles.left < 0) {\n        menuStyles.left = rect.width < innerWidth ? (innerWidth - rect.width) / 2 : 0;\n      }\n\n      return menuStyles;\n    };\n\n    _this.getRTLMenuPosition = function () {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var menuStyles = {\n        top: y,\n        left: x\n      };\n      if (!_this.menu) return menuStyles;\n      var _window2 = window,\n          innerWidth = _window2.innerWidth,\n          innerHeight = _window2.innerHeight;\n\n      var rect = _this.menu.getBoundingClientRect(); // Try to position the menu on the left side of the cursor\n\n\n      menuStyles.left = x - rect.width;\n\n      if (y + rect.height > innerHeight) {\n        menuStyles.top -= rect.height;\n      }\n\n      if (menuStyles.left < 0) {\n        menuStyles.left += rect.width;\n      }\n\n      if (menuStyles.top < 0) {\n        menuStyles.top = rect.height < innerHeight ? (innerHeight - rect.height) / 2 : 0;\n      }\n\n      if (menuStyles.left + rect.width > innerWidth) {\n        menuStyles.left = rect.width < innerWidth ? (innerWidth - rect.width) / 2 : 0;\n      }\n\n      return menuStyles;\n    };\n\n    _this.menuRef = function (c) {\n      _this.menu = c;\n    };\n\n    _this.state = assign({}, _this.state, {\n      x: 0,\n      y: 0,\n      isVisible: false\n    });\n    return _this;\n  }\n\n  _createClass(ContextMenu, [{\n    key: 'getSubMenuType',\n    value: function getSubMenuType() {\n      // eslint-disable-line class-methods-use-this\n      return SubMenu;\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.listenId = listener.register(this.handleShow, this.handleHide);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      if (this.state.isVisible) {\n        var wrapper = window.requestAnimationFrame || setTimeout;\n        wrapper(function () {\n          var _state = _this2.state,\n              x = _state.x,\n              y = _state.y;\n\n          var _ref = _this2.props.rtl ? _this2.getRTLMenuPosition(x, y) : _this2.getMenuPosition(x, y),\n              top = _ref.top,\n              left = _ref.left;\n\n          wrapper(function () {\n            if (!_this2.menu) return;\n            _this2.menu.style.top = top + 'px';\n            _this2.menu.style.left = left + 'px';\n            _this2.menu.style.opacity = 1;\n            _this2.menu.style.pointerEvents = 'auto';\n          });\n        });\n      } else {\n        if (!this.menu) return;\n        this.menu.style.opacity = 0;\n        this.menu.style.pointerEvents = 'none';\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.listenId) {\n        listener.unregister(this.listenId);\n      }\n\n      this.unregisterHandlers();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          style = _props.style;\n      var isVisible = this.state.isVisible;\n      var inlineStyle = assign({}, style, {\n        position: 'fixed',\n        opacity: 0,\n        pointerEvents: 'none'\n      });\n      var menuClassnames = cx(cssClasses.menu, className, _defineProperty({}, cssClasses.menuVisible, isVisible));\n      return React.createElement('nav', {\n        role: 'menu',\n        tabIndex: '-1',\n        ref: this.menuRef,\n        style: inlineStyle,\n        className: menuClassnames,\n        onContextMenu: this.handleContextMenu,\n        onMouseLeave: this.handleMouseLeave\n      }, this.renderChildren(children));\n    }\n  }]);\n\n  return ContextMenu;\n}(AbstractMenu);\n\nContextMenu.propTypes = {\n  id: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  data: PropTypes.object,\n  className: PropTypes.string,\n  hideOnLeave: PropTypes.bool,\n  rtl: PropTypes.bool,\n  onHide: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onShow: PropTypes.func,\n  style: PropTypes.object\n};\nContextMenu.defaultProps = {\n  className: '',\n  data: {},\n  hideOnLeave: false,\n  rtl: false,\n  onHide: function onHide() {\n    return null;\n  },\n  onMouseLeave: function onMouseLeave() {\n    return null;\n  },\n  onShow: function onShow() {\n    return null;\n  },\n  style: {}\n};\nexport default ContextMenu;","map":null,"metadata":{},"sourceType":"module"}