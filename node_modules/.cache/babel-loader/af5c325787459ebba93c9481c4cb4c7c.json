{"ast":null,"code":"ace.define(\"ace/mode/prisma_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var PrismaHighlightRules = function PrismaHighlightRules() {\n    this.$rules = {\n      start: [{\n        include: \"#triple_comment\"\n      }, {\n        include: \"#double_comment\"\n      }, {\n        include: \"#model_block_definition\"\n      }, {\n        include: \"#config_block_definition\"\n      }, {\n        include: \"#enum_block_definition\"\n      }, {\n        include: \"#type_definition\"\n      }],\n      \"#model_block_definition\": [{\n        token: [\"source.prisma.embedded.source\", \"storage.type.model.prisma\", \"source.prisma.embedded.source\", \"entity.name.type.model.prisma\", \"source.prisma.embedded.source\", \"punctuation.definition.tag.prisma\"],\n        regex: /^(\\s*)(model|type)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n        push: [{\n          token: \"punctuation.definition.tag.prisma\",\n          regex: /\\s*\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#triple_comment\"\n        }, {\n          include: \"#double_comment\"\n        }, {\n          include: \"#field_definition\"\n        }, {\n          defaultToken: \"source.prisma.embedded.source\"\n        }]\n      }],\n      \"#enum_block_definition\": [{\n        token: [\"source.prisma.embedded.source\", \"storage.type.enum.prisma\", \"source.prisma.embedded.source\", \"entity.name.type.enum.prisma\", \"source.prisma.embedded.source\", \"punctuation.definition.tag.prisma\"],\n        regex: /^(\\s*)(enum)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n        push: [{\n          token: \"punctuation.definition.tag.prisma\",\n          regex: /\\s*\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#triple_comment\"\n        }, {\n          include: \"#double_comment\"\n        }, {\n          include: \"#enum_value_definition\"\n        }, {\n          defaultToken: \"source.prisma.embedded.source\"\n        }]\n      }],\n      \"#config_block_definition\": [{\n        token: [\"source.prisma.embedded.source\", \"storage.type.config.prisma\", \"source.prisma.embedded.source\", \"entity.name.type.config.prisma\", \"source.prisma.embedded.source\", \"punctuation.definition.tag.prisma\"],\n        regex: /^(\\s*)(generator|datasource)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n        push: [{\n          token: \"source.prisma.embedded.source\",\n          regex: /\\s*\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#triple_comment\"\n        }, {\n          include: \"#double_comment\"\n        }, {\n          include: \"#assignment\"\n        }, {\n          defaultToken: \"source.prisma.embedded.source\"\n        }]\n      }],\n      \"#assignment\": [{\n        token: [\"text\", \"variable.other.assignment.prisma\", \"text\", \"keyword.operator.terraform\", \"text\"],\n        regex: /^(\\s*)(\\w+)(\\s*)(=)(\\s*)/,\n        push: [{\n          token: \"text\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          include: \"#value\"\n        }, {\n          include: \"#double_comment_inline\"\n        }]\n      }],\n      \"#field_definition\": [{\n        token: [\"text\", \"variable.other.assignment.prisma\", \"invalid.illegal.colon.prisma\", \"text\", \"support.type.primitive.prisma\", \"keyword.operator.list_type.prisma\", \"keyword.operator.optional_type.prisma\", \"invalid.illegal.required_type.prisma\"],\n        regex: /^(\\s*)(\\w+)((?:\\s*:)?)(\\s+)(\\w+)((?:\\[\\])?)((?:\\?)?)((?:\\!)?)/\n      }, {\n        include: \"#attribute_with_arguments\"\n      }, {\n        include: \"#attribute\"\n      }],\n      \"#type_definition\": [{\n        token: [\"text\", \"storage.type.type.prisma\", \"text\", \"entity.name.type.type.prisma\", \"text\", \"support.type.primitive.prisma\"],\n        regex: /^(\\s*)(type)(\\s+)(\\w+)(\\s*=\\s*)(\\w+)/\n      }, {\n        include: \"#attribute_with_arguments\"\n      }, {\n        include: \"#attribute\"\n      }],\n      \"#enum_value_definition\": [{\n        token: [\"text\", \"variable.other.assignment.prisma\", \"text\"],\n        regex: /^(\\s*)(\\w+)(\\s*$)/\n      }, {\n        include: \"#attribute_with_arguments\"\n      }, {\n        include: \"#attribute\"\n      }],\n      \"#attribute_with_arguments\": [{\n        token: [\"entity.name.function.attribute.prisma\", \"punctuation.definition.tag.prisma\"],\n        regex: /(@@?[\\w\\.]+)(\\()/,\n        push: [{\n          token: \"punctuation.definition.tag.prisma\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#named_argument\"\n        }, {\n          include: \"#value\"\n        }, {\n          defaultToken: \"source.prisma.attribute.with_arguments\"\n        }]\n      }],\n      \"#attribute\": [{\n        token: \"entity.name.function.attribute.prisma\",\n        regex: /@@?[\\w\\.]+/\n      }],\n      \"#array\": [{\n        token: \"source.prisma.array\",\n        regex: /\\[/,\n        push: [{\n          token: \"source.prisma.array\",\n          regex: /\\]/,\n          next: \"pop\"\n        }, {\n          include: \"#value\"\n        }, {\n          defaultToken: \"source.prisma.array\"\n        }]\n      }],\n      \"#value\": [{\n        include: \"#array\"\n      }, {\n        include: \"#functional\"\n      }, {\n        include: \"#literal\"\n      }],\n      \"#functional\": [{\n        token: [\"support.function.functional.prisma\", \"punctuation.definition.tag.prisma\"],\n        regex: /(\\w+)(\\()/,\n        push: [{\n          token: \"punctuation.definition.tag.prisma\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#value\"\n        }, {\n          defaultToken: \"source.prisma.functional\"\n        }]\n      }],\n      \"#literal\": [{\n        include: \"#boolean\"\n      }, {\n        include: \"#number\"\n      }, {\n        include: \"#double_quoted_string\"\n      }, {\n        include: \"#identifier\"\n      }],\n      \"#identifier\": [{\n        token: \"support.constant.constant.prisma\",\n        regex: /\\b(?:\\w)+\\b/\n      }],\n      \"#map_key\": [{\n        token: [\"variable.parameter.key.prisma\", \"text\", \"punctuation.definition.separator.key-value.prisma\", \"text\"],\n        regex: /(\\w+)(\\s*)(:)(\\s*)/\n      }],\n      \"#named_argument\": [{\n        include: \"#map_key\"\n      }, {\n        include: \"#value\"\n      }],\n      \"#triple_comment\": [{\n        token: \"comment.prisma\",\n        regex: /\\/\\/\\//,\n        push: [{\n          token: \"comment.prisma\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.prisma\"\n        }]\n      }],\n      \"#double_comment\": [{\n        token: \"comment.prisma\",\n        regex: /\\/\\//,\n        push: [{\n          token: \"comment.prisma\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.prisma\"\n        }]\n      }],\n      \"#double_comment_inline\": [{\n        token: \"comment.prisma\",\n        regex: /\\/\\/[^$]*/\n      }],\n      \"#boolean\": [{\n        token: \"constant.language.boolean.prisma\",\n        regex: /\\b(?:true|false)\\b/\n      }],\n      \"#number\": [{\n        token: \"constant.numeric.prisma\",\n        regex: /(?:0(?:x|X)[0-9a-fA-F]*|(?:\\+|-)?\\b(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDdg]|UL|ul)?\\b/\n      }],\n      \"#double_quoted_string\": [{\n        token: \"string.quoted.double.start.prisma\",\n        regex: /\"/,\n        push: [{\n          token: \"string.quoted.double.end.prisma\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          include: \"#string_interpolation\"\n        }, {\n          token: \"string.quoted.double.prisma\",\n          regex: /[\\w\\-\\/\\._\\\\%@:\\?=]+/\n        }, {\n          defaultToken: \"unnamed\"\n        }]\n      }],\n      \"#string_interpolation\": [{\n        token: \"keyword.control.interpolation.start.prisma\",\n        regex: /\\$\\{/,\n        push: [{\n          token: \"keyword.control.interpolation.end.prisma\",\n          regex: /\\s*\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#value\"\n        }, {\n          defaultToken: \"source.tag.embedded.source.prisma\"\n        }]\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  PrismaHighlightRules.metaData = {\n    name: \"Prisma\",\n    scopeName: \"source.prisma\"\n  };\n  oop.inherits(PrismaHighlightRules, TextHighlightRules);\n  exports.PrismaHighlightRules = PrismaHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/prisma\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/prisma_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var PrismaHighlightRules = require(\"./prisma_highlight_rules\").PrismaHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = PrismaHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.$id = \"ace/mode/prisma\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/prisma\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}