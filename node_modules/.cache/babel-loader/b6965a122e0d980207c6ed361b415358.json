{"ast":null,"code":"ace.define(\"ace/mode/hjson_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var HjsonHighlightRules = function HjsonHighlightRules() {\n    this.$rules = {\n      start: [{\n        include: \"#comments\"\n      }, {\n        include: \"#rootObject\"\n      }, {\n        include: \"#value\"\n      }],\n      \"#array\": [{\n        token: \"paren.lparen\",\n        regex: /\\[/,\n        push: [{\n          token: \"paren.rparen\",\n          regex: /\\]/,\n          next: \"pop\"\n        }, {\n          include: \"#value\"\n        }, {\n          include: \"#comments\"\n        }, {\n          token: \"text\",\n          regex: /,|$/\n        }, {\n          token: \"invalid.illegal\",\n          regex: /[^\\s\\]]/\n        }, {\n          defaultToken: \"array\"\n        }]\n      }],\n      \"#comments\": [{\n        token: [\"comment.punctuation\", \"comment.line\"],\n        regex: /(#)(.*$)/\n      }, {\n        token: \"comment.punctuation\",\n        regex: /\\/\\*/,\n        push: [{\n          token: \"comment.punctuation\",\n          regex: /\\*\\//,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.block\"\n        }]\n      }, {\n        token: [\"comment.punctuation\", \"comment.line\"],\n        regex: /(\\/\\/)(.*$)/\n      }],\n      \"#constant\": [{\n        token: \"constant\",\n        regex: /\\b(?:true|false|null)\\b/\n      }],\n      \"#keyname\": [{\n        token: \"keyword\",\n        regex: /(?:[^,\\{\\[\\}\\]\\s]+|\"(?:[^\"\\\\]|\\\\.)*\")\\s*(?=:)/\n      }],\n      \"#mstring\": [{\n        token: \"string\",\n        regex: /'''/,\n        push: [{\n          token: \"string\",\n          regex: /'''/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }],\n      \"#number\": [{\n        token: \"constant.numeric\",\n        regex: /-?(?:0|[1-9]\\d*)(?:(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)?/,\n        comment: \"handles integer and decimal numbers\"\n      }],\n      \"#object\": [{\n        token: \"paren.lparen\",\n        regex: /\\{/,\n        push: [{\n          token: \"paren.rparen\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#keyname\"\n        }, {\n          include: \"#value\"\n        }, {\n          token: \"text\",\n          regex: /:/\n        }, {\n          token: \"text\",\n          regex: /,/\n        }, {\n          defaultToken: \"paren\"\n        }]\n      }],\n      \"#rootObject\": [{\n        token: \"paren\",\n        regex: /(?=\\s*(?:[^,\\{\\[\\}\\]\\s]+|\"(?:[^\"\\\\]|\\\\.)*\")\\s*:)/,\n        push: [{\n          token: \"paren.rparen\",\n          regex: /---none---/,\n          next: \"pop\"\n        }, {\n          include: \"#keyname\"\n        }, {\n          include: \"#value\"\n        }, {\n          token: \"text\",\n          regex: /:/\n        }, {\n          token: \"text\",\n          regex: /,/\n        }, {\n          defaultToken: \"paren\"\n        }]\n      }],\n      \"#string\": [{\n        token: \"string\",\n        regex: /\"/,\n        push: [{\n          token: \"string\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/\n        }, {\n          token: \"invalid.illegal\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string\"\n        }]\n      }],\n      \"#ustring\": [{\n        token: \"string\",\n        regex: /\\b[^:,0-9\\-\\{\\[\\}\\]\\s].*$/\n      }],\n      \"#value\": [{\n        include: \"#constant\"\n      }, {\n        include: \"#number\"\n      }, {\n        include: \"#string\"\n      }, {\n        include: \"#array\"\n      }, {\n        include: \"#object\"\n      }, {\n        include: \"#comments\"\n      }, {\n        include: \"#mstring\"\n      }, {\n        include: \"#ustring\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  HjsonHighlightRules.metaData = {\n    fileTypes: [\"hjson\"],\n    foldingStartMarker: \"(?x:     # turn on extended mode\\n              ^    # a line beginning with\\n              \\\\s*    # some optional space\\n              [{\\\\[]  # the start of an object or array\\n              (?!    # but not followed by\\n              .*   # whatever\\n              [}\\\\]]  # and the close of an object or array\\n              ,?   # an optional comma\\n              \\\\s*  # some optional space\\n              $    # at the end of the line\\n              )\\n              |    # ...or...\\n              [{\\\\[]  # the start of an object or array\\n              \\\\s*    # some optional space\\n              $    # at the end of the line\\n            )\",\n    foldingStopMarker: \"(?x:   # turn on extended mode\\n             ^    # a line beginning with\\n             \\\\s*  # some optional space\\n             [}\\\\]]  # and the close of an object or array\\n             )\",\n    keyEquivalent: \"^~J\",\n    name: \"Hjson\",\n    scopeName: \"source.hjson\"\n  };\n  oop.inherits(HjsonHighlightRules, TextHighlightRules);\n  exports.HjsonHighlightRules = HjsonHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/hjson\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/hjson_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var HjsonHighlightRules = require(\"./hjson_highlight_rules\").HjsonHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = HjsonHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/hjson\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/hjson\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}