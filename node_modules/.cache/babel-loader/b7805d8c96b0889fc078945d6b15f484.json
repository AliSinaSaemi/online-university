{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport PanelContext from '../PanelContext';\nexport default function PanelBody(_ref) {\n  var prefixCls = _ref.prefixCls,\n      disabledDate = _ref.disabledDate,\n      onSelect = _ref.onSelect,\n      rowNum = _ref.rowNum,\n      colNum = _ref.colNum,\n      prefixColumn = _ref.prefixColumn,\n      rowClassName = _ref.rowClassName,\n      baseDate = _ref.baseDate,\n      getCellClassName = _ref.getCellClassName,\n      getCellText = _ref.getCellText,\n      getCellNode = _ref.getCellNode,\n      getCellDate = _ref.getCellDate,\n      titleCell = _ref.titleCell,\n      headerCells = _ref.headerCells;\n\n  var _React$useContext = React.useContext(PanelContext),\n      onDateMouseEnter = _React$useContext.onDateMouseEnter,\n      onDateMouseLeave = _React$useContext.onDateMouseLeave;\n\n  var cellPrefixCls = \"\".concat(prefixCls, \"-cell\"); // =============================== Body ===============================\n\n  var rows = [];\n\n  for (var i = 0; i < rowNum; i += 1) {\n    var row = [];\n    var rowStartDate = void 0;\n\n    var _loop = function _loop(j) {\n      var offset = i * colNum + j;\n      var currentDate = getCellDate(baseDate, offset);\n      var disabled = disabledDate && disabledDate(currentDate);\n\n      if (j === 0) {\n        rowStartDate = currentDate;\n\n        if (prefixColumn) {\n          row.push(prefixColumn(rowStartDate));\n        }\n      }\n\n      row.push(React.createElement(\"td\", {\n        key: j,\n        title: titleCell && titleCell(currentDate),\n        className: classNames(cellPrefixCls, _objectSpread(_defineProperty({}, \"\".concat(cellPrefixCls, \"-disabled\"), disabled), getCellClassName(currentDate))),\n        onClick: function onClick() {\n          if (!disabled) {\n            onSelect(currentDate);\n          }\n        },\n        onMouseEnter: function onMouseEnter() {\n          if (!disabled && onDateMouseEnter) {\n            onDateMouseEnter(currentDate);\n          }\n        },\n        onMouseLeave: function onMouseLeave() {\n          if (!disabled && onDateMouseLeave) {\n            onDateMouseLeave(currentDate);\n          }\n        }\n      }, getCellNode ? getCellNode(currentDate) : React.createElement(\"div\", {\n        className: \"\".concat(cellPrefixCls, \"-inner\")\n      }, getCellText(currentDate))));\n    };\n\n    for (var j = 0; j < colNum; j += 1) {\n      _loop(j);\n    }\n\n    rows.push(React.createElement(\"tr\", {\n      key: i,\n      className: rowClassName && rowClassName(rowStartDate)\n    }, row));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-body\")\n  }, React.createElement(\"table\", {\n    className: \"\".concat(prefixCls, \"-content\")\n  }, headerCells && React.createElement(\"thead\", null, React.createElement(\"tr\", null, headerCells)), React.createElement(\"tbody\", null, rows)));\n}","map":null,"metadata":{},"sourceType":"module"}