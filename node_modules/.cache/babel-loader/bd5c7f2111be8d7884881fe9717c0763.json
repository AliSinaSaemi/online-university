{"ast":null,"code":"ace.define(\"ace/mode/haskell_cabal_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var CabalHighlightRules = function CabalHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"^\\\\s*--.*$\"\n      }, {\n        token: [\"keyword\"],\n        regex: /^(\\s*\\w.*?)(:(?:\\s+|$))/\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: /[\\d_]+(?:(?:[\\.\\d_]*)?)/\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n      }, {\n        token: \"markup.heading\",\n        regex: /^(\\w.*)$/\n      }]\n    };\n  };\n\n  oop.inherits(CabalHighlightRules, TextHighlightRules);\n  exports.CabalHighlightRules = CabalHighlightRules;\n});\nace.define(\"ace/mode/folding/haskell_cabal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var Range = require(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.isHeading = function (session, row) {\n      var heading = \"markup.heading\";\n      var token = session.getTokens(row)[0];\n      return row == 0 || token && token.type.lastIndexOf(heading, 0) === 0;\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      if (this.isHeading(session, row)) {\n        return \"start\";\n      } else if (foldStyle === \"markbeginend\" && !/^\\s*$/.test(session.getLine(row))) {\n        var maxRow = session.getLength();\n\n        while (++row < maxRow) {\n          if (!/^\\s*$/.test(session.getLine(row))) {\n            break;\n          }\n        }\n\n        if (row == maxRow || this.isHeading(session, row)) {\n          return \"end\";\n        }\n      }\n\n      return \"\";\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      if (this.isHeading(session, row)) {\n        while (++row < maxRow) {\n          if (this.isHeading(session, row)) {\n            row--;\n            break;\n          }\n        }\n\n        endRow = row;\n\n        if (endRow > startRow) {\n          while (endRow > startRow && /^\\s*$/.test(session.getLine(endRow))) {\n            endRow--;\n          }\n        }\n\n        if (endRow > startRow) {\n          var endColumn = session.getLine(endRow).length;\n          return new Range(startRow, startColumn, endRow, endColumn);\n        }\n      } else if (this.getFoldWidget(session, foldStyle, row) === \"end\") {\n        var endRow = row;\n        var endColumn = session.getLine(endRow).length;\n\n        while (--row >= 0) {\n          if (this.isHeading(session, row)) {\n            break;\n          }\n        }\n\n        var line = session.getLine(row);\n        var startColumn = line.length;\n        return new Range(row, startColumn, endRow, endColumn);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/haskell_cabal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/haskell_cabal_highlight_rules\", \"ace/mode/folding/haskell_cabal\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var CabalHighlightRules = require(\"./haskell_cabal_highlight_rules\").CabalHighlightRules;\n\n  var FoldMode = require(\"./folding/haskell_cabal\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = CabalHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell_cabal\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/haskell_cabal\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}