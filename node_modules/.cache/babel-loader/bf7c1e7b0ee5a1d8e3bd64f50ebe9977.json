{"ast":null,"code":"ace.define(\"ace/mode/yaml_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var YamlHighlightRules = function YamlHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"list.markup\",\n        regex: /^(?:-{3}|\\.{3})\\s*(?=#|$)/\n      }, {\n        token: \"list.markup\",\n        regex: /^\\s*[\\-?](?:$|\\s)/\n      }, {\n        token: \"constant\",\n        regex: \"!![\\\\w//]+\"\n      }, {\n        token: \"constant.language\",\n        regex: \"[&\\\\*][a-zA-Z0-9-_]+\"\n      }, {\n        token: [\"meta.tag\", \"keyword\"],\n        regex: /^(\\s*\\w.*?)(:(?=\\s|$))/\n      }, {\n        token: [\"meta.tag\", \"keyword\"],\n        regex: /(\\w+?)(\\s*:(?=\\s|$))/\n      }, {\n        token: \"keyword.operator\",\n        regex: \"<<\\\\w*:\\\\w*\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"-\\\\s*(?=[{])\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: /[|>][-+\\d]*(?:$|\\s+(?:$|#))/,\n        onMatch: function onMatch(val, state, stack, line) {\n          line = line.replace(/ #.*/, \"\");\n          var indent = /^ *((:\\s*)?-(\\s*[^|>])?)?/.exec(line)[0].replace(/\\S\\s*$/, \"\").length;\n          var indentationIndicator = parseInt(/\\d+[\\s+-]*$/.exec(line));\n\n          if (indentationIndicator) {\n            indent += indentationIndicator - 1;\n            this.next = \"mlString\";\n          } else {\n            this.next = \"mlStringPre\";\n          }\n\n          if (!stack.length) {\n            stack.push(this.next);\n            stack.push(indent);\n          } else {\n            stack[0] = this.next;\n            stack[1] = indent;\n          }\n\n          return this.token;\n        },\n        next: \"mlString\"\n      }, {\n        token: \"string\",\n        // single quoted string\n        regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: /(\\b|[+\\-\\.])[\\d_]+(?:(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)(?=[^\\d-\\w]|$)/\n      }, {\n        token: \"constant.numeric\",\n        // other number\n        regex: /[+\\-]?\\.inf\\b|NaN\\b|0x[\\dA-Fa-f_]+|0b[10_]+/\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"\\\\b(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: /[^\\s,:\\[\\]\\{\\}]+/\n      }],\n      \"mlStringPre\": [{\n        token: \"indent\",\n        regex: /^ *$/\n      }, {\n        token: \"indent\",\n        regex: /^ */,\n        onMatch: function onMatch(val, state, stack) {\n          var curIndent = stack[1];\n\n          if (curIndent >= val.length) {\n            this.next = \"start\";\n            stack.shift();\n            stack.shift();\n          } else {\n            stack[1] = val.length - 1;\n            this.next = stack[0] = \"mlString\";\n          }\n\n          return this.token;\n        },\n        next: \"mlString\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"mlString\": [{\n        token: \"indent\",\n        regex: /^ *$/\n      }, {\n        token: \"indent\",\n        regex: /^ */,\n        onMatch: function onMatch(val, state, stack) {\n          var curIndent = stack[1];\n\n          if (curIndent >= val.length) {\n            this.next = \"start\";\n            stack.splice(0);\n          } else {\n            this.next = \"mlString\";\n          }\n\n          return this.token;\n        },\n        next: \"mlString\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(YamlHighlightRules, TextHighlightRules);\n  exports.YamlHighlightRules = YamlHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var Range = require(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/yaml\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/yaml_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/folding/coffee\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var YamlHighlightRules = require(\"./yaml_highlight_rules\").YamlHighlightRules;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = YamlHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = [\"#\"];\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/yaml\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/yaml\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}