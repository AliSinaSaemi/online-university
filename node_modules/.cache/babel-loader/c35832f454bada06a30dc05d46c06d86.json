{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport Animate from 'rc-animate';\nimport omit from 'omit.js';\nimport classNames from 'classnames';\nimport ScrollNumber from './ScrollNumber';\nimport { PresetColorTypes } from '../_util/colors';\nimport { ConfigConsumer } from '../config-provider';\n\nfunction isPresetColor(color) {\n  return PresetColorTypes.indexOf(color) !== -1;\n}\n\nvar Badge = function Badge(props) {\n  var getNumberedDisplayCount = function getNumberedDisplayCount() {\n    var count = props.count,\n        overflowCount = props.overflowCount;\n    var displayCount = count > overflowCount ? \"\".concat(overflowCount, \"+\") : count;\n    return displayCount;\n  };\n\n  var hasStatus = function hasStatus() {\n    var status = props.status,\n        color = props.color;\n    return !!status || !!color;\n  };\n\n  var isZero = function isZero() {\n    var numberedDisplayCount = getNumberedDisplayCount();\n    return numberedDisplayCount === '0' || numberedDisplayCount === 0;\n  };\n\n  var isDot = function isDot() {\n    var dot = props.dot;\n    return dot && !isZero() || hasStatus();\n  };\n\n  var getDisplayCount = function getDisplayCount() {\n    // dot mode don't need count\n    if (isDot()) {\n      return '';\n    }\n\n    return getNumberedDisplayCount();\n  };\n\n  var getScrollNumberTitle = function getScrollNumberTitle() {\n    var title = props.title,\n        count = props.count;\n\n    if (title) {\n      return title;\n    }\n\n    return typeof count === 'string' || typeof count === 'number' ? count : undefined;\n  };\n\n  var getStyleWithOffset = function getStyleWithOffset() {\n    var offset = props.offset,\n        style = props.style;\n    return offset ? _extends({\n      right: -parseInt(offset[0], 10),\n      marginTop: offset[1]\n    }, style) : style;\n  };\n\n  var getBadgeClassName = function getBadgeClassName(prefixCls) {\n    var _classNames;\n\n    var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ltr';\n    var className = props.className,\n        children = props.children;\n    return classNames(className, prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-status\"), hasStatus()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-wrapper\"), !children), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames));\n  };\n\n  var isHidden = function isHidden() {\n    var showZero = props.showZero;\n    var displayCount = getDisplayCount();\n    var isEmpty = displayCount === null || displayCount === undefined || displayCount === '';\n    return (isEmpty || isZero() && !showZero) && !isDot();\n  };\n\n  var renderStatusText = function renderStatusText(prefixCls) {\n    var text = props.text;\n    var hidden = isHidden();\n    return hidden || !text ? null : /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-status-text\")\n    }, text);\n  };\n\n  var renderDisplayComponent = function renderDisplayComponent() {\n    var count = props.count;\n    var customNode = count;\n\n    if (!customNode || _typeof(customNode) !== 'object') {\n      return undefined;\n    }\n\n    return React.cloneElement(customNode, {\n      style: _extends(_extends({}, getStyleWithOffset()), customNode.props && customNode.props.style)\n    });\n  };\n\n  var renderBadgeNumber = function renderBadgeNumber(prefixCls, scrollNumberPrefixCls) {\n    var _classNames2;\n\n    var status = props.status,\n        count = props.count,\n        color = props.color;\n    var displayCount = getDisplayCount();\n    var dot = isDot();\n    var hidden = isHidden();\n    var scrollNumberCls = classNames((_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-dot\"), dot), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-count\"), !dot), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-multiple-words\"), !dot && count && count.toString && count.toString().length > 1), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-status-\").concat(status), !!status), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-status-\").concat(color), isPresetColor(color)), _classNames2));\n    var statusStyle = getStyleWithOffset();\n\n    if (color && !isPresetColor(color)) {\n      statusStyle = statusStyle || {};\n      statusStyle.background = color;\n    }\n\n    return hidden ? null : /*#__PURE__*/React.createElement(ScrollNumber, {\n      prefixCls: scrollNumberPrefixCls,\n      \"data-show\": !hidden,\n      className: scrollNumberCls,\n      count: displayCount,\n      displayComponent: renderDisplayComponent() // <Badge status=\"success\" count={<Icon type=\"xxx\" />}></Badge>\n      ,\n      title: getScrollNumberTitle(),\n      style: statusStyle,\n      key: \"scrollNumber\"\n    });\n  };\n\n  var renderBadge = function renderBadge(_ref) {\n    var _classNames3;\n\n    var getPrefixCls = _ref.getPrefixCls,\n        direction = _ref.direction;\n\n    var customizePrefixCls = props.prefixCls,\n        customizeScrollNumberPrefixCls = props.scrollNumberPrefixCls,\n        children = props.children,\n        status = props.status,\n        text = props.text,\n        color = props.color,\n        restProps = __rest(props, [\"prefixCls\", \"scrollNumberPrefixCls\", \"children\", \"status\", \"text\", \"color\"]);\n\n    var omitArr = ['count', 'showZero', 'overflowCount', 'className', 'style', 'dot', 'offset', 'title'];\n    var prefixCls = getPrefixCls('badge', customizePrefixCls);\n    var scrollNumberPrefixCls = getPrefixCls('scroll-number', customizeScrollNumberPrefixCls);\n    var scrollNumber = renderBadgeNumber(prefixCls, scrollNumberPrefixCls);\n    var statusText = renderStatusText(prefixCls);\n    var statusCls = classNames((_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-status-dot\"), hasStatus()), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-status-\").concat(status), !!status), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-status-\").concat(color), isPresetColor(color)), _classNames3));\n    var statusStyle = {};\n\n    if (color && !isPresetColor(color)) {\n      statusStyle.background = color;\n    } // <Badge status=\"success\" />\n\n\n    if (!children && hasStatus()) {\n      var styleWithOffset = getStyleWithOffset();\n      var statusTextColor = styleWithOffset && styleWithOffset.color;\n      return /*#__PURE__*/React.createElement(\"span\", _extends({}, omit(restProps, omitArr), {\n        className: getBadgeClassName(prefixCls, direction),\n        style: styleWithOffset\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: statusCls,\n        style: statusStyle\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: statusTextColor\n        },\n        className: \"\".concat(prefixCls, \"-status-text\")\n      }, text));\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", _extends({}, omit(restProps, omitArr), {\n      className: getBadgeClassName(prefixCls, direction)\n    }), children, /*#__PURE__*/React.createElement(Animate, {\n      component: \"\",\n      showProp: \"data-show\",\n      transitionName: children ? \"\".concat(prefixCls, \"-zoom\") : '',\n      transitionAppear: true\n    }, scrollNumber), statusText);\n  };\n\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, renderBadge);\n};\n\nBadge.defaultProps = {\n  count: null,\n  showZero: false,\n  dot: false,\n  overflowCount: 99\n};\nexport default Badge;","map":null,"metadata":{},"sourceType":"module"}