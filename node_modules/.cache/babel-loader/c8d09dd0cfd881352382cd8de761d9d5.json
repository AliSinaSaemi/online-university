{"ast":null,"code":"ace.define(\"ace/mode/vala_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var ValaHighlightRules = function ValaHighlightRules() {\n    this.$rules = {\n      start: [{\n        token: ['meta.using.vala', 'keyword.other.using.vala', 'meta.using.vala', 'storage.modifier.using.vala', 'meta.using.vala', 'punctuation.terminator.vala'],\n        regex: '^(\\\\s*)(using)\\\\b(?:(\\\\s*)([^ ;$]+)(\\\\s*)((?:;)?))?'\n      }, {\n        include: '#code'\n      }],\n      '#all-types': [{\n        include: '#primitive-arrays'\n      }, {\n        include: '#primitive-types'\n      }, {\n        include: '#object-types'\n      }],\n      '#annotations': [{\n        token: ['storage.type.annotation.vala', 'punctuation.definition.annotation-arguments.begin.vala'],\n        regex: '(@[^ (]+)(\\\\()',\n        push: [{\n          token: 'punctuation.definition.annotation-arguments.end.vala',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          token: ['constant.other.key.vala', 'text', 'keyword.operator.assignment.vala'],\n          regex: '(\\\\w*)(\\\\s*)(=)'\n        }, {\n          include: '#code'\n        }, {\n          token: 'punctuation.seperator.property.vala',\n          regex: ','\n        }, {\n          defaultToken: 'meta.declaration.annotation.vala'\n        }]\n      }, {\n        token: 'storage.type.annotation.vala',\n        regex: '@\\\\w*'\n      }],\n      '#anonymous-classes-and-new': [{\n        token: 'keyword.control.new.vala',\n        regex: '\\\\bnew\\\\b',\n        push_disabled: [{\n          token: 'text',\n          regex: '(?<=\\\\)|\\\\])(?!\\\\s*{)|(?<=})|(?=;)',\n          TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n          originalRegex: '(?<=\\\\)|\\\\])(?!\\\\s*{)|(?<=})|(?=;)',\n          next: 'pop'\n        }, {\n          token: ['storage.type.vala', 'text'],\n          regex: '(\\\\w+)(\\\\s*)(?=\\\\[)',\n          push: [{\n            token: 'text',\n            regex: '}|(?=;|\\\\))',\n            next: 'pop'\n          }, {\n            token: 'text',\n            regex: '\\\\[',\n            push: [{\n              token: 'text',\n              regex: '\\\\]',\n              next: 'pop'\n            }, {\n              include: '#code'\n            }]\n          }, {\n            token: 'text',\n            regex: '{',\n            push: [{\n              token: 'text',\n              regex: '(?=})',\n              next: 'pop'\n            }, {\n              include: '#code'\n            }]\n          }]\n        }, {\n          token: 'text',\n          regex: '(?=\\\\w.*\\\\()',\n          push: [{\n            token: 'text',\n            regex: '(?<=\\\\))',\n            TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n            originalRegex: '(?<=\\\\))',\n            next: 'pop'\n          }, {\n            include: '#object-types'\n          }, {\n            token: 'text',\n            regex: '\\\\(',\n            push: [{\n              token: 'text',\n              regex: '\\\\)',\n              next: 'pop'\n            }, {\n              include: '#code'\n            }]\n          }]\n        }, {\n          token: 'meta.inner-class.vala',\n          regex: '{',\n          push: [{\n            token: 'meta.inner-class.vala',\n            regex: '}',\n            next: 'pop'\n          }, {\n            include: '#class-body'\n          }, {\n            defaultToken: 'meta.inner-class.vala'\n          }]\n        }]\n      }],\n      '#assertions': [{\n        token: ['keyword.control.assert.vala', 'meta.declaration.assertion.vala'],\n        regex: '\\\\b(assert|requires|ensures)(\\\\s)',\n        push: [{\n          token: 'meta.declaration.assertion.vala',\n          regex: '$',\n          next: 'pop'\n        }, {\n          token: 'keyword.operator.assert.expression-seperator.vala',\n          regex: ':'\n        }, {\n          include: '#code'\n        }, {\n          defaultToken: 'meta.declaration.assertion.vala'\n        }]\n      }],\n      '#class': [{\n        token: 'meta.class.vala',\n        regex: '(?=\\\\w?[\\\\w\\\\s]*(?:class|(?:@)?interface|enum|struct|namespace)\\\\s+\\\\w+)',\n        push: [{\n          token: 'paren.vala',\n          regex: '}',\n          next: 'pop'\n        }, {\n          include: '#storage-modifiers'\n        }, {\n          include: '#comments'\n        }, {\n          token: ['storage.modifier.vala', 'meta.class.identifier.vala', 'entity.name.type.class.vala'],\n          regex: '(class|(?:@)?interface|enum|struct|namespace)(\\\\s+)([\\\\w\\\\.]+)'\n        }, {\n          token: 'storage.modifier.extends.vala',\n          regex: ':',\n          push: [{\n            token: 'meta.definition.class.inherited.classes.vala',\n            regex: '(?={|,)',\n            next: 'pop'\n          }, {\n            include: '#object-types-inherited'\n          }, {\n            include: '#comments'\n          }, {\n            defaultToken: 'meta.definition.class.inherited.classes.vala'\n          }]\n        }, {\n          token: ['storage.modifier.implements.vala', 'meta.definition.class.implemented.interfaces.vala'],\n          regex: '(,)(\\\\s)',\n          push: [{\n            token: 'meta.definition.class.implemented.interfaces.vala',\n            regex: '(?=\\\\{)',\n            next: 'pop'\n          }, {\n            include: '#object-types-inherited'\n          }, {\n            include: '#comments'\n          }, {\n            defaultToken: 'meta.definition.class.implemented.interfaces.vala'\n          }]\n        }, {\n          token: 'paren.vala',\n          regex: '{',\n          push: [{\n            token: 'paren.vala',\n            regex: '(?=})',\n            next: 'pop'\n          }, {\n            include: '#class-body'\n          }, {\n            defaultToken: 'meta.class.body.vala'\n          }]\n        }, {\n          defaultToken: 'meta.class.vala'\n        }],\n        comment: 'attempting to put namespace in here.'\n      }],\n      '#class-body': [{\n        include: '#comments'\n      }, {\n        include: '#class'\n      }, {\n        include: '#enums'\n      }, {\n        include: '#methods'\n      }, {\n        include: '#annotations'\n      }, {\n        include: '#storage-modifiers'\n      }, {\n        include: '#code'\n      }],\n      '#code': [{\n        include: '#comments'\n      }, {\n        include: '#class'\n      }, {\n        token: 'text',\n        regex: '{',\n        push: [{\n          token: 'text',\n          regex: '}',\n          next: 'pop'\n        }, {\n          include: '#code'\n        }]\n      }, {\n        include: '#assertions'\n      }, {\n        include: '#parens'\n      }, {\n        include: '#constants-and-special-vars'\n      }, {\n        include: '#anonymous-classes-and-new'\n      }, {\n        include: '#keywords'\n      }, {\n        include: '#storage-modifiers'\n      }, {\n        include: '#strings'\n      }, {\n        include: '#all-types'\n      }],\n      '#comments': [{\n        token: 'punctuation.definition.comment.vala',\n        regex: '/\\\\*\\\\*/'\n      }, {\n        include: 'text.html.javadoc'\n      }, {\n        include: '#comments-inline'\n      }],\n      '#comments-inline': [{\n        token: 'punctuation.definition.comment.vala',\n        regex: '/\\\\*',\n        push: [{\n          token: 'punctuation.definition.comment.vala',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.vala'\n        }]\n      }, {\n        token: ['text', 'punctuation.definition.comment.vala', 'comment.line.double-slash.vala'],\n        regex: '(\\\\s*)(//)(.*$)'\n      }],\n      '#constants-and-special-vars': [{\n        token: 'constant.language.vala',\n        regex: '\\\\b(?:true|false|null)\\\\b'\n      }, {\n        token: 'variable.language.vala',\n        regex: '\\\\b(?:this|base)\\\\b'\n      }, {\n        token: 'constant.numeric.vala',\n        regex: '\\\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\\\.?[0-9]*|\\\\.[0-9]+)(?:(?:e|E)(?:\\\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\\\b'\n      }, {\n        token: ['keyword.operator.dereference.vala', 'constant.other.vala'],\n        regex: '((?:\\\\.)?)\\\\b([A-Z][A-Z0-9_]+)(?!<|\\\\.class|\\\\s*\\\\w+\\\\s*=)\\\\b'\n      }],\n      '#enums': [{\n        token: 'text',\n        regex: '^(?=\\\\s*[A-Z0-9_]+\\\\s*(?:{|\\\\(|,))',\n        push: [{\n          token: 'text',\n          regex: '(?=;|})',\n          next: 'pop'\n        }, {\n          token: 'constant.other.enum.vala',\n          regex: '\\\\w+',\n          push: [{\n            token: 'meta.enum.vala',\n            regex: '(?=,|;|})',\n            next: 'pop'\n          }, {\n            include: '#parens'\n          }, {\n            token: 'text',\n            regex: '{',\n            push: [{\n              token: 'text',\n              regex: '}',\n              next: 'pop'\n            }, {\n              include: '#class-body'\n            }]\n          }, {\n            defaultToken: 'meta.enum.vala'\n          }]\n        }]\n      }],\n      '#keywords': [{\n        token: 'keyword.control.catch-exception.vala',\n        regex: '\\\\b(?:try|catch|finally|throw)\\\\b'\n      }, {\n        token: 'keyword.control.vala',\n        regex: '\\\\?|:|\\\\?\\\\?'\n      }, {\n        token: 'keyword.control.vala',\n        regex: '\\\\b(?:return|break|case|continue|default|do|while|for|foreach|switch|if|else|in|yield|get|set|value)\\\\b'\n      }, {\n        token: 'keyword.operator.vala',\n        regex: '\\\\b(?:typeof|is|as)\\\\b'\n      }, {\n        token: 'keyword.operator.comparison.vala',\n        regex: '==|!=|<=|>=|<>|<|>'\n      }, {\n        token: 'keyword.operator.assignment.vala',\n        regex: '='\n      }, {\n        token: 'keyword.operator.increment-decrement.vala',\n        regex: '\\\\-\\\\-|\\\\+\\\\+'\n      }, {\n        token: 'keyword.operator.arithmetic.vala',\n        regex: '\\\\-|\\\\+|\\\\*|\\\\/|%'\n      }, {\n        token: 'keyword.operator.logical.vala',\n        regex: '!|&&|\\\\|\\\\|'\n      }, {\n        token: 'keyword.operator.dereference.vala',\n        regex: '\\\\.(?=\\\\S)',\n        originalRegex: '(?<=\\\\S)\\\\.(?=\\\\S)'\n      }, {\n        token: 'punctuation.terminator.vala',\n        regex: ';'\n      }, {\n        token: 'keyword.operator.ownership',\n        regex: 'owned|unowned'\n      }],\n      '#methods': [{\n        token: 'meta.method.vala',\n        regex: '(?!new)(?=\\\\w.*\\\\s+)(?=[^=]+\\\\()',\n        push: [{\n          token: 'paren.vala',\n          regex: '}|(?=;)',\n          next: 'pop'\n        }, {\n          include: '#storage-modifiers'\n        }, {\n          token: ['entity.name.function.vala', 'meta.method.identifier.vala'],\n          regex: '([\\\\~\\\\w\\\\.]+)(\\\\s*\\\\()',\n          push: [{\n            token: 'meta.method.identifier.vala',\n            regex: '\\\\)',\n            next: 'pop'\n          }, {\n            include: '#parameters'\n          }, {\n            defaultToken: 'meta.method.identifier.vala'\n          }]\n        }, {\n          token: 'meta.method.return-type.vala',\n          regex: '(?=\\\\w.*\\\\s+\\\\w+\\\\s*\\\\()',\n          push: [{\n            token: 'meta.method.return-type.vala',\n            regex: '(?=\\\\w+\\\\s*\\\\()',\n            next: 'pop'\n          }, {\n            include: '#all-types'\n          }, {\n            defaultToken: 'meta.method.return-type.vala'\n          }]\n        }, {\n          include: '#throws'\n        }, {\n          token: 'paren.vala',\n          regex: '{',\n          push: [{\n            token: 'paren.vala',\n            regex: '(?=})',\n            next: 'pop'\n          }, {\n            include: '#code'\n          }, {\n            defaultToken: 'meta.method.body.vala'\n          }]\n        }, {\n          defaultToken: 'meta.method.vala'\n        }]\n      }],\n      '#namespace': [{\n        token: 'text',\n        regex: '^(?=\\\\s*[A-Z0-9_]+\\\\s*(?:{|\\\\(|,))',\n        push: [{\n          token: 'text',\n          regex: '(?=;|})',\n          next: 'pop'\n        }, {\n          token: 'constant.other.namespace.vala',\n          regex: '\\\\w+',\n          push: [{\n            token: 'meta.namespace.vala',\n            regex: '(?=,|;|})',\n            next: 'pop'\n          }, {\n            include: '#parens'\n          }, {\n            token: 'text',\n            regex: '{',\n            push: [{\n              token: 'text',\n              regex: '}',\n              next: 'pop'\n            }, {\n              include: '#code'\n            }]\n          }, {\n            defaultToken: 'meta.namespace.vala'\n          }]\n        }],\n        comment: 'This is not quite right. See the class grammar right now'\n      }],\n      '#object-types': [{\n        token: 'storage.type.generic.vala',\n        regex: '\\\\b(?:[a-z]\\\\w*\\\\.)*[A-Z]+\\\\w*<',\n        push: [{\n          token: 'storage.type.generic.vala',\n          regex: '>|[^\\\\w\\\\s,\\\\?<\\\\[()\\\\]]',\n          TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n          originalRegex: '>|[^\\\\w\\\\s,\\\\?<\\\\[(?:[,]+)\\\\]]',\n          next: 'pop'\n        }, {\n          include: '#object-types'\n        }, {\n          token: 'storage.type.generic.vala',\n          regex: '<',\n          push: [{\n            token: 'storage.type.generic.vala',\n            regex: '>|[^\\\\w\\\\s,\\\\[\\\\]<]',\n            next: 'pop'\n          }, {\n            defaultToken: 'storage.type.generic.vala'\n          }],\n          comment: 'This is just to support <>\\'s with no actual type prefix'\n        }, {\n          defaultToken: 'storage.type.generic.vala'\n        }]\n      }, {\n        token: 'storage.type.object.array.vala',\n        regex: '\\\\b(?:[a-z]\\\\w*\\\\.)*[A-Z]+\\\\w*(?=\\\\[)',\n        push: [{\n          token: 'storage.type.object.array.vala',\n          regex: '(?=[^\\\\]\\\\s])',\n          next: 'pop'\n        }, {\n          token: 'text',\n          regex: '\\\\[',\n          push: [{\n            token: 'text',\n            regex: '\\\\]',\n            next: 'pop'\n          }, {\n            include: '#code'\n          }]\n        }, {\n          defaultToken: 'storage.type.object.array.vala'\n        }]\n      }, {\n        token: ['storage.type.vala', 'keyword.operator.dereference.vala', 'storage.type.vala'],\n        regex: '\\\\b(?:([a-z]\\\\w*)(\\\\.))*([A-Z]+\\\\w*\\\\b)'\n      }],\n      '#object-types-inherited': [{\n        token: 'entity.other.inherited-class.vala',\n        regex: '\\\\b(?:[a-z]\\\\w*\\\\.)*[A-Z]+\\\\w*<',\n        push: [{\n          token: 'entity.other.inherited-class.vala',\n          regex: '>|[^\\\\w\\\\s,<]',\n          next: 'pop'\n        }, {\n          include: '#object-types'\n        }, {\n          token: 'storage.type.generic.vala',\n          regex: '<',\n          push: [{\n            token: 'storage.type.generic.vala',\n            regex: '>|[^\\\\w\\\\s,<]',\n            next: 'pop'\n          }, {\n            defaultToken: 'storage.type.generic.vala'\n          }],\n          comment: 'This is just to support <>\\'s with no actual type prefix'\n        }, {\n          defaultToken: 'entity.other.inherited-class.vala'\n        }]\n      }, {\n        token: ['entity.other.inherited-class.vala', 'keyword.operator.dereference.vala', 'entity.other.inherited-class.vala'],\n        regex: '\\\\b(?:([a-z]\\\\w*)(\\\\.))*([A-Z]+\\\\w*)'\n      }],\n      '#parameters': [{\n        token: 'storage.modifier.vala',\n        regex: 'final'\n      }, {\n        include: '#primitive-arrays'\n      }, {\n        include: '#primitive-types'\n      }, {\n        include: '#object-types'\n      }, {\n        token: 'variable.parameter.vala',\n        regex: '\\\\w+'\n      }],\n      '#parens': [{\n        token: 'text',\n        regex: '\\\\(',\n        push: [{\n          token: 'text',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#code'\n        }]\n      }],\n      '#primitive-arrays': [{\n        token: 'storage.type.primitive.array.vala',\n        regex: '\\\\b(?:bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|object|short|ushort|string|void|int8|int16|int32|int64|uint8|uint16|uint32|uint64)(?:\\\\[\\\\])*\\\\b'\n      }],\n      '#primitive-types': [{\n        token: 'storage.type.primitive.vala',\n        regex: '\\\\b(?:var|bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|object|short|ushort|string|void|signal|int8|int16|int32|int64|uint8|uint16|uint32|uint64)\\\\b',\n        comment: 'var is not really a primitive, but acts like one in most cases'\n      }],\n      '#storage-modifiers': [{\n        token: 'storage.modifier.vala',\n        regex: '\\\\b(?:public|private|protected|internal|static|final|sealed|virtual|override|abstract|readonly|volatile|dynamic|async|unsafe|out|ref|weak|owned|unowned|const)\\\\b',\n        comment: 'Not sure about unsafe and readonly'\n      }],\n      '#strings': [{\n        token: 'punctuation.definition.string.begin.vala',\n        regex: '@\"',\n        push: [{\n          token: 'punctuation.definition.string.end.vala',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.vala',\n          regex: '\\\\\\\\.|%[\\\\w\\\\.\\\\-]+|\\\\$(?:\\\\w+|\\\\([\\\\w\\\\s\\\\+\\\\-\\\\*\\\\/]+\\\\))'\n        }, {\n          defaultToken: 'string.quoted.interpolated.vala'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin.vala',\n        regex: '\"',\n        push: [{\n          token: 'punctuation.definition.string.end.vala',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.vala',\n          regex: '\\\\\\\\.'\n        }, {\n          token: 'constant.character.escape.vala',\n          regex: '%[\\\\w\\\\.\\\\-]+'\n        }, {\n          defaultToken: 'string.quoted.double.vala'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin.vala',\n        regex: '\\'',\n        push: [{\n          token: 'punctuation.definition.string.end.vala',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.vala',\n          regex: '\\\\\\\\.'\n        }, {\n          defaultToken: 'string.quoted.single.vala'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin.vala',\n        regex: '\"\"\"',\n        push: [{\n          token: 'punctuation.definition.string.end.vala',\n          regex: '\"\"\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.vala',\n          regex: '%[\\\\w\\\\.\\\\-]+'\n        }, {\n          defaultToken: 'string.quoted.triple.vala'\n        }]\n      }],\n      '#throws': [{\n        token: 'storage.modifier.vala',\n        regex: 'throws',\n        push: [{\n          token: 'meta.throwables.vala',\n          regex: '(?={|;)',\n          next: 'pop'\n        }, {\n          include: '#object-types'\n        }, {\n          defaultToken: 'meta.throwables.vala'\n        }]\n      }],\n      '#values': [{\n        include: '#strings'\n      }, {\n        include: '#object-types'\n      }, {\n        include: '#constants-and-special-vars'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  ValaHighlightRules.metaData = {\n    comment: 'Based heavily on the Java bundle\\'s language syntax. TODO:\\n* Closures\\n* Delegates\\n* Properties: Better support for properties.\\n* Annotations\\n* Error domains\\n* Named arguments\\n* Array slicing, negative indexes, multidimensional\\n* construct blocks\\n* lock blocks?\\n* regex literals\\n* DocBlock syntax highlighting. (Currently importing javadoc)\\n* Folding rule for comments.\\n',\n    fileTypes: ['vala'],\n    foldingStartMarker: '(\\\\{\\\\s*(//.*)?$|^\\\\s*// \\\\{\\\\{\\\\{)',\n    foldingStopMarker: '^\\\\s*(\\\\}|// \\\\}\\\\}\\\\}$)',\n    name: 'Vala',\n    scopeName: 'source.vala'\n  };\n  oop.inherits(ValaHighlightRules, TextHighlightRules);\n  exports.ValaHighlightRules = ValaHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/vala\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/tokenizer\", \"ace/mode/vala_highlight_rules\", \"ace/mode/folding/cstyle\", \"ace/mode/behaviour/cstyle\", \"ace/mode/folding/cstyle\", \"ace/mode/matching_brace_outdent\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var Tokenizer = require(\"../tokenizer\").Tokenizer;\n\n  var ValaHighlightRules = require(\"./vala_highlight_rules\").ValaHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\n\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var Mode = function Mode() {\n    this.HighlightRules = ValaHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\" || state == \"no_regex\") {\n        var match = line.match(/^.*(?:\\bcase\\b.*:|[\\{\\(\\[])\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      } else if (state == \"doc-start\") {\n        if (endState == \"start\" || endState == \"no_regex\") {\n          return \"\";\n        }\n\n        var match = line.match(/^\\s*(\\/?)\\*/);\n\n        if (match) {\n          if (match[1]) {\n            indent += \" \";\n          }\n\n          indent += \"* \";\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/vala\";\n    this.snippetFileId = \"ace/snippets/vala\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/vala\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}