{"ast":null,"code":"ace.define(\"ace/mode/forth_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var ForthHighlightRules = function ForthHighlightRules() {\n    this.$rules = {\n      start: [{\n        include: '#forth'\n      }],\n      '#comment': [{\n        token: 'comment.line.double-dash.forth',\n        regex: '(?:^|\\\\s)--\\\\s.*$',\n        comment: 'line comments for iForth'\n      }, {\n        token: 'comment.line.backslash.forth',\n        regex: '(?:^|\\\\s)\\\\\\\\[\\\\s\\\\S]*$',\n        comment: 'ANSI line comment'\n      }, {\n        token: 'comment.line.backslash-g.forth',\n        regex: '(?:^|\\\\s)\\\\\\\\[Gg] .*$',\n        comment: 'gForth line comment'\n      }, {\n        token: 'comment.block.forth',\n        regex: '(?:^|\\\\s)\\\\(\\\\*(?=\\\\s|$)',\n        push: [{\n          token: 'comment.block.forth',\n          regex: '(?:^|\\\\s)\\\\*\\\\)(?=\\\\s|$)',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.forth'\n        }],\n        comment: 'multiline comments for iForth'\n      }, {\n        token: 'comment.block.documentation.forth',\n        regex: '\\\\bDOC\\\\b',\n        caseInsensitive: true,\n        push: [{\n          token: 'comment.block.documentation.forth',\n          regex: '\\\\bENDDOC\\\\b',\n          caseInsensitive: true,\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.documentation.forth'\n        }],\n        comment: 'documentation comments for iForth'\n      }, {\n        token: 'comment.line.parentheses.forth',\n        regex: '(?:^|\\\\s)\\\\.?\\\\( [^)]*\\\\)',\n        comment: 'ANSI line comment'\n      }],\n      '#constant': [{\n        token: 'constant.language.forth',\n        regex: '(?:^|\\\\s)(?:TRUE|FALSE|BL|PI|CELL|C/L|R/O|W/O|R/W)(?=\\\\s|$)',\n        caseInsensitive: true\n      }, {\n        token: 'constant.numeric.forth',\n        regex: '(?:^|\\\\s)[$#%]?[-+]?[0-9]+(?:\\\\.[0-9]*e-?[0-9]+|\\\\.?[0-9a-fA-F]*)(?=\\\\s|$)'\n      }, {\n        token: 'constant.character.forth',\n        regex: '(?:^|\\\\s)(?:[&^]\\\\S|(?:\"|\\')\\\\S(?:\"|\\'))(?=\\\\s|$)'\n      }],\n      '#forth': [{\n        include: '#constant'\n      }, {\n        include: '#comment'\n      }, {\n        include: '#string'\n      }, {\n        include: '#word'\n      }, {\n        include: '#variable'\n      }, {\n        include: '#storage'\n      }, {\n        include: '#word-def'\n      }],\n      '#storage': [{\n        token: 'storage.type.forth',\n        regex: '(?:^|\\\\s)(?:2CONSTANT|2VARIABLE|ALIAS|CONSTANT|CREATE-INTERPRET/COMPILE[:]?|CREATE|DEFER|FCONSTANT|FIELD|FVARIABLE|USER|VALUE|VARIABLE|VOCABULARY)(?=\\\\s|$)',\n        caseInsensitive: true\n      }],\n      '#string': [{\n        token: 'string.quoted.double.forth',\n        regex: '(ABORT\" |BREAK\" |\\\\.\" |C\" |0\"|S\\\\\\\\?\" )([^\"]+\")',\n        caseInsensitive: true\n      }, {\n        token: 'string.unquoted.forth',\n        regex: '(?:INCLUDE|NEEDS|REQUIRE|USE)[ ]\\\\S+(?=\\\\s|$)',\n        caseInsensitive: true\n      }],\n      '#variable': [{\n        token: 'variable.language.forth',\n        regex: '\\\\b(?:I|J)\\\\b',\n        caseInsensitive: true\n      }],\n      '#word': [{\n        token: 'keyword.control.immediate.forth',\n        regex: '(?:^|\\\\s)\\\\[(?:\\\\?DO|\\\\+LOOP|AGAIN|BEGIN|DEFINED|DO|ELSE|ENDIF|FOR|IF|IFDEF|IFUNDEF|LOOP|NEXT|REPEAT|THEN|UNTIL|WHILE)\\\\](?=\\\\s|$)',\n        caseInsensitive: true\n      }, {\n        token: 'keyword.other.immediate.forth',\n        regex: '(?:^|\\\\s)(?:COMPILE-ONLY|IMMEDIATE|IS|RESTRICT|TO|WHAT\\'S|])(?=\\\\s|$)',\n        caseInsensitive: true\n      }, {\n        token: 'keyword.control.compile-only.forth',\n        regex: '(?:^|\\\\s)(?:-DO|\\\\-LOOP|\\\\?DO|\\\\?LEAVE|\\\\+DO|\\\\+LOOP|ABORT\\\\\"|AGAIN|AHEAD|BEGIN|CASE|DO|ELSE|ENDCASE|ENDIF|ENDOF|ENDTRY\\\\-IFERROR|ENDTRY|FOR|IF|IFERROR|LEAVE|LOOP|NEXT|RECOVER|REPEAT|RESTORE|THEN|TRY|U\\\\-DO|U\\\\+DO|UNTIL|WHILE)(?=\\\\s|$)',\n        caseInsensitive: true\n      }, {\n        token: 'keyword.other.compile-only.forth',\n        regex: '(?:^|\\\\s)(?:\\\\?DUP-0=-IF|\\\\?DUP-IF|\\\\)|\\\\[|\\\\[\\'\\\\]|\\\\[CHAR\\\\]|\\\\[COMPILE\\\\]|\\\\[IS\\\\]|\\\\[TO\\\\]|<COMPILATION|<INTERPRETATION|ASSERT\\\\(|ASSERT0\\\\(|ASSERT1\\\\(|ASSERT2\\\\(|ASSERT3\\\\(|COMPILATION>|DEFERS|DOES>|INTERPRETATION>|OF|POSTPONE)(?=\\\\s|$)',\n        caseInsensitive: true\n      }, {\n        token: 'keyword.other.non-immediate.forth',\n        regex: '(?:^|\\\\s)(?:\\'|<IS>|<TO>|CHAR|END-STRUCT|INCLUDE[D]?|LOAD|NEEDS|REQUIRE[D]?|REVISION|SEE|STRUCT|THRU|USE)(?=\\\\s|$)',\n        caseInsensitive: true\n      }, {\n        token: 'keyword.other.warning.forth',\n        regex: '(?:^|\\\\s)(?:~~|BREAK:|BREAK\"|DBG)(?=\\\\s|$)',\n        caseInsensitive: true\n      }],\n      '#word-def': [{\n        token: ['keyword.other.compile-only.forth', 'keyword.other.compile-only.forth', 'meta.block.forth', 'entity.name.function.forth'],\n        regex: '(:NONAME)|(^:|\\\\s:)(\\\\s)(\\\\S+)(?=\\\\s|$)',\n        caseInsensitive: true,\n        push: [{\n          token: 'keyword.other.compile-only.forth',\n          regex: ';(?:CODE)?',\n          caseInsensitive: true,\n          next: 'pop'\n        }, {\n          include: '#constant'\n        }, {\n          include: '#comment'\n        }, {\n          include: '#string'\n        }, {\n          include: '#word'\n        }, {\n          include: '#variable'\n        }, {\n          include: '#storage'\n        }, {\n          defaultToken: 'meta.block.forth'\n        }]\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  ForthHighlightRules.metaData = {\n    fileTypes: ['frt', 'fs', 'ldr', 'fth', '4th'],\n    foldingStartMarker: '/\\\\*\\\\*|\\\\{\\\\s*$',\n    foldingStopMarker: '\\\\*\\\\*/|^\\\\s*\\\\}',\n    keyEquivalent: '^~F',\n    name: 'Forth',\n    scopeName: 'source.forth'\n  };\n  oop.inherits(ForthHighlightRules, TextHighlightRules);\n  exports.ForthHighlightRules = ForthHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/forth\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/forth_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var ForthHighlightRules = require(\"./forth_highlight_rules\").ForthHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = ForthHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/forth\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/forth\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}