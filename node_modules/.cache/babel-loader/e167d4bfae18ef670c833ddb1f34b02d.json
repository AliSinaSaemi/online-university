{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport { conductExpandParent } from \"rc-tree/es/util\";\nimport { convertDataToEntities, convertTreeToData } from \"rc-tree/es/utils/treeUtil\";\nimport FileOutlined from '@ant-design/icons/FileOutlined';\nimport FolderOpenOutlined from '@ant-design/icons/FolderOpenOutlined';\nimport FolderOutlined from '@ant-design/icons/FolderOutlined';\nimport { ConfigContext } from '../config-provider';\nimport Tree from './Tree';\nimport { calcRangeKeys, convertDirectoryKeysToNodes } from './utils/dictUtil';\n\nfunction getIcon(props) {\n  var isLeaf = props.isLeaf,\n      expanded = props.expanded;\n\n  if (isLeaf) {\n    return /*#__PURE__*/React.createElement(FileOutlined, null);\n  }\n\n  return expanded ? /*#__PURE__*/React.createElement(FolderOpenOutlined, null) : /*#__PURE__*/React.createElement(FolderOutlined, null);\n}\n\nfunction getTreeData(_ref) {\n  var treeData = _ref.treeData,\n      children = _ref.children;\n  return treeData || convertTreeToData(children);\n}\n\nvar DirectoryTree = function DirectoryTree(_a) {\n  var defaultExpandAll = _a.defaultExpandAll,\n      defaultExpandParent = _a.defaultExpandParent,\n      defaultExpandedKeys = _a.defaultExpandedKeys,\n      props = __rest(_a, [\"defaultExpandAll\", \"defaultExpandParent\", \"defaultExpandedKeys\"]); // Shift click usage\n\n\n  var lastSelectedKey = React.useRef();\n  var cachedSelectedKeys = React.useRef();\n  var ref = React.createRef();\n\n  var getInitExpandedKeys = function getInitExpandedKeys() {\n    var _convertDataToEntitie = convertDataToEntities(getTreeData(props)),\n        keyEntities = _convertDataToEntitie.keyEntities;\n\n    var initExpandedKeys; // Expanded keys\n\n    if (defaultExpandAll) {\n      initExpandedKeys = Object.keys(keyEntities);\n    } else if (defaultExpandParent) {\n      initExpandedKeys = conductExpandParent(props.expandedKeys || defaultExpandedKeys, keyEntities);\n    } else {\n      initExpandedKeys = props.expandedKeys || defaultExpandedKeys;\n    }\n\n    return initExpandedKeys;\n  };\n\n  var _React$useState = React.useState(props.selectedKeys || props.defaultSelectedKeys || []),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedKeys = _React$useState2[0],\n      setSelectedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(getInitExpandedKeys()),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      expandedKeys = _React$useState4[0],\n      setExpandedKeys = _React$useState4[1];\n\n  React.useEffect(function () {\n    if ('selectedKeys' in props) {\n      setSelectedKeys(props.selectedKeys);\n    }\n  }, [props.selectedKeys]);\n  React.useEffect(function () {\n    if ('expandedKeys' in props) {\n      setExpandedKeys(props.expandedKeys);\n    }\n  }, [props.expandedKeys]);\n\n  var expandFolderNode = function expandFolderNode(event, node) {\n    var isLeaf = node.isLeaf;\n\n    if (isLeaf || event.shiftKey || event.metaKey || event.ctrlKey) {\n      return;\n    } // Call internal rc-tree expand function\n    // https://github.com/ant-design/ant-design/issues/12567\n\n\n    ref.current.onNodeExpand(event, node);\n  };\n\n  var onDebounceExpand = debounce(expandFolderNode, 200, {\n    leading: true\n  });\n\n  var onExpand = function onExpand(keys, info) {\n    if (!('expandedKeys' in props)) {\n      setExpandedKeys(keys);\n    } // Call origin function\n\n\n    if (props.onExpand) {\n      return props.onExpand(keys, info);\n    }\n\n    return undefined;\n  };\n\n  var onClick = function onClick(event, node) {\n    var expandAction = props.expandAction; // Expand the tree\n\n    if (expandAction === 'click') {\n      onDebounceExpand(event, node);\n    }\n\n    if (props.onClick) {\n      props.onClick(event, node);\n    }\n  };\n\n  var onDoubleClick = function onDoubleClick(event, node) {\n    var expandAction = props.expandAction; // Expand the tree\n\n    if (expandAction === 'doubleClick') {\n      onDebounceExpand(event, node);\n    }\n\n    if (props.onDoubleClick) {\n      props.onDoubleClick(event, node);\n    }\n  };\n\n  var onSelect = function onSelect(keys, event) {\n    var multiple = props.multiple;\n    var node = event.node,\n        nativeEvent = event.nativeEvent;\n    var _node$key = node.key,\n        key = _node$key === void 0 ? '' : _node$key;\n    var treeData = getTreeData(props); // const newState: DirectoryTreeState = {};\n    // We need wrap this event since some value is not same\n\n    var newEvent = _extends(_extends({}, event), {\n      selected: true\n    }); // Windows / Mac single pick\n\n\n    var ctrlPick = nativeEvent.ctrlKey || nativeEvent.metaKey;\n    var shiftPick = nativeEvent.shiftKey; // Generate new selected keys\n\n    var newSelectedKeys;\n\n    if (multiple && ctrlPick) {\n      // Control click\n      newSelectedKeys = keys;\n      lastSelectedKey.current = key;\n      cachedSelectedKeys.current = newSelectedKeys;\n      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);\n    } else if (multiple && shiftPick) {\n      // Shift click\n      newSelectedKeys = Array.from(new Set([].concat(_toConsumableArray(cachedSelectedKeys.current || []), _toConsumableArray(calcRangeKeys(treeData, expandedKeys, key, lastSelectedKey.current)))));\n      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);\n    } else {\n      // Single click\n      newSelectedKeys = [key];\n      lastSelectedKey.current = key;\n      cachedSelectedKeys.current = newSelectedKeys;\n      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);\n    }\n\n    if (props.onSelect) {\n      props.onSelect(newSelectedKeys, newEvent);\n    }\n\n    if (!('selectedKeys' in props)) {\n      setSelectedKeys(newSelectedKeys);\n    }\n  };\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      otherProps = __rest(props, [\"prefixCls\", \"className\"]);\n\n  var prefixCls = getPrefixCls('tree', customizePrefixCls);\n  var connectClassName = classNames(\"\".concat(prefixCls, \"-directory\"), className, _defineProperty({}, \"\".concat(prefixCls, \"-directory-rtl\"), direction === 'rtl'));\n  return /*#__PURE__*/React.createElement(Tree, _extends({\n    icon: getIcon,\n    ref: ref,\n    blockNode: true\n  }, otherProps, {\n    prefixCls: prefixCls,\n    className: connectClassName,\n    expandedKeys: expandedKeys,\n    selectedKeys: selectedKeys,\n    onSelect: onSelect,\n    onClick: onClick,\n    onDoubleClick: onDoubleClick,\n    onExpand: onExpand\n  }));\n};\n\nDirectoryTree.defaultProps = {\n  showIcon: true,\n  expandAction: 'click'\n};\nexport default DirectoryTree;","map":null,"metadata":{},"sourceType":"module"}