{"ast":null,"code":"import _classCallCheck from \"E:\\\\Developing Project\\\\Project - Pro\\\\Recent Projects\\\\026 - Daneshgah Magazi (New)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Developing Project\\\\Project - Pro\\\\Recent Projects\\\\026 - Daneshgah Magazi (New)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\Developing Project\\\\Project - Pro\\\\Recent Projects\\\\026 - Daneshgah Magazi (New)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\Developing Project\\\\Project - Pro\\\\Recent Projects\\\\026 - Daneshgah Magazi (New)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\Developing Project\\\\Project - Pro\\\\Recent Projects\\\\026 - Daneshgah Magazi (New)\\\\src\\\\views\\\\app\\\\applications\\\\chat.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport { Row } from \"reactstrap\";\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\nimport { getContacts, getConversations, changeConversation, addMessageToConversation } from \"../../../redux/actions\";\nimport ChatApplicationMenu from \"../../../containers/applications/ChatApplicationMenu\";\nimport ChatHeading from \"../../../components/applications/ChatHeading\";\nimport MessageCard from \"../../../components/applications/MessageCard\";\nimport SaySomething from \"../../../components/applications/SaySomething\";\n\nvar ChatApp = /*#__PURE__*/function (_Component) {\n  _inherits(ChatApp, _Component);\n\n  var _super = _createSuper(ChatApp);\n\n  function ChatApp(props) {\n    var _this;\n\n    _classCallCheck(this, ChatApp);\n\n    _this = _super.call(this, props);\n\n    _this.handleChatInputPress = function (e) {\n      if (e.key === \"Enter\") {\n        if (_this.state.messageInput.length > 0) {\n          _this.props.addMessageToConversation(_this.props.chatApp.currentUser.id, _this.props.chatApp.selectedUser.id, _this.state.messageInput, _this.props.chatApp.conversations);\n\n          _this.setState({\n            messageInput: \"\",\n            menuActiveTab: \"messages\"\n          });\n        }\n      }\n    };\n\n    _this.handleChatInputChange = function (e) {\n      _this.setState({\n        messageInput: e.target.value\n      });\n    };\n\n    _this.handleSendButtonClick = function () {\n      if (_this.state.messageInput.length > 0) {\n        _this.props.addMessageToConversation(_this.props.chatApp.currentUser.id, _this.props.chatApp.selectedUser.id, _this.state.messageInput, _this.props.chatApp.conversations);\n\n        _this.setState({\n          messageInput: \"\",\n          menuActiveTab: \"messages\"\n        });\n      }\n    };\n\n    _this.toggleAppMenu = function (tab) {\n      _this.setState({\n        menuActiveTab: tab\n      });\n    };\n\n    _this.state = {\n      menuActiveTab: \"messages\",\n      messageInput: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(ChatApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var currentUserId = 0;\n      this.props.getContacts();\n      this.props.getConversations(currentUserId);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.chatApp.loadingConversations && this.props.chatApp.loadingContacts && this.props.chatApp.selectedUser == null) {\n        this.props.changeConversation(this.props.chatApp.selectedUserId);\n      }\n\n      if (this._scrollBarRef) {\n        this._scrollBarRef._ps.element.scrollTop = this._scrollBarRef._ps.contentHeight;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props$chatApp = this.props.chatApp,\n          allContacts = _this$props$chatApp.allContacts,\n          conversations = _this$props$chatApp.conversations,\n          loadingConversations = _this$props$chatApp.loadingConversations,\n          loadingContacts = _this$props$chatApp.loadingContacts,\n          currentUser = _this$props$chatApp.currentUser,\n          selectedUser = _this$props$chatApp.selectedUser;\n      var _this$state = this.state,\n          menuActiveTab = _this$state.menuActiveTab,\n          messageInput = _this$state.messageInput;\n      var messages = this.props.intl.messages;\n      var selectedConversation = loadingConversations && loadingContacts && selectedUser ? conversations.find(function (x) {\n        return x.users.includes(currentUser.id) && x.users.includes(selectedUser.id);\n      }) : null;\n      return loadingConversations && loadingContacts ? /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"app-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Colxx, {\n        xxs: \"12\",\n        className: \"chat-app\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }, loadingConversations && selectedUser && /*#__PURE__*/React.createElement(ChatHeading, {\n        name: selectedUser.name,\n        thumb: selectedUser.thumb,\n        lastSeenDate: selectedUser.lastSeenDate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      }), selectedConversation && /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        ref: function ref(_ref) {\n          _this2._scrollBarRef = _ref;\n        },\n        containerRef: function containerRef(ref) {},\n        options: {\n          suppressScrollX: true,\n          wheelPropagation: false\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }\n      }, selectedConversation.messages.map(function (item, index) {\n        var sender = allContacts.find(function (x) {\n          return x.id === item.sender;\n        });\n        return /*#__PURE__*/React.createElement(MessageCard, {\n          key: index,\n          sender: sender,\n          item: item,\n          currentUserid: currentUser.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }\n        });\n      })))), /*#__PURE__*/React.createElement(SaySomething, {\n        placeholder: messages[\"chat.saysomething\"],\n        messageInput: messageInput,\n        handleChatInputPress: this.handleChatInputPress,\n        handleChatInputChange: this.handleChatInputChange,\n        handleSendButtonClick: this.handleSendButtonClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ChatApplicationMenu, {\n        activeTab: menuActiveTab,\n        toggleAppMenu: this.toggleAppMenu,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      })) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return ChatApp;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref2) {\n  var chatApp = _ref2.chatApp;\n  return {\n    chatApp: chatApp\n  };\n};\n\nexport default injectIntl(connect(mapStateToProps, {\n  getContacts: getContacts,\n  getConversations: getConversations,\n  changeConversation: changeConversation,\n  addMessageToConversation: addMessageToConversation\n})(ChatApp));","map":{"version":3,"sources":["E:/Developing Project/Project - Pro/Recent Projects/026 - Daneshgah Magazi (New)/src/views/app/applications/chat.js"],"names":["React","Component","Fragment","injectIntl","connect","PerfectScrollbar","Row","Colxx","getContacts","getConversations","changeConversation","addMessageToConversation","ChatApplicationMenu","ChatHeading","MessageCard","SaySomething","ChatApp","props","handleChatInputPress","e","key","state","messageInput","length","chatApp","currentUser","id","selectedUser","conversations","setState","menuActiveTab","handleChatInputChange","target","value","handleSendButtonClick","toggleAppMenu","tab","currentUserId","loadingConversations","loadingContacts","selectedUserId","_scrollBarRef","_ps","element","scrollTop","contentHeight","allContacts","messages","intl","selectedConversation","find","x","users","includes","name","thumb","lastSeenDate","ref","suppressScrollX","wheelPropagation","map","item","index","sender","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport { Row } from \"reactstrap\";\r\n\r\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\r\n\r\nimport {\r\n  getContacts,\r\n  getConversations,\r\n  changeConversation,\r\n  addMessageToConversation\r\n} from \"../../../redux/actions\";\r\nimport ChatApplicationMenu from \"../../../containers/applications/ChatApplicationMenu\";\r\nimport ChatHeading from \"../../../components/applications/ChatHeading\";\r\nimport MessageCard from \"../../../components/applications/MessageCard\";\r\nimport SaySomething from \"../../../components/applications/SaySomething\";\r\n\r\nclass ChatApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      menuActiveTab: \"messages\",\r\n      messageInput: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const currentUserId = 0;\r\n    this.props.getContacts();\r\n    this.props.getConversations(currentUserId);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (\r\n      this.props.chatApp.loadingConversations &&\r\n      this.props.chatApp.loadingContacts &&\r\n      this.props.chatApp.selectedUser == null\r\n    ) {\r\n      this.props.changeConversation(this.props.chatApp.selectedUserId);\r\n    }\r\n\r\n    if (this._scrollBarRef) {\r\n      this._scrollBarRef._ps.element.scrollTop = this._scrollBarRef._ps.contentHeight;\r\n    }\r\n  }\r\n\r\n  handleChatInputPress = e => {\r\n    if (e.key === \"Enter\") {\r\n      if (this.state.messageInput.length > 0) {\r\n        this.props.addMessageToConversation(\r\n          this.props.chatApp.currentUser.id,\r\n          this.props.chatApp.selectedUser.id,\r\n          this.state.messageInput,\r\n          this.props.chatApp.conversations\r\n        );\r\n        this.setState({\r\n          messageInput: \"\",\r\n          menuActiveTab: \"messages\"\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleChatInputChange = e => {\r\n    this.setState({\r\n      messageInput: e.target.value\r\n    });\r\n  };\r\n\r\n  handleSendButtonClick = () => {\r\n    if (this.state.messageInput.length > 0) {\r\n      this.props.addMessageToConversation(\r\n        this.props.chatApp.currentUser.id,\r\n        this.props.chatApp.selectedUser.id,\r\n        this.state.messageInput,\r\n        this.props.chatApp.conversations\r\n      );\r\n      this.setState({\r\n        messageInput: \"\",\r\n        menuActiveTab: \"messages\"\r\n      });\r\n    }\r\n  };\r\n\r\n  toggleAppMenu = tab => {\r\n    this.setState({\r\n      menuActiveTab: tab\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      allContacts,\r\n      conversations,\r\n      loadingConversations,\r\n      loadingContacts,\r\n      currentUser,\r\n      selectedUser\r\n    } = this.props.chatApp;\r\n\r\n    const { menuActiveTab, messageInput } = this.state;\r\n    const { messages } = this.props.intl;\r\n\r\n    const selectedConversation =\r\n      loadingConversations && loadingContacts && selectedUser\r\n        ? conversations.find(\r\n            x =>\r\n              x.users.includes(currentUser.id) &&\r\n              x.users.includes(selectedUser.id)\r\n          )\r\n        : null;\r\n    return loadingConversations && loadingContacts ? (\r\n      <Fragment>\r\n        <Row className=\"app-row\">\r\n          <Colxx xxs=\"12\" className=\"chat-app\">\r\n            {loadingConversations && selectedUser && (\r\n              <ChatHeading\r\n                name={selectedUser.name}\r\n                thumb={selectedUser.thumb}\r\n                lastSeenDate={selectedUser.lastSeenDate}\r\n              />\r\n            )}\r\n\r\n            {selectedConversation && (\r\n              <PerfectScrollbar\r\n                ref={ref => {\r\n                  this._scrollBarRef = ref;\r\n                }}\r\n                containerRef={ref => {}}\r\n                options={{ suppressScrollX: true, wheelPropagation: false }}>\r\n                {selectedConversation.messages.map((item, index) => {\r\n                  const sender = allContacts.find(x => x.id === item.sender);\r\n                  return (\r\n                    <MessageCard\r\n                      key={index}\r\n                      sender={sender}\r\n                      item={item}\r\n                      currentUserid={currentUser.id}\r\n                    />\r\n                  );\r\n                })}\r\n              </PerfectScrollbar>\r\n            )}\r\n          </Colxx>\r\n        </Row>\r\n        <SaySomething\r\n          placeholder={messages[\"chat.saysomething\"]}\r\n          messageInput={messageInput}\r\n          handleChatInputPress={this.handleChatInputPress}\r\n          handleChatInputChange={this.handleChatInputChange}\r\n          handleSendButtonClick={this.handleSendButtonClick}\r\n        />\r\n        <ChatApplicationMenu\r\n          activeTab={menuActiveTab}\r\n          toggleAppMenu={this.toggleAppMenu}\r\n        />\r\n      </Fragment>\r\n    ) : (\r\n      <div className=\"loading\" />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ chatApp }) => {\r\n  return { chatApp };\r\n};\r\nexport default injectIntl(\r\n  connect(\r\n    mapStateToProps,\r\n    {\r\n      getContacts,\r\n      getConversations,\r\n      changeConversation,\r\n      addMessageToConversation\r\n    }\r\n  )(ChatApp)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}