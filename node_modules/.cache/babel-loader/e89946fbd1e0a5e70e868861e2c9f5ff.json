{"ast":null,"code":"ace.define(\"ace/mode/io_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var IoHighlightRules = function IoHighlightRules() {\n    this.$rules = {\n      start: [{\n        token: 'keyword.control.io',\n        regex: '\\\\b(?:if|ifTrue|ifFalse|ifTrueIfFalse|for|loop|reverseForeach|foreach|map|continue|break|while|do|return)\\\\b'\n      }, {\n        token: 'punctuation.definition.comment.io',\n        regex: '/\\\\*',\n        push: [{\n          token: 'punctuation.definition.comment.io',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.io'\n        }]\n      }, {\n        token: 'punctuation.definition.comment.io',\n        regex: '//',\n        push: [{\n          token: 'comment.line.double-slash.io',\n          regex: '$',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.line.double-slash.io'\n        }]\n      }, {\n        token: 'punctuation.definition.comment.io',\n        regex: '#',\n        push: [{\n          token: 'comment.line.number-sign.io',\n          regex: '$',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.line.number-sign.io'\n        }]\n      }, {\n        token: 'variable.language.io',\n        regex: '\\\\b(?:self|sender|target|proto|protos|parent)\\\\b',\n        comment: 'I wonder if some of this isn\\'t variable.other.language? --Allan; scoping this as variable.language to match Objective-C\\'s handling of \\'self\\', which is inconsistent with C++\\'s handling of \\'this\\' but perhaps intentionally so -- Rob'\n      }, {\n        token: 'keyword.operator.io',\n        regex: '<=|>=|=|:=|\\\\*|\\\\||\\\\|\\\\||\\\\+|-|/|&|&&|>|<|\\\\?|@|@@|\\\\b(?:and|or)\\\\b'\n      }, {\n        token: 'constant.other.io',\n        regex: '\\\\bGL[\\\\w_]+\\\\b'\n      }, {\n        token: 'support.class.io',\n        regex: '\\\\b[A-Z](?:\\\\w+)?\\\\b'\n      }, {\n        token: 'support.function.io',\n        regex: '\\\\b(?:clone|call|init|method|list|vector|block|\\\\w+(?=\\\\s*\\\\())\\\\b'\n      }, {\n        token: 'support.function.open-gl.io',\n        regex: '\\\\bgl(?:u|ut)?[A-Z]\\\\w+\\\\b'\n      }, {\n        token: 'punctuation.definition.string.begin.io',\n        regex: '\"\"\"',\n        push: [{\n          token: 'punctuation.definition.string.end.io',\n          regex: '\"\"\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.io',\n          regex: '\\\\\\\\.'\n        }, {\n          defaultToken: 'string.quoted.triple.io'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin.io',\n        regex: '\"',\n        push: [{\n          token: 'punctuation.definition.string.end.io',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.io',\n          regex: '\\\\\\\\.'\n        }, {\n          defaultToken: 'string.quoted.double.io'\n        }]\n      }, {\n        token: 'constant.numeric.io',\n        regex: '\\\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\\\.?[0-9]*|\\\\.[0-9]+)(?:(?:e|E)(?:\\\\+|-)?[0-9]+)?)(?:L|l|UL|ul|u|U|F|f)?\\\\b'\n      }, {\n        token: 'variable.other.global.io',\n        regex: 'Lobby\\\\b'\n      }, {\n        token: 'constant.language.io',\n        regex: '\\\\b(?:TRUE|true|FALSE|false|NULL|null|Null|Nil|nil|YES|NO)\\\\b'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  IoHighlightRules.metaData = {\n    fileTypes: ['io'],\n    keyEquivalent: '^~I',\n    name: 'Io',\n    scopeName: 'source.io'\n  };\n  oop.inherits(IoHighlightRules, TextHighlightRules);\n  exports.IoHighlightRules = IoHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/io\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/io_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var IoHighlightRules = require(\"./io_highlight_rules\").IoHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = IoHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/io\";\n    this.snippetFileId = \"ace/snippets/io\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/io\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}