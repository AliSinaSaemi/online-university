{"ast":null,"code":"ace.define(\"ace/mode/tex_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var lang = require(\"../lib/lang\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var TexHighlightRules = function TexHighlightRules(textClass) {\n    if (!textClass) textClass = \"text\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"%.*$\"\n      }, {\n        token: textClass,\n        // non-command\n        regex: \"\\\\\\\\[$&%#\\\\{\\\\}]\"\n      }, {\n        token: \"keyword\",\n        // command\n        regex: \"\\\\\\\\(?:documentclass|usepackage|newcounter|setcounter|addtocounter|value|arabic|stepcounter|newenvironment|renewenvironment|ref|vref|eqref|pageref|label|cite[a-zA-Z]*|tag|begin|end|bibitem)\\\\b\",\n        next: \"nospell\"\n      }, {\n        token: \"keyword\",\n        // command\n        regex: \"\\\\\\\\(?:[a-zA-Z0-9]+|[^a-zA-Z0-9])\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: textClass,\n        regex: \"\\\\s+\"\n      }],\n      \"nospell\": [{\n        token: \"comment\",\n        regex: \"%.*$\",\n        next: \"start\"\n      }, {\n        token: \"nospell.\" + textClass,\n        // non-command\n        regex: \"\\\\\\\\[$&%#\\\\{\\\\}]\"\n      }, {\n        token: \"keyword\",\n        // command\n        regex: \"\\\\\\\\(?:documentclass|usepackage|newcounter|setcounter|addtocounter|value|arabic|stepcounter|newenvironment|renewenvironment|ref|vref|eqref|pageref|label|cite[a-zA-Z]*|tag|begin|end|bibitem)\\\\b\"\n      }, {\n        token: \"keyword\",\n        // command\n        regex: \"\\\\\\\\(?:[a-zA-Z0-9]+|[^a-zA-Z0-9])\",\n        next: \"start\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"[\\\\])]\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"}\",\n        next: \"start\"\n      }, {\n        token: \"nospell.\" + textClass,\n        regex: \"\\\\s+\"\n      }, {\n        token: \"nospell.\" + textClass,\n        regex: \"\\\\w+\"\n      }]\n    };\n  };\n\n  oop.inherits(TexHighlightRules, TextHighlightRules);\n  exports.TexHighlightRules = TexHighlightRules;\n});\nace.define(\"ace/mode/r_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/text_highlight_rules\", \"ace/mode/tex_highlight_rules\"], function (require, exports, module) {\n  var oop = require(\"../lib/oop\");\n\n  var lang = require(\"../lib/lang\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var TexHighlightRules = require(\"./tex_highlight_rules\").TexHighlightRules;\n\n  var RHighlightRules = function RHighlightRules() {\n    var keywords = lang.arrayToMap(\"function|if|in|break|next|repeat|else|for|return|switch|while|try|tryCatch|stop|warning|require|library|attach|detach|source|setMethod|setGeneric|setGroupGeneric|setClass\".split(\"|\"));\n    var buildinConstants = lang.arrayToMap((\"NULL|NA|TRUE|FALSE|T|F|Inf|NaN|NA_integer_|NA_real_|NA_character_|\" + \"NA_complex_\").split(\"|\"));\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.sectionhead\",\n        regex: \"#+(?!').*(?:----|====|####)\\\\s*$\"\n      }, {\n        token: \"comment\",\n        regex: \"#+'\",\n        next: \"rd-start\"\n      }, {\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: '[\"]',\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: \"[']\",\n        next: \"qstring\"\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+[Li]?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // explicit integer\n        regex: \"\\\\d+L\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // number\n        regex: \"\\\\d+(?:\\\\.\\\\d*)?(?:[eE][+\\\\-]?\\\\d*)?i?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // number with leading decimal\n        regex: \"\\\\.\\\\d+(?:[eE][+\\\\-]?\\\\d*)?i?\\\\b\"\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:TRUE|FALSE|T|F)\\\\b\"\n      }, {\n        token: \"identifier\",\n        regex: \"`.*?`\"\n      }, {\n        onMatch: function onMatch(value) {\n          if (keywords[value]) return \"keyword\";else if (buildinConstants[value]) return \"constant.language\";else if (value == '...' || value.match(/^\\.\\.\\d+$/)) return \"variable.language\";else return \"identifier\";\n        },\n        regex: \"[a-zA-Z.][a-zA-Z0-9._]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"%%|>=|<=|==|!=|\\\\->|<\\\\-|\\\\|\\\\||&&|=|\\\\+|\\\\-|\\\\*|/|\\\\^|>|<|!|&|\\\\||~|\\\\$|:\"\n      }, {\n        token: \"keyword.operator\",\n        // infix operators\n        regex: \"%.*?%\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"qqstring\": [{\n        token: \"string\",\n        regex: '(?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?\"',\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }],\n      \"qstring\": [{\n        token: \"string\",\n        regex: \"(?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?'\",\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }]\n    };\n    var rdRules = new TexHighlightRules(\"comment\").getRules();\n\n    for (var i = 0; i < rdRules[\"start\"].length; i++) {\n      rdRules[\"start\"][i].token += \".virtual-comment\";\n    }\n\n    this.addRules(rdRules, \"rd-\");\n    this.$rules[\"rd-start\"].unshift({\n      token: \"text\",\n      regex: \"^\",\n      next: \"start\"\n    });\n    this.$rules[\"rd-start\"].unshift({\n      token: \"keyword\",\n      regex: \"@(?!@)[^ ]*\"\n    });\n    this.$rules[\"rd-start\"].unshift({\n      token: \"comment\",\n      regex: \"@@\"\n    });\n    this.$rules[\"rd-start\"].push({\n      token: \"comment\",\n      regex: \"[^%\\\\\\\\[({\\\\])}]+\"\n    });\n  };\n\n  oop.inherits(RHighlightRules, TextHighlightRules);\n  exports.RHighlightRules = RHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/r\", [\"require\", \"exports\", \"module\", \"ace/unicode\", \"ace/range\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/text_highlight_rules\", \"ace/mode/r_highlight_rules\", \"ace/mode/matching_brace_outdent\"], function (require, exports, module) {\n  \"use strict\";\n\n  var unicode = require(\"../unicode\");\n\n  var Range = require(\"../range\").Range;\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var RHighlightRules = require(\"./r_highlight_rules\").RHighlightRules;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var Mode = function Mode() {\n    this.HighlightRules = RHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.tokenRe = new RegExp(\"^[\" + unicode.wordChars + \"._]+\", \"g\");\n    this.nonTokenRe = new RegExp(\"^(?:[^\" + unicode.wordChars + \"._]|\\s])+\", \"g\");\n    this.$id = \"ace/mode/r\";\n    this.snippetFileId = \"ace/snippets/r\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/r\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}