{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\Developing Project\\\\Project - Pro\\\\Recent Projects\\\\026 - Daneshgah Magazi (New)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\Developing Project\\\\Project - Pro\\\\Recent Projects\\\\026 - Daneshgah Magazi (New)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getSurveyDetailItems),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(deleteQuestion),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetDetail),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchDeleteQuestion),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { SURVEY_GET_DETAILS, SURVEY_DELETE_QUESTION } from '../actions';\nimport { getSurveyDetailSuccess, getSurveyDetailError, saveSurvey } from './actions';\nimport surveyDetailData from '../../data/survey.detail.json';\n\nvar getSurveyDetailRequest = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return new Promise(function (success, fail) {\n              setTimeout(function () {\n                success(surveyDetailData.data);\n              }, 1000);\n            }).then(function (response) {\n              return response;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getSurveyDetailRequest() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar deleteQuestionRequest = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(quesitonId, survey) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            survey.questions = survey.questions.filter(function (x) {\n              return x.id !== quesitonId;\n            });\n            _context2.next = 3;\n            return new Promise(function (success, fail) {\n              success(survey);\n            }).then(function (response) {\n              return response;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function deleteQuestionRequest(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction getSurveyDetailItems() {\n  var response;\n  return _regeneratorRuntime.wrap(function getSurveyDetailItems$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(getSurveyDetailRequest);\n\n        case 3:\n          response = _context3.sent;\n          _context3.next = 6;\n          return put(getSurveyDetailSuccess(response));\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put(getSurveyDetailError(_context3.t0));\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction deleteQuestion(_ref3) {\n  var payload, questionId, survey, response;\n  return _regeneratorRuntime.wrap(function deleteQuestion$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context4.prev = 1;\n          questionId = payload.questionId, survey = payload.survey;\n          _context4.next = 5;\n          return call(deleteQuestionRequest, questionId, survey);\n\n        case 5:\n          response = _context4.sent;\n          _context4.next = 8;\n          return put(saveSurvey(response));\n\n        case 8:\n          _context4.next = 14;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 14;\n          return put(getSurveyDetailError(_context4.t0));\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2, null, [[1, 10]]);\n}\n\nexport function watchGetDetail() {\n  return _regeneratorRuntime.wrap(function watchGetDetail$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(SURVEY_GET_DETAILS, getSurveyDetailItems);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function watchDeleteQuestion() {\n  return _regeneratorRuntime.wrap(function watchDeleteQuestion$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(SURVEY_DELETE_QUESTION, deleteQuestion);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked4);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchGetDetail), fork(watchDeleteQuestion)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["E:/Developing Project/Project - Pro/Recent Projects/026 - Daneshgah Magazi (New)/src/redux/surveyDetail/saga.js"],"names":["getSurveyDetailItems","deleteQuestion","watchGetDetail","watchDeleteQuestion","rootSaga","all","call","fork","put","takeEvery","SURVEY_GET_DETAILS","SURVEY_DELETE_QUESTION","getSurveyDetailSuccess","getSurveyDetailError","saveSurvey","surveyDetailData","getSurveyDetailRequest","Promise","success","fail","setTimeout","data","then","response","catch","error","deleteQuestionRequest","quesitonId","survey","questions","filter","x","id","payload","questionId"],"mappings":"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","sourcesContent":["\r\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\nimport {\r\n\tSURVEY_GET_DETAILS,\r\n\tSURVEY_DELETE_QUESTION\r\n} from '../actions';\r\n\r\nimport {\r\n\tgetSurveyDetailSuccess,\r\n\tgetSurveyDetailError,\r\n\tsaveSurvey\r\n} from './actions';\r\n\r\nimport surveyDetailData from '../../data/survey.detail.json';\r\n\r\n\r\nconst getSurveyDetailRequest = async () => {\r\n\t\treturn await new Promise((success, fail) => {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsuccess(surveyDetailData.data);\r\n\t\t\t}, 1000);\r\n\t\t})\r\n\t\t\t.then(response => response)\r\n\t\t\t.catch(error => error);\r\n\r\n}\r\n\r\nconst deleteQuestionRequest = async (quesitonId, survey) => {\r\n\r\n\t\tsurvey.questions = survey.questions.filter(x => x.id !== quesitonId);\r\n\t\treturn await new Promise((success, fail) => {\r\n\t\t\tsuccess(survey);\r\n\t\t})\r\n\t\t\t.then(response => response)\r\n\t\t\t.catch(error => error);\r\n\t\r\n}\r\n\r\n\r\nfunction* getSurveyDetailItems() {\r\n\ttry {\r\n\t\tconst response = yield call(getSurveyDetailRequest);\r\n\t\tyield put(getSurveyDetailSuccess(response));\r\n\t} catch (error) {\r\n\t\tyield put(getSurveyDetailError(error));\r\n\t}\r\n}\r\n\r\nfunction* deleteQuestion({ payload }) {\r\n\ttry {\r\n\t\tconst { questionId, survey } = payload;\r\n\t\tconst response = yield call(deleteQuestionRequest, questionId, survey);\r\n\t\tyield put(saveSurvey(response));\r\n\t} catch (error) {\r\n\t\tyield put(getSurveyDetailError(error));\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport function* watchGetDetail() {\r\n\tyield takeEvery(SURVEY_GET_DETAILS, getSurveyDetailItems);\r\n}\r\n\r\nexport function* watchDeleteQuestion() {\r\n\tyield takeEvery(SURVEY_DELETE_QUESTION, deleteQuestion);\r\n}\r\n\r\n\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([\r\n\t\tfork(watchGetDetail),\r\n\t\tfork(watchDeleteQuestion),\r\n\t]);\r\n}"]},"metadata":{},"sourceType":"module"}