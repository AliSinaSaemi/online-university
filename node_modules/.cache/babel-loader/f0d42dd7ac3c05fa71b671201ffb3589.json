{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Hamed\\\\Desktop\\\\Gogo-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Hamed\\\\Desktop\\\\Gogo-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getSurveyListItems),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addSurveyItem),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetList),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(wathcAddItem),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { getDateWithFormat } from \"../../helpers/Utils\";\nimport { SURVEY_LIST_GET_LIST, SURVEY_LIST_ADD_ITEM } from \"../actions\";\nimport { getSurveyListSuccess, getSurveyListError, addSurveyItemSuccess, addSurveyItemError } from \"./actions\";\nimport surveyListData from \"../../data/survey.list.json\";\n\nvar getSurveyListRequest = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return new Promise(function (success, fail) {\n              setTimeout(function () {\n                success(surveyListData.data);\n              }, 1000);\n            }).then(function (response) {\n              return response;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getSurveyListRequest() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction getSurveyListItems() {\n  var response;\n  return _regeneratorRuntime.wrap(function getSurveyListItems$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(getSurveyListRequest);\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return put(getSurveyListSuccess(response));\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put(getSurveyListError(_context2.t0));\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nvar addSurveyItemRequest = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(item) {\n    var items;\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            items = surveyListData.data;\n            item.id = items.length + 1;\n            item.createDate = getDateWithFormat();\n            items.splice(0, 0, item);\n            _context3.next = 6;\n            return new Promise(function (success, fail) {\n              setTimeout(function () {\n                success(items);\n              }, 1000);\n            }).then(function (response) {\n              return response;\n            }).catch(function (error) {\n              return error;\n            });\n\n          case 6:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function addSurveyItemRequest(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction addSurveyItem(_ref3) {\n  var payload, response;\n  return _regeneratorRuntime.wrap(function addSurveyItem$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(addSurveyItemRequest, payload);\n\n        case 4:\n          response = _context4.sent;\n          _context4.next = 7;\n          return put(addSurveyItemSuccess(response));\n\n        case 7:\n          _context4.next = 13;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 13;\n          return put(addSurveyItemError(_context4.t0));\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2, null, [[1, 9]]);\n}\n\nexport function watchGetList() {\n  return _regeneratorRuntime.wrap(function watchGetList$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(SURVEY_LIST_GET_LIST, getSurveyListItems);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function wathcAddItem() {\n  return _regeneratorRuntime.wrap(function wathcAddItem$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(SURVEY_LIST_ADD_ITEM, addSurveyItem);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked4);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchGetList), fork(wathcAddItem)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/Hamed/Desktop/Gogo-React/src/redux/surveyList/saga.js"],"names":["getSurveyListItems","addSurveyItem","watchGetList","wathcAddItem","rootSaga","all","call","fork","put","takeEvery","getDateWithFormat","SURVEY_LIST_GET_LIST","SURVEY_LIST_ADD_ITEM","getSurveyListSuccess","getSurveyListError","addSurveyItemSuccess","addSurveyItemError","surveyListData","getSurveyListRequest","Promise","success","fail","setTimeout","data","then","response","catch","error","addSurveyItemRequest","item","items","id","length","createDate","splice","payload"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\r\nimport { getDateWithFormat } from \"../../helpers/Utils\";\r\n\r\nimport {\r\n  SURVEY_LIST_GET_LIST,\r\n  SURVEY_LIST_ADD_ITEM\r\n} from \"../actions\";\r\n\r\nimport {\r\n  getSurveyListSuccess,\r\n  getSurveyListError,\r\n  addSurveyItemSuccess,\r\n  addSurveyItemError\r\n} from \"./actions\";\r\n\r\nimport surveyListData from \"../../data/survey.list.json\";\r\n\r\nconst getSurveyListRequest = async () => {\r\n  return await new Promise((success, fail) => {\r\n    setTimeout(() => {\r\n      success(surveyListData.data);\r\n    }, 1000);\r\n  })\r\n    .then(response => response)\r\n    .catch(error => error);\r\n};\r\n\r\nfunction* getSurveyListItems() {\r\n  try {\r\n    const response = yield call(getSurveyListRequest);\r\n    yield put(getSurveyListSuccess(response));\r\n  } catch (error) {\r\n    yield put(getSurveyListError(error));\r\n  }\r\n}\r\n\r\nconst addSurveyItemRequest = async item => {\r\n  let items = surveyListData.data;\r\n  item.id = items.length + 1;\r\n  item.createDate = getDateWithFormat();\r\n  items.splice(0, 0, item);\r\n  return await new Promise((success, fail) => {\r\n    setTimeout(() => {\r\n      success(items);\r\n    }, 1000);\r\n  })\r\n    .then(response => response)\r\n    .catch(error => error);\r\n};\r\n\r\nfunction* addSurveyItem({ payload }) {\r\n  try {\r\n    const response = yield call(addSurveyItemRequest, payload);\r\n    yield put(addSurveyItemSuccess(response));\r\n  } catch (error) {\r\n    yield put(addSurveyItemError(error));\r\n  }\r\n}\r\n\r\nexport function* watchGetList() {\r\n  yield takeEvery(SURVEY_LIST_GET_LIST, getSurveyListItems);\r\n}\r\n\r\nexport function* wathcAddItem() {\r\n  yield takeEvery(SURVEY_LIST_ADD_ITEM, addSurveyItem);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(watchGetList), fork(wathcAddItem)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}