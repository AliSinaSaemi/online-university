{"ast":null,"code":"ace.define(\"ace/mode/css_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var lang = require(\"../lib/lang\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var supportType = exports.supportType = \"align-content|align-items|align-self|all|animation|animation-delay|animation-direction|animation-duration|animation-fill-mode|animation-iteration-count|animation-name|animation-play-state|animation-timing-function|backface-visibility|background|background-attachment|background-blend-mode|background-clip|background-color|background-image|background-origin|background-position|background-repeat|background-size|border|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius|border-bottom-style|border-bottom-width|border-collapse|border-color|border-image|border-image-outset|border-image-repeat|border-image-slice|border-image-source|border-image-width|border-left|border-left-color|border-left-style|border-left-width|border-radius|border-right|border-right-color|border-right-style|border-right-width|border-spacing|border-style|border-top|border-top-color|border-top-left-radius|border-top-right-radius|border-top-style|border-top-width|border-width|bottom|box-shadow|box-sizing|caption-side|clear|clip|color|column-count|column-fill|column-gap|column-rule|column-rule-color|column-rule-style|column-rule-width|column-span|column-width|columns|content|counter-increment|counter-reset|cursor|direction|display|empty-cells|filter|flex|flex-basis|flex-direction|flex-flow|flex-grow|flex-shrink|flex-wrap|float|font|font-family|font-size|font-size-adjust|font-stretch|font-style|font-variant|font-weight|hanging-punctuation|height|justify-content|left|letter-spacing|line-height|list-style|list-style-image|list-style-position|list-style-type|margin|margin-bottom|margin-left|margin-right|margin-top|max-height|max-width|max-zoom|min-height|min-width|min-zoom|nav-down|nav-index|nav-left|nav-right|nav-up|opacity|order|outline|outline-color|outline-offset|outline-style|outline-width|overflow|overflow-x|overflow-y|padding|padding-bottom|padding-left|padding-right|padding-top|page-break-after|page-break-before|page-break-inside|perspective|perspective-origin|position|quotes|resize|right|tab-size|table-layout|text-align|text-align-last|text-decoration|text-decoration-color|text-decoration-line|text-decoration-style|text-indent|text-justify|text-overflow|text-shadow|text-transform|top|transform|transform-origin|transform-style|transition|transition-delay|transition-duration|transition-property|transition-timing-function|unicode-bidi|user-select|user-zoom|vertical-align|visibility|white-space|width|word-break|word-spacing|word-wrap|z-index\";\n  var supportFunction = exports.supportFunction = \"rgb|rgba|url|attr|counter|counters\";\n  var supportConstant = exports.supportConstant = \"absolute|after-edge|after|all-scroll|all|alphabetic|always|antialiased|armenian|auto|avoid-column|avoid-page|avoid|balance|baseline|before-edge|before|below|bidi-override|block-line-height|block|bold|bolder|border-box|both|bottom|box|break-all|break-word|capitalize|caps-height|caption|center|central|char|circle|cjk-ideographic|clone|close-quote|col-resize|collapse|column|consider-shifts|contain|content-box|cover|crosshair|cubic-bezier|dashed|decimal-leading-zero|decimal|default|disabled|disc|disregard-shifts|distribute-all-lines|distribute-letter|distribute-space|distribute|dotted|double|e-resize|ease-in|ease-in-out|ease-out|ease|ellipsis|end|exclude-ruby|fill|fixed|georgian|glyphs|grid-height|groove|hand|hanging|hebrew|help|hidden|hiragana-iroha|hiragana|horizontal|icon|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space|ideographic|inactive|include-ruby|inherit|initial|inline-block|inline-box|inline-line-height|inline-table|inline|inset|inside|inter-ideograph|inter-word|invert|italic|justify|katakana-iroha|katakana|keep-all|last|left|lighter|line-edge|line-through|line|linear|list-item|local|loose|lower-alpha|lower-greek|lower-latin|lower-roman|lowercase|lr-tb|ltr|mathematical|max-height|max-size|medium|menu|message-box|middle|move|n-resize|ne-resize|newspaper|no-change|no-close-quote|no-drop|no-open-quote|no-repeat|none|normal|not-allowed|nowrap|nw-resize|oblique|open-quote|outset|outside|overline|padding-box|page|pointer|pre-line|pre-wrap|pre|preserve-3d|progress|relative|repeat-x|repeat-y|repeat|replaced|reset-size|ridge|right|round|row-resize|rtl|s-resize|scroll|se-resize|separate|slice|small-caps|small-caption|solid|space|square|start|static|status-bar|step-end|step-start|steps|stretch|strict|sub|super|sw-resize|table-caption|table-cell|table-column-group|table-column|table-footer-group|table-header-group|table-row-group|table-row|table|tb-rl|text-after-edge|text-before-edge|text-bottom|text-size|text-top|text|thick|thin|transparent|underline|upper-alpha|upper-latin|upper-roman|uppercase|use-script|vertical-ideographic|vertical-text|visible|w-resize|wait|whitespace|z-index|zero|zoom\";\n  var supportConstantColor = exports.supportConstantColor = \"aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen\";\n  var supportConstantFonts = exports.supportConstantFonts = \"arial|century|comic|courier|cursive|fantasy|garamond|georgia|helvetica|impact|lucida|symbol|system|tahoma|times|trebuchet|utopia|verdana|webdings|sans-serif|serif|monospace\";\n  var numRe = exports.numRe = \"\\\\-?(?:(?:[0-9]+(?:\\\\.[0-9]+)?)|(?:\\\\.[0-9]+))\";\n  var pseudoElements = exports.pseudoElements = \"(\\\\:+)\\\\b(after|before|first-letter|first-line|moz-selection|selection)\\\\b\";\n  var pseudoClasses = exports.pseudoClasses = \"(:)\\\\b(active|checked|disabled|empty|enabled|first-child|first-of-type|focus|hover|indeterminate|invalid|last-child|last-of-type|link|not|nth-child|nth-last-child|nth-last-of-type|nth-of-type|only-child|only-of-type|required|root|target|valid|visited)\\\\b\";\n\n  var CssHighlightRules = function CssHighlightRules() {\n    var keywordMapper = this.createKeywordMapper({\n      \"support.function\": supportFunction,\n      \"support.constant\": supportConstant,\n      \"support.type\": supportType,\n      \"support.constant.color\": supportConstantColor,\n      \"support.constant.fonts\": supportConstantFonts\n    }, \"text\", true);\n    this.$rules = {\n      \"start\": [{\n        include: [\"strings\", \"url\", \"comments\"]\n      }, {\n        token: \"paren.lparen\",\n        regex: \"\\\\{\",\n        next: \"ruleset\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"\\\\}\"\n      }, {\n        token: \"string\",\n        regex: \"@(?!viewport)\",\n        next: \"media\"\n      }, {\n        token: \"keyword\",\n        regex: \"#[a-z0-9-_]+\"\n      }, {\n        token: \"keyword\",\n        regex: \"%\"\n      }, {\n        token: \"variable\",\n        regex: \"\\\\.[a-z0-9-_]+\"\n      }, {\n        token: \"string\",\n        regex: \":[a-z0-9-_]+\"\n      }, {\n        token: \"constant.numeric\",\n        regex: numRe\n      }, {\n        token: \"constant\",\n        regex: \"[a-z0-9-_]+\"\n      }, {\n        caseInsensitive: true\n      }],\n      \"media\": [{\n        include: [\"strings\", \"url\", \"comments\"]\n      }, {\n        token: \"paren.lparen\",\n        regex: \"\\\\{\",\n        next: \"start\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"\\\\}\",\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: \";\",\n        next: \"start\"\n      }, {\n        token: \"keyword\",\n        regex: \"(?:media|supports|document|charset|import|namespace|media|supports|document\" + \"|page|font|keyframes|viewport|counter-style|font-feature-values\" + \"|swash|ornaments|annotation|stylistic|styleset|character-variant)\"\n      }],\n      \"comments\": [{\n        token: \"comment\",\n        // multi line comment\n        regex: \"\\\\/\\\\*\",\n        push: [{\n          token: \"comment\",\n          regex: \"\\\\*\\\\/\",\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment\"\n        }]\n      }],\n      \"ruleset\": [{\n        regex: \"-(webkit|ms|moz|o)-\",\n        token: \"text\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"[:;]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"\\\\}\",\n        next: \"start\"\n      }, {\n        include: [\"strings\", \"url\", \"comments\"]\n      }, {\n        token: [\"constant.numeric\", \"keyword\"],\n        regex: \"(\" + numRe + \")(ch|cm|deg|em|ex|fr|gd|grad|Hz|in|kHz|mm|ms|pc|pt|px|rad|rem|s|turn|vh|vmax|vmin|vm|vw|%)\"\n      }, {\n        token: \"constant.numeric\",\n        regex: numRe\n      }, {\n        token: \"constant.numeric\",\n        // hex6 color\n        regex: \"#[a-f0-9]{6}\"\n      }, {\n        token: \"constant.numeric\",\n        // hex3 color\n        regex: \"#[a-f0-9]{3}\"\n      }, {\n        token: [\"punctuation\", \"entity.other.attribute-name.pseudo-element.css\"],\n        regex: pseudoElements\n      }, {\n        token: [\"punctuation\", \"entity.other.attribute-name.pseudo-class.css\"],\n        regex: pseudoClasses\n      }, {\n        include: \"url\"\n      }, {\n        token: keywordMapper,\n        regex: \"\\\\-?[a-zA-Z_][a-zA-Z0-9_\\\\-]*\"\n      }, {\n        caseInsensitive: true\n      }],\n      url: [{\n        token: \"support.function\",\n        regex: \"(?:url(:?-prefix)?|domain|regexp)\\\\(\",\n        push: [{\n          token: \"support.function\",\n          regex: \"\\\\)\",\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }],\n      strings: [{\n        token: \"string.start\",\n        regex: \"'\",\n        push: [{\n          token: \"string.end\",\n          regex: \"'|$\",\n          next: \"pop\"\n        }, {\n          include: \"escapes\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: /\\\\$/,\n          consumeLineEnd: true\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string.start\",\n        regex: '\"',\n        push: [{\n          token: \"string.end\",\n          regex: '\"|$',\n          next: \"pop\"\n        }, {\n          include: \"escapes\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: /\\\\$/,\n          consumeLineEnd: true\n        }, {\n          defaultToken: \"string\"\n        }]\n      }],\n      escapes: [{\n        token: \"constant.language.escape\",\n        regex: /\\\\([a-fA-F\\d]{1,6}|[^a-fA-F\\d])/\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(CssHighlightRules, TextHighlightRules);\n  exports.CssHighlightRules = CssHighlightRules;\n});\nace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var DocCommentHighlightRules = function DocCommentHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc\",\n        caseInsensitive: true\n      }]\n    };\n  };\n\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: \"\\\\/\\\\*(?=\\\\*)\",\n      next: start\n    };\n  };\n\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/javascript_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var identifierRe = \"[a-zA-Z\\\\$_\\xA1-\\uFFFF][a-zA-Z\\\\d\\\\$_\\xA1-\\uFFFF]*\";\n\n  var JavaScriptHighlightRules = function JavaScriptHighlightRules(options) {\n    var keywordMapper = this.createKeywordMapper({\n      \"variable.language\": \"Array|Boolean|Date|Function|Iterator|Number|Object|RegExp|String|Proxy|\" + // Constructors\n      \"Namespace|QName|XML|XMLList|\" + // E4X\n      \"ArrayBuffer|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|\" + \"Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray|\" + \"Error|EvalError|InternalError|RangeError|ReferenceError|StopIteration|\" + // Errors\n      \"SyntaxError|TypeError|URIError|\" + \"decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|eval|isFinite|\" + // Non-constructor functions\n      \"isNaN|parseFloat|parseInt|\" + \"JSON|Math|\" + // Other\n      \"this|arguments|prototype|window|document\",\n      // Pseudo\n      \"keyword\": \"const|yield|import|get|set|async|await|\" + \"break|case|catch|continue|default|delete|do|else|finally|for|function|\" + \"if|in|of|instanceof|new|return|switch|throw|try|typeof|let|var|while|with|debugger|\" + \"__parent__|__count__|escape|unescape|with|__proto__|\" + \"class|enum|extends|super|export|implements|private|public|interface|package|protected|static\",\n      \"storage.type\": \"const|let|var|function\",\n      \"constant.language\": \"null|Infinity|NaN|undefined\",\n      \"support.function\": \"alert\",\n      \"constant.language.boolean\": \"true|false\"\n    }, \"identifier\");\n    var kwBeforeRe = \"case|do|else|finally|in|instanceof|return|throw|try|typeof|yield|void\";\n    var escapedRe = \"\\\\\\\\(?:x[0-9a-fA-F]{2}|\" + // hex\n    \"u[0-9a-fA-F]{4}|\" + // unicode\n    \"u{[0-9a-fA-F]{1,6}}|\" + // es6 unicode\n    \"[0-2][0-7]{0,2}|\" + // oct\n    \"3[0-7][0-7]?|\" + // oct\n    \"[4-7][0-7]?|\" + //oct\n    \".)\";\n    this.$rules = {\n      \"no_regex\": [DocCommentHighlightRules.getStartRule(\"doc-start\"), comments(\"no_regex\"), {\n        token: \"string\",\n        regex: \"'(?=.)\",\n        next: \"qstring\"\n      }, {\n        token: \"string\",\n        regex: '\"(?=.)',\n        next: \"qqstring\"\n      }, {\n        token: \"constant.numeric\",\n        // hexadecimal, octal and binary\n        regex: /0(?:[xX][0-9a-fA-F]+|[oO][0-7]+|[bB][01]+)\\b/\n      }, {\n        token: \"constant.numeric\",\n        // decimal integers and floats\n        regex: /(?:\\d\\d*(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+\\b)?/\n      }, {\n        token: [\"storage.type\", \"punctuation.operator\", \"support.function\", \"punctuation.operator\", \"entity.name.function\", \"text\", \"keyword.operator\"],\n        regex: \"(\" + identifierRe + \")(\\\\.)(prototype)(\\\\.)(\" + identifierRe + \")(\\\\s*)(=)\",\n        next: \"function_arguments\"\n      }, {\n        token: [\"storage.type\", \"punctuation.operator\", \"entity.name.function\", \"text\", \"keyword.operator\", \"text\", \"storage.type\", \"text\", \"paren.lparen\"],\n        regex: \"(\" + identifierRe + \")(\\\\.)(\" + identifierRe + \")(\\\\s*)(=)(\\\\s*)(function)(\\\\s*)(\\\\()\",\n        next: \"function_arguments\"\n      }, {\n        token: [\"entity.name.function\", \"text\", \"keyword.operator\", \"text\", \"storage.type\", \"text\", \"paren.lparen\"],\n        regex: \"(\" + identifierRe + \")(\\\\s*)(=)(\\\\s*)(function)(\\\\s*)(\\\\()\",\n        next: \"function_arguments\"\n      }, {\n        token: [\"storage.type\", \"punctuation.operator\", \"entity.name.function\", \"text\", \"keyword.operator\", \"text\", \"storage.type\", \"text\", \"entity.name.function\", \"text\", \"paren.lparen\"],\n        regex: \"(\" + identifierRe + \")(\\\\.)(\" + identifierRe + \")(\\\\s*)(=)(\\\\s*)(function)(\\\\s+)(\\\\w+)(\\\\s*)(\\\\()\",\n        next: \"function_arguments\"\n      }, {\n        token: [\"storage.type\", \"text\", \"entity.name.function\", \"text\", \"paren.lparen\"],\n        regex: \"(function)(\\\\s+)(\" + identifierRe + \")(\\\\s*)(\\\\()\",\n        next: \"function_arguments\"\n      }, {\n        token: [\"entity.name.function\", \"text\", \"punctuation.operator\", \"text\", \"storage.type\", \"text\", \"paren.lparen\"],\n        regex: \"(\" + identifierRe + \")(\\\\s*)(:)(\\\\s*)(function)(\\\\s*)(\\\\()\",\n        next: \"function_arguments\"\n      }, {\n        token: [\"text\", \"text\", \"storage.type\", \"text\", \"paren.lparen\"],\n        regex: \"(:)(\\\\s*)(function)(\\\\s*)(\\\\()\",\n        next: \"function_arguments\"\n      }, {\n        token: \"keyword\",\n        regex: \"from(?=\\\\s*('|\\\"))\"\n      }, {\n        token: \"keyword\",\n        regex: \"(?:\" + kwBeforeRe + \")\\\\b\",\n        next: \"start\"\n      }, {\n        token: [\"support.constant\"],\n        regex: /that\\b/\n      }, {\n        token: [\"storage.type\", \"punctuation.operator\", \"support.function.firebug\"],\n        regex: /(console)(\\.)(warn|info|log|error|time|trace|timeEnd|assert)\\b/\n      }, {\n        token: keywordMapper,\n        regex: identifierRe\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[.](?![.])/,\n        next: \"property\"\n      }, {\n        token: \"storage.type\",\n        regex: /=>/,\n        next: \"start\"\n      }, {\n        token: \"keyword.operator\",\n        regex: /--|\\+\\+|\\.{3}|===|==|=|!=|!==|<+=?|>+=?|!|&&|\\|\\||\\?:|[!$%&*+\\-~\\/^]=?/,\n        next: \"start\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[?:,;.]/,\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: /[\\[({]/,\n        next: \"start\"\n      }, {\n        token: \"paren.rparen\",\n        regex: /[\\])}]/\n      }, {\n        token: \"comment\",\n        regex: /^#!.*$/\n      }],\n      property: [{\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }, {\n        token: [\"storage.type\", \"punctuation.operator\", \"entity.name.function\", \"text\", \"keyword.operator\", \"text\", \"storage.type\", \"text\", \"entity.name.function\", \"text\", \"paren.lparen\"],\n        regex: \"(\" + identifierRe + \")(\\\\.)(\" + identifierRe + \")(\\\\s*)(=)(\\\\s*)(function)(?:(\\\\s+)(\\\\w+))?(\\\\s*)(\\\\()\",\n        next: \"function_arguments\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[.](?![.])/\n      }, {\n        token: \"support.function\",\n        regex: /(s(?:h(?:ift|ow(?:Mod(?:elessDialog|alDialog)|Help))|croll(?:X|By(?:Pages|Lines)?|Y|To)?|t(?:op|rike)|i(?:n|zeToContent|debar|gnText)|ort|u(?:p|b(?:str(?:ing)?)?)|pli(?:ce|t)|e(?:nd|t(?:Re(?:sizable|questHeader)|M(?:i(?:nutes|lliseconds)|onth)|Seconds|Ho(?:tKeys|urs)|Year|Cursor|Time(?:out)?|Interval|ZOptions|Date|UTC(?:M(?:i(?:nutes|lliseconds)|onth)|Seconds|Hours|Date|FullYear)|FullYear|Active)|arch)|qrt|lice|avePreferences|mall)|h(?:ome|andleEvent)|navigate|c(?:har(?:CodeAt|At)|o(?:s|n(?:cat|textual|firm)|mpile)|eil|lear(?:Timeout|Interval)?|a(?:ptureEvents|ll)|reate(?:StyleSheet|Popup|EventObject))|t(?:o(?:GMTString|S(?:tring|ource)|U(?:TCString|pperCase)|Lo(?:caleString|werCase))|est|a(?:n|int(?:Enabled)?))|i(?:s(?:NaN|Finite)|ndexOf|talics)|d(?:isableExternalCapture|ump|etachEvent)|u(?:n(?:shift|taint|escape|watch)|pdateCommands)|j(?:oin|avaEnabled)|p(?:o(?:p|w)|ush|lugins.refresh|a(?:ddings|rse(?:Int|Float)?)|r(?:int|ompt|eference))|e(?:scape|nableExternalCapture|val|lementFromPoint|x(?:p|ec(?:Script|Command)?))|valueOf|UTC|queryCommand(?:State|Indeterm|Enabled|Value)|f(?:i(?:nd|le(?:ModifiedDate|Size|CreatedDate|UpdatedDate)|xed)|o(?:nt(?:size|color)|rward)|loor|romCharCode)|watch|l(?:ink|o(?:ad|g)|astIndexOf)|a(?:sin|nchor|cos|t(?:tachEvent|ob|an(?:2)?)|pply|lert|b(?:s|ort))|r(?:ou(?:nd|teEvents)|e(?:size(?:By|To)|calc|turnValue|place|verse|l(?:oad|ease(?:Capture|Events)))|andom)|g(?:o|et(?:ResponseHeader|M(?:i(?:nutes|lliseconds)|onth)|Se(?:conds|lection)|Hours|Year|Time(?:zoneOffset)?|Da(?:y|te)|UTC(?:M(?:i(?:nutes|lliseconds)|onth)|Seconds|Hours|Da(?:y|te)|FullYear)|FullYear|A(?:ttention|llResponseHeaders)))|m(?:in|ove(?:B(?:y|elow)|To(?:Absolute)?|Above)|ergeAttributes|a(?:tch|rgins|x))|b(?:toa|ig|o(?:ld|rderWidths)|link|ack))\\b(?=\\()/\n      }, {\n        token: \"support.function.dom\",\n        regex: /(s(?:ub(?:stringData|mit)|plitText|e(?:t(?:NamedItem|Attribute(?:Node)?)|lect))|has(?:ChildNodes|Feature)|namedItem|c(?:l(?:ick|o(?:se|neNode))|reate(?:C(?:omment|DATASection|aption)|T(?:Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(?:ntityReference|lement)|Attribute))|tabIndex|i(?:nsert(?:Row|Before|Cell|Data)|tem)|open|delete(?:Row|C(?:ell|aption)|T(?:Head|Foot)|Data)|focus|write(?:ln)?|a(?:dd|ppend(?:Child|Data))|re(?:set|place(?:Child|Data)|move(?:NamedItem|Child|Attribute(?:Node)?)?)|get(?:NamedItem|Element(?:sBy(?:Name|TagName|ClassName)|ById)|Attribute(?:Node)?)|blur)\\b(?=\\()/\n      }, {\n        token: \"support.constant\",\n        regex: /(s(?:ystemLanguage|cr(?:ipts|ollbars|een(?:X|Y|Top|Left))|t(?:yle(?:Sheets)?|atus(?:Text|bar)?)|ibling(?:Below|Above)|ource|uffixes|e(?:curity(?:Policy)?|l(?:ection|f)))|h(?:istory|ost(?:name)?|as(?:h|Focus))|y|X(?:MLDocument|SLDocument)|n(?:ext|ame(?:space(?:s|URI)|Prop))|M(?:IN_VALUE|AX_VALUE)|c(?:haracterSet|o(?:n(?:structor|trollers)|okieEnabled|lorDepth|mp(?:onents|lete))|urrent|puClass|l(?:i(?:p(?:boardData)?|entInformation)|osed|asses)|alle(?:e|r)|rypto)|t(?:o(?:olbar|p)|ext(?:Transform|Indent|Decoration|Align)|ags)|SQRT(?:1_2|2)|i(?:n(?:ner(?:Height|Width)|put)|ds|gnoreCase)|zIndex|o(?:scpu|n(?:readystatechange|Line)|uter(?:Height|Width)|p(?:sProfile|ener)|ffscreenBuffering)|NEGATIVE_INFINITY|d(?:i(?:splay|alog(?:Height|Top|Width|Left|Arguments)|rectories)|e(?:scription|fault(?:Status|Ch(?:ecked|arset)|View)))|u(?:ser(?:Profile|Language|Agent)|n(?:iqueID|defined)|pdateInterval)|_content|p(?:ixelDepth|ort|ersonalbar|kcs11|l(?:ugins|atform)|a(?:thname|dding(?:Right|Bottom|Top|Left)|rent(?:Window|Layer)?|ge(?:X(?:Offset)?|Y(?:Offset)?))|r(?:o(?:to(?:col|type)|duct(?:Sub)?|mpter)|e(?:vious|fix)))|e(?:n(?:coding|abledPlugin)|x(?:ternal|pando)|mbeds)|v(?:isibility|endor(?:Sub)?|Linkcolor)|URLUnencoded|P(?:I|OSITIVE_INFINITY)|f(?:ilename|o(?:nt(?:Size|Family|Weight)|rmName)|rame(?:s|Element)|gColor)|E|whiteSpace|l(?:i(?:stStyleType|n(?:eHeight|kColor))|o(?:ca(?:tion(?:bar)?|lName)|wsrc)|e(?:ngth|ft(?:Context)?)|a(?:st(?:M(?:odified|atch)|Index|Paren)|yer(?:s|X)|nguage))|a(?:pp(?:MinorVersion|Name|Co(?:deName|re)|Version)|vail(?:Height|Top|Width|Left)|ll|r(?:ity|guments)|Linkcolor|bove)|r(?:ight(?:Context)?|e(?:sponse(?:XML|Text)|adyState))|global|x|m(?:imeTypes|ultiline|enubar|argin(?:Right|Bottom|Top|Left))|L(?:N(?:10|2)|OG(?:10E|2E))|b(?:o(?:ttom|rder(?:Width|RightWidth|BottomWidth|Style|Color|TopWidth|LeftWidth))|ufferDepth|elow|ackground(?:Color|Image)))\\b/\n      }, {\n        token: \"identifier\",\n        regex: identifierRe\n      }, {\n        regex: \"\",\n        token: \"empty\",\n        next: \"no_regex\"\n      }],\n      \"start\": [DocCommentHighlightRules.getStartRule(\"doc-start\"), comments(\"start\"), {\n        token: \"string.regexp\",\n        regex: \"\\\\/\",\n        next: \"regex\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+|^$\",\n        next: \"start\"\n      }, {\n        token: \"empty\",\n        regex: \"\",\n        next: \"no_regex\"\n      }],\n      \"regex\": [{\n        token: \"regexp.keyword.operator\",\n        regex: \"\\\\\\\\(?:u[\\\\da-fA-F]{4}|x[\\\\da-fA-F]{2}|.)\"\n      }, {\n        token: \"string.regexp\",\n        regex: \"/[sxngimy]*\",\n        next: \"no_regex\"\n      }, {\n        token: \"invalid\",\n        regex: /\\{\\d+\\b,?\\d*\\}[+*]|[+*$^?][+*]|[$^][?]|\\?{3,}/\n      }, {\n        token: \"constant.language.escape\",\n        regex: /\\(\\?[:=!]|\\)|\\{\\d+\\b,?\\d*\\}|[+*]\\?|[()$^+*?.]/\n      }, {\n        token: \"constant.language.delimiter\",\n        regex: /\\|/\n      }, {\n        token: \"constant.language.escape\",\n        regex: /\\[\\^?/,\n        next: \"regex_character_class\"\n      }, {\n        token: \"empty\",\n        regex: \"$\",\n        next: \"no_regex\"\n      }, {\n        defaultToken: \"string.regexp\"\n      }],\n      \"regex_character_class\": [{\n        token: \"regexp.charclass.keyword.operator\",\n        regex: \"\\\\\\\\(?:u[\\\\da-fA-F]{4}|x[\\\\da-fA-F]{2}|.)\"\n      }, {\n        token: \"constant.language.escape\",\n        regex: \"]\",\n        next: \"regex\"\n      }, {\n        token: \"constant.language.escape\",\n        regex: \"-\"\n      }, {\n        token: \"empty\",\n        regex: \"$\",\n        next: \"no_regex\"\n      }, {\n        defaultToken: \"string.regexp.charachterclass\"\n      }],\n      \"function_arguments\": [{\n        token: \"variable.parameter\",\n        regex: identifierRe\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"[, ]+\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"$\"\n      }, {\n        token: \"empty\",\n        regex: \"\",\n        next: \"no_regex\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.language.escape\",\n        regex: escapedRe\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        consumeLineEnd: true\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"no_regex\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qstring\": [{\n        token: \"constant.language.escape\",\n        regex: escapedRe\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        consumeLineEnd: true\n      }, {\n        token: \"string\",\n        regex: \"'|$\",\n        next: \"no_regex\"\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n\n    if (!options || !options.noES6) {\n      this.$rules.no_regex.unshift({\n        regex: \"[{}]\",\n        onMatch: function onMatch(val, state, stack) {\n          this.next = val == \"{\" ? this.nextState : \"\";\n\n          if (val == \"{\" && stack.length) {\n            stack.unshift(\"start\", state);\n          } else if (val == \"}\" && stack.length) {\n            stack.shift();\n            this.next = stack.shift();\n            if (this.next.indexOf(\"string\") != -1 || this.next.indexOf(\"jsx\") != -1) return \"paren.quasi.end\";\n          }\n\n          return val == \"{\" ? \"paren.lparen\" : \"paren.rparen\";\n        },\n        nextState: \"start\"\n      }, {\n        token: \"string.quasi.start\",\n        regex: /`/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: escapedRe\n        }, {\n          token: \"paren.quasi.start\",\n          regex: /\\${/,\n          push: \"start\"\n        }, {\n          token: \"string.quasi.end\",\n          regex: /`/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.quasi\"\n        }]\n      });\n      if (!options || options.jsx != false) JSX.call(this);\n    }\n\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"no_regex\")]);\n    this.normalizeRules();\n  };\n\n  oop.inherits(JavaScriptHighlightRules, TextHighlightRules);\n\n  function JSX() {\n    var tagRegex = identifierRe.replace(\"\\\\d\", \"\\\\d\\\\-\");\n    var jsxTag = {\n      onMatch: function onMatch(val, state, stack) {\n        var offset = val.charAt(1) == \"/\" ? 2 : 1;\n\n        if (offset == 1) {\n          if (state != this.nextState) stack.unshift(this.next, this.nextState, 0);else stack.unshift(this.next);\n          stack[2]++;\n        } else if (offset == 2) {\n          if (state == this.nextState) {\n            stack[1]--;\n\n            if (!stack[1] || stack[1] < 0) {\n              stack.shift();\n              stack.shift();\n            }\n          }\n        }\n\n        return [{\n          type: \"meta.tag.punctuation.\" + (offset == 1 ? \"\" : \"end-\") + \"tag-open.xml\",\n          value: val.slice(0, offset)\n        }, {\n          type: \"meta.tag.tag-name.xml\",\n          value: val.substr(offset)\n        }];\n      },\n      regex: \"</?\" + tagRegex + \"\",\n      next: \"jsxAttributes\",\n      nextState: \"jsx\"\n    };\n    this.$rules.start.unshift(jsxTag);\n    var jsxJsRule = {\n      regex: \"{\",\n      token: \"paren.quasi.start\",\n      push: \"start\"\n    };\n    this.$rules.jsx = [jsxJsRule, jsxTag, {\n      include: \"reference\"\n    }, {\n      defaultToken: \"string\"\n    }];\n    this.$rules.jsxAttributes = [{\n      token: \"meta.tag.punctuation.tag-close.xml\",\n      regex: \"/?>\",\n      onMatch: function onMatch(value, currentState, stack) {\n        if (currentState == stack[0]) stack.shift();\n\n        if (value.length == 2) {\n          if (stack[0] == this.nextState) stack[1]--;\n\n          if (!stack[1] || stack[1] < 0) {\n            stack.splice(0, 2);\n          }\n        }\n\n        this.next = stack[0] || \"start\";\n        return [{\n          type: this.token,\n          value: value\n        }];\n      },\n      nextState: \"jsx\"\n    }, jsxJsRule, comments(\"jsxAttributes\"), {\n      token: \"entity.other.attribute-name.xml\",\n      regex: tagRegex\n    }, {\n      token: \"keyword.operator.attribute-equals.xml\",\n      regex: \"=\"\n    }, {\n      token: \"text.tag-whitespace.xml\",\n      regex: \"\\\\s+\"\n    }, {\n      token: \"string.attribute-value.xml\",\n      regex: \"'\",\n      stateName: \"jsx_attr_q\",\n      push: [{\n        token: \"string.attribute-value.xml\",\n        regex: \"'\",\n        next: \"pop\"\n      }, {\n        include: \"reference\"\n      }, {\n        defaultToken: \"string.attribute-value.xml\"\n      }]\n    }, {\n      token: \"string.attribute-value.xml\",\n      regex: '\"',\n      stateName: \"jsx_attr_qq\",\n      push: [{\n        token: \"string.attribute-value.xml\",\n        regex: '\"',\n        next: \"pop\"\n      }, {\n        include: \"reference\"\n      }, {\n        defaultToken: \"string.attribute-value.xml\"\n      }]\n    }, jsxTag];\n    this.$rules.reference = [{\n      token: \"constant.language.escape.reference.xml\",\n      regex: \"(?:&#[0-9]+;)|(?:&#x[0-9a-fA-F]+;)|(?:&[a-zA-Z0-9_:\\\\.-]+;)\"\n    }];\n  }\n\n  function comments(next) {\n    return [{\n      token: \"comment\",\n      // multi line comment\n      regex: /\\/\\*/,\n      next: [DocCommentHighlightRules.getTagRule(), {\n        token: \"comment\",\n        regex: \"\\\\*\\\\/\",\n        next: next || \"pop\"\n      }, {\n        defaultToken: \"comment\",\n        caseInsensitive: true\n      }]\n    }, {\n      token: \"comment\",\n      regex: \"\\\\/\\\\/\",\n      next: [DocCommentHighlightRules.getTagRule(), {\n        token: \"comment\",\n        regex: \"$|^\",\n        next: next || \"pop\"\n      }, {\n        defaultToken: \"comment\",\n        caseInsensitive: true\n      }]\n    }];\n  }\n\n  exports.JavaScriptHighlightRules = JavaScriptHighlightRules;\n});\nace.define(\"ace/mode/xml_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var XmlHighlightRules = function XmlHighlightRules(normalize) {\n    var tagRegex = \"[_:a-zA-Z\\xC0-\\uFFFF][-_:.a-zA-Z0-9\\xC0-\\uFFFF]*\";\n    this.$rules = {\n      start: [{\n        token: \"string.cdata.xml\",\n        regex: \"<\\\\!\\\\[CDATA\\\\[\",\n        next: \"cdata\"\n      }, {\n        token: [\"punctuation.instruction.xml\", \"keyword.instruction.xml\"],\n        regex: \"(<\\\\?)(\" + tagRegex + \")\",\n        next: \"processing_instruction\"\n      }, {\n        token: \"comment.start.xml\",\n        regex: \"<\\\\!--\",\n        next: \"comment\"\n      }, {\n        token: [\"xml-pe.doctype.xml\", \"xml-pe.doctype.xml\"],\n        regex: \"(<\\\\!)(DOCTYPE)(?=[\\\\s])\",\n        next: \"doctype\",\n        caseInsensitive: true\n      }, {\n        include: \"tag\"\n      }, {\n        token: \"text.end-tag-open.xml\",\n        regex: \"</\"\n      }, {\n        token: \"text.tag-open.xml\",\n        regex: \"<\"\n      }, {\n        include: \"reference\"\n      }, {\n        defaultToken: \"text.xml\"\n      }],\n      processing_instruction: [{\n        token: \"entity.other.attribute-name.decl-attribute-name.xml\",\n        regex: tagRegex\n      }, {\n        token: \"keyword.operator.decl-attribute-equals.xml\",\n        regex: \"=\"\n      }, {\n        include: \"whitespace\"\n      }, {\n        include: \"string\"\n      }, {\n        token: \"punctuation.xml-decl.xml\",\n        regex: \"\\\\?>\",\n        next: \"start\"\n      }],\n      doctype: [{\n        include: \"whitespace\"\n      }, {\n        include: \"string\"\n      }, {\n        token: \"xml-pe.doctype.xml\",\n        regex: \">\",\n        next: \"start\"\n      }, {\n        token: \"xml-pe.xml\",\n        regex: \"[-_a-zA-Z0-9:]+\"\n      }, {\n        token: \"punctuation.int-subset\",\n        regex: \"\\\\[\",\n        push: \"int_subset\"\n      }],\n      int_subset: [{\n        token: \"text.xml\",\n        regex: \"\\\\s+\"\n      }, {\n        token: \"punctuation.int-subset.xml\",\n        regex: \"]\",\n        next: \"pop\"\n      }, {\n        token: [\"punctuation.markup-decl.xml\", \"keyword.markup-decl.xml\"],\n        regex: \"(<\\\\!)(\" + tagRegex + \")\",\n        push: [{\n          token: \"text\",\n          regex: \"\\\\s+\"\n        }, {\n          token: \"punctuation.markup-decl.xml\",\n          regex: \">\",\n          next: \"pop\"\n        }, {\n          include: \"string\"\n        }]\n      }],\n      cdata: [{\n        token: \"string.cdata.xml\",\n        regex: \"\\\\]\\\\]>\",\n        next: \"start\"\n      }, {\n        token: \"text.xml\",\n        regex: \"\\\\s+\"\n      }, {\n        token: \"text.xml\",\n        regex: \"(?:[^\\\\]]|\\\\](?!\\\\]>))+\"\n      }],\n      comment: [{\n        token: \"comment.end.xml\",\n        regex: \"-->\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment.xml\"\n      }],\n      reference: [{\n        token: \"constant.language.escape.reference.xml\",\n        regex: \"(?:&#[0-9]+;)|(?:&#x[0-9a-fA-F]+;)|(?:&[a-zA-Z0-9_:\\\\.-]+;)\"\n      }],\n      attr_reference: [{\n        token: \"constant.language.escape.reference.attribute-value.xml\",\n        regex: \"(?:&#[0-9]+;)|(?:&#x[0-9a-fA-F]+;)|(?:&[a-zA-Z0-9_:\\\\.-]+;)\"\n      }],\n      tag: [{\n        token: [\"meta.tag.punctuation.tag-open.xml\", \"meta.tag.punctuation.end-tag-open.xml\", \"meta.tag.tag-name.xml\"],\n        regex: \"(?:(<)|(</))((?:\" + tagRegex + \":)?\" + tagRegex + \")\",\n        next: [{\n          include: \"attributes\"\n        }, {\n          token: \"meta.tag.punctuation.tag-close.xml\",\n          regex: \"/?>\",\n          next: \"start\"\n        }]\n      }],\n      tag_whitespace: [{\n        token: \"text.tag-whitespace.xml\",\n        regex: \"\\\\s+\"\n      }],\n      whitespace: [{\n        token: \"text.whitespace.xml\",\n        regex: \"\\\\s+\"\n      }],\n      string: [{\n        token: \"string.xml\",\n        regex: \"'\",\n        push: [{\n          token: \"string.xml\",\n          regex: \"'\",\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.xml\"\n        }]\n      }, {\n        token: \"string.xml\",\n        regex: '\"',\n        push: [{\n          token: \"string.xml\",\n          regex: '\"',\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.xml\"\n        }]\n      }],\n      attributes: [{\n        token: \"entity.other.attribute-name.xml\",\n        regex: tagRegex\n      }, {\n        token: \"keyword.operator.attribute-equals.xml\",\n        regex: \"=\"\n      }, {\n        include: \"tag_whitespace\"\n      }, {\n        include: \"attribute_value\"\n      }],\n      attribute_value: [{\n        token: \"string.attribute-value.xml\",\n        regex: \"'\",\n        push: [{\n          token: \"string.attribute-value.xml\",\n          regex: \"'\",\n          next: \"pop\"\n        }, {\n          include: \"attr_reference\"\n        }, {\n          defaultToken: \"string.attribute-value.xml\"\n        }]\n      }, {\n        token: \"string.attribute-value.xml\",\n        regex: '\"',\n        push: [{\n          token: \"string.attribute-value.xml\",\n          regex: '\"',\n          next: \"pop\"\n        }, {\n          include: \"attr_reference\"\n        }, {\n          defaultToken: \"string.attribute-value.xml\"\n        }]\n      }]\n    };\n    if (this.constructor === XmlHighlightRules) this.normalizeRules();\n  };\n\n  (function () {\n    this.embedTagRules = function (HighlightRules, prefix, tag) {\n      this.$rules.tag.unshift({\n        token: [\"meta.tag.punctuation.tag-open.xml\", \"meta.tag.\" + tag + \".tag-name.xml\"],\n        regex: \"(<)(\" + tag + \"(?=\\\\s|>|$))\",\n        next: [{\n          include: \"attributes\"\n        }, {\n          token: \"meta.tag.punctuation.tag-close.xml\",\n          regex: \"/?>\",\n          next: prefix + \"start\"\n        }]\n      });\n      this.$rules[tag + \"-end\"] = [{\n        include: \"attributes\"\n      }, {\n        token: \"meta.tag.punctuation.tag-close.xml\",\n        regex: \"/?>\",\n        next: \"start\",\n        onMatch: function onMatch(value, currentState, stack) {\n          stack.splice(0);\n          return this.token;\n        }\n      }];\n      this.embedRules(HighlightRules, prefix, [{\n        token: [\"meta.tag.punctuation.end-tag-open.xml\", \"meta.tag.\" + tag + \".tag-name.xml\"],\n        regex: \"(</)(\" + tag + \"(?=\\\\s|>|$))\",\n        next: tag + \"-end\"\n      }, {\n        token: \"string.cdata.xml\",\n        regex: \"<\\\\!\\\\[CDATA\\\\[\"\n      }, {\n        token: \"string.cdata.xml\",\n        regex: \"\\\\]\\\\]>\"\n      }]);\n    };\n  }).call(TextHighlightRules.prototype);\n  oop.inherits(XmlHighlightRules, TextHighlightRules);\n  exports.XmlHighlightRules = XmlHighlightRules;\n});\nace.define(\"ace/mode/html_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/css_highlight_rules\", \"ace/mode/javascript_highlight_rules\", \"ace/mode/xml_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var lang = require(\"../lib/lang\");\n\n  var CssHighlightRules = require(\"./css_highlight_rules\").CssHighlightRules;\n\n  var JavaScriptHighlightRules = require(\"./javascript_highlight_rules\").JavaScriptHighlightRules;\n\n  var XmlHighlightRules = require(\"./xml_highlight_rules\").XmlHighlightRules;\n\n  var tagMap = lang.createMap({\n    a: 'anchor',\n    button: 'form',\n    form: 'form',\n    img: 'image',\n    input: 'form',\n    label: 'form',\n    option: 'form',\n    script: 'script',\n    select: 'form',\n    textarea: 'form',\n    style: 'style',\n    table: 'table',\n    tbody: 'table',\n    td: 'table',\n    tfoot: 'table',\n    th: 'table',\n    tr: 'table'\n  });\n\n  var HtmlHighlightRules = function HtmlHighlightRules() {\n    XmlHighlightRules.call(this);\n    this.addRules({\n      attributes: [{\n        include: \"tag_whitespace\"\n      }, {\n        token: \"entity.other.attribute-name.xml\",\n        regex: \"[-_a-zA-Z0-9:.]+\"\n      }, {\n        token: \"keyword.operator.attribute-equals.xml\",\n        regex: \"=\",\n        push: [{\n          include: \"tag_whitespace\"\n        }, {\n          token: \"string.unquoted.attribute-value.html\",\n          regex: \"[^<>='\\\"`\\\\s]+\",\n          next: \"pop\"\n        }, {\n          token: \"empty\",\n          regex: \"\",\n          next: \"pop\"\n        }]\n      }, {\n        include: \"attribute_value\"\n      }],\n      tag: [{\n        token: function token(start, tag) {\n          var group = tagMap[tag];\n          return [\"meta.tag.punctuation.\" + (start == \"<\" ? \"\" : \"end-\") + \"tag-open.xml\", \"meta.tag\" + (group ? \".\" + group : \"\") + \".tag-name.xml\"];\n        },\n        regex: \"(</?)([-_a-zA-Z0-9:.]+)\",\n        next: \"tag_stuff\"\n      }],\n      tag_stuff: [{\n        include: \"attributes\"\n      }, {\n        token: \"meta.tag.punctuation.tag-close.xml\",\n        regex: \"/?>\",\n        next: \"start\"\n      }]\n    });\n    this.embedTagRules(CssHighlightRules, \"css-\", \"style\");\n    this.embedTagRules(new JavaScriptHighlightRules({\n      jsx: false\n    }).getRules(), \"js-\", \"script\");\n    if (this.constructor === HtmlHighlightRules) this.normalizeRules();\n  };\n\n  oop.inherits(HtmlHighlightRules, XmlHighlightRules);\n  exports.HtmlHighlightRules = HtmlHighlightRules;\n});\nace.define(\"ace/mode/markdown_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/config\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/text_highlight_rules\", \"ace/mode/html_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var modes = require(\"../config\").$modes;\n\n  var oop = require(\"../lib/oop\");\n\n  var lang = require(\"../lib/lang\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var HtmlHighlightRules = require(\"./html_highlight_rules\").HtmlHighlightRules;\n\n  var escaped = function escaped(ch) {\n    return \"(?:[^\" + lang.escapeRegExp(ch) + \"\\\\\\\\]|\\\\\\\\.)*\";\n  };\n\n  var MarkdownHighlightRules = function MarkdownHighlightRules() {\n    HtmlHighlightRules.call(this);\n    var codeBlockStartRule = {\n      token: \"support.function\",\n      regex: /^\\s*(```+[^`]*|~~~+[^~]*)$/,\n      onMatch: function onMatch(value, state, stack, line) {\n        var m = value.match(/^(\\s*)([`~]+)(.*)/);\n        var language = /[\\w-]+|$/.exec(m[3])[0];\n        if (!modes[language]) language = \"\";\n        stack.unshift(\"githubblock\", [], [m[1], m[2], language], state);\n        return this.token;\n      },\n      next: \"githubblock\"\n    };\n    var codeBlockRules = [{\n      token: \"support.function\",\n      regex: \".*\",\n      onMatch: function onMatch(value, state, stack, line) {\n        var embedState = stack[1];\n        var indent = stack[2][0];\n        var endMarker = stack[2][1];\n        var language = stack[2][2];\n        var m = /^(\\s*)(`+|~+)\\s*$/.exec(value);\n\n        if (m && m[1].length < indent.length + 3 && m[2].length >= endMarker.length && m[2][0] == endMarker[0]) {\n          stack.splice(0, 3);\n          this.next = stack.shift();\n          return this.token;\n        }\n\n        this.next = \"\";\n\n        if (language && modes[language]) {\n          var data = modes[language].getTokenizer().getLineTokens(value, embedState.slice(0));\n          stack[1] = data.state;\n          return data.tokens;\n        }\n\n        return this.token;\n      }\n    }];\n    this.$rules[\"start\"].unshift({\n      token: \"empty_line\",\n      regex: '^$',\n      next: \"allowBlock\"\n    }, {\n      // h1\n      token: \"markup.heading.1\",\n      regex: \"^=+(?=\\\\s*$)\"\n    }, {\n      // h2\n      token: \"markup.heading.2\",\n      regex: \"^\\\\-+(?=\\\\s*$)\"\n    }, {\n      token: function token(value) {\n        return \"markup.heading.\" + value.length;\n      },\n      regex: /^#{1,6}(?=\\s|$)/,\n      next: \"header\"\n    }, codeBlockStartRule, {\n      // block quote\n      token: \"string.blockquote\",\n      regex: \"^\\\\s*>\\\\s*(?:[*+-]|\\\\d+\\\\.)?\\\\s+\",\n      next: \"blockquote\"\n    }, {\n      // HR * - _\n      token: \"constant\",\n      regex: \"^ {0,3}(?:(?:\\\\* ?){3,}|(?:\\\\- ?){3,}|(?:\\\\_ ?){3,})\\\\s*$\",\n      next: \"allowBlock\"\n    }, {\n      // list\n      token: \"markup.list\",\n      regex: \"^\\\\s{0,3}(?:[*+-]|\\\\d+\\\\.)\\\\s+\",\n      next: \"listblock-start\"\n    }, {\n      include: \"basic\"\n    });\n    this.addRules({\n      \"basic\": [{\n        token: \"constant.language.escape\",\n        regex: /\\\\[\\\\`*_{}\\[\\]()#+\\-.!]/\n      }, {\n        // code span `\n        token: \"support.function\",\n        regex: \"(`+)(.*?[^`])(\\\\1)\"\n      }, {\n        // reference\n        token: [\"text\", \"constant\", \"text\", \"url\", \"string\", \"text\"],\n        regex: \"^([ ]{0,3}\\\\[)([^\\\\]]+)(\\\\]:\\\\s*)([^ ]+)(\\\\s*(?:[\\\"][^\\\"]+[\\\"])?(\\\\s*))$\"\n      }, {\n        // link by reference\n        token: [\"text\", \"string\", \"text\", \"constant\", \"text\"],\n        regex: \"(\\\\[)(\" + escaped(\"]\") + \")(\\\\]\\\\s*\\\\[)(\" + escaped(\"]\") + \")(\\\\])\"\n      }, {\n        // link by url\n        token: [\"text\", \"string\", \"text\", \"markup.underline\", \"string\", \"text\"],\n        regex: \"(\\\\!?\\\\[)(\" + // [\n        escaped(\"]\") + // link text or alt text\n        \")(\\\\]\\\\()\" + // ](\n        '((?:[^\\\\)\\\\s\\\\\\\\]|\\\\\\\\.|\\\\s(?=[^\"]))*)' + // href or image\n        '(\\\\s*\"' + escaped('\"') + '\"\\\\s*)?' + // \"title\"\n        \"(\\\\))\" // )\n\n      }, {\n        // strong ** __\n        token: \"string.strong\",\n        regex: \"([*]{2}|[_]{2}(?=\\\\S))(.*?\\\\S[*_]*)(\\\\1)\"\n      }, {\n        // emphasis * _\n        token: \"string.emphasis\",\n        regex: \"([*]|[_](?=\\\\S))(.*?\\\\S[*_]*)(\\\\1)\"\n      }, {\n        //\n        token: [\"text\", \"url\", \"text\"],\n        regex: \"(<)(\" + \"(?:https?|ftp|dict):[^'\\\">\\\\s]+\" + \"|\" + \"(?:mailto:)?[-.\\\\w]+\\\\@[-a-z0-9]+(?:\\\\.[-a-z0-9]+)*\\\\.[a-z]+\" + \")(>)\"\n      }],\n      \"allowBlock\": [{\n        token: \"support.function\",\n        regex: \"^ {4}.+\",\n        next: \"allowBlock\"\n      }, {\n        token: \"empty_line\",\n        regex: '^$',\n        next: \"allowBlock\"\n      }, {\n        token: \"empty\",\n        regex: \"\",\n        next: \"start\"\n      }],\n      \"header\": [{\n        regex: \"$\",\n        next: \"start\"\n      }, {\n        include: \"basic\"\n      }, {\n        defaultToken: \"heading\"\n      }],\n      \"listblock-start\": [{\n        token: \"support.variable\",\n        regex: /(?:\\[[ x]\\])?/,\n        next: \"listblock\"\n      }],\n      \"listblock\": [{\n        // Lists only escape on completely blank lines.\n        token: \"empty_line\",\n        regex: \"^$\",\n        next: \"start\"\n      }, {\n        // list\n        token: \"markup.list\",\n        regex: \"^\\\\s{0,3}(?:[*+-]|\\\\d+\\\\.)\\\\s+\",\n        next: \"listblock-start\"\n      }, {\n        include: \"basic\",\n        noEscape: true\n      }, codeBlockStartRule, {\n        defaultToken: \"list\" //do not use markup.list to allow stling leading `*` differntly\n\n      }],\n      \"blockquote\": [{\n        // Blockquotes only escape on blank lines.\n        token: \"empty_line\",\n        regex: \"^\\\\s*$\",\n        next: \"start\"\n      }, {\n        // block quote\n        token: \"string.blockquote\",\n        regex: \"^\\\\s*>\\\\s*(?:[*+-]|\\\\d+\\\\.)?\\\\s+\",\n        next: \"blockquote\"\n      }, {\n        include: \"basic\",\n        noEscape: true\n      }, {\n        defaultToken: \"string.blockquote\"\n      }],\n      \"githubblock\": codeBlockRules\n    });\n    this.normalizeRules();\n  };\n\n  oop.inherits(MarkdownHighlightRules, TextHighlightRules);\n  exports.MarkdownHighlightRules = MarkdownHighlightRules;\n});\nace.define(\"ace/mode/scss_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/text_highlight_rules\", \"ace/mode/css_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var lang = require(\"../lib/lang\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var CssHighlightRules = require(\"./css_highlight_rules\");\n\n  var ScssHighlightRules = function ScssHighlightRules() {\n    var properties = lang.arrayToMap(CssHighlightRules.supportType.split(\"|\"));\n    var functions = lang.arrayToMap((\"hsl|hsla|rgb|rgba|url|attr|counter|counters|abs|adjust_color|adjust_hue|\" + \"alpha|join|blue|ceil|change_color|comparable|complement|darken|desaturate|\" + \"floor|grayscale|green|hue|if|invert|join|length|lighten|lightness|mix|\" + \"nth|opacify|opacity|percentage|quote|red|round|saturate|saturation|\" + \"scale_color|transparentize|type_of|unit|unitless|unquote\").split(\"|\"));\n    var constants = lang.arrayToMap(CssHighlightRules.supportConstant.split(\"|\"));\n    var colors = lang.arrayToMap(CssHighlightRules.supportConstantColor.split(\"|\"));\n    var keywords = lang.arrayToMap(\"@mixin|@extend|@include|@import|@media|@debug|@warn|@if|@for|@each|@while|@else|@font-face|@-webkit-keyframes|if|and|!default|module|def|end|declare\".split(\"|\"));\n    var tags = lang.arrayToMap((\"a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdo|\" + \"big|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|\" + \"command|datalist|dd|del|details|dfn|dir|div|dl|dt|em|embed|fieldset|\" + \"figcaption|figure|font|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|\" + \"header|hgroup|hr|html|i|iframe|img|input|ins|keygen|kbd|label|legend|li|\" + \"link|map|mark|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|\" + \"option|output|p|param|pre|progress|q|rp|rt|ruby|s|samp|script|section|select|\" + \"small|source|span|strike|strong|style|sub|summary|sup|table|tbody|td|\" + \"textarea|tfoot|th|thead|time|title|tr|tt|u|ul|var|video|wbr|xmp\").split(\"|\"));\n    var numRe = \"\\\\-?(?:(?:[0-9]+)|(?:[0-9]*\\\\.[0-9]+))\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"\\\\/\\\\/.*$\"\n      }, {\n        token: \"comment\",\n        // multi line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: '[\"].*\\\\\\\\$',\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: \"['].*\\\\\\\\$\",\n        next: \"qstring\"\n      }, {\n        token: \"constant.numeric\",\n        regex: numRe + \"(?:ch|cm|deg|em|ex|fr|gd|grad|Hz|in|kHz|mm|ms|pc|pt|px|rad|rem|s|turn|vh|vmax|vmin|vm|vw|%)\"\n      }, {\n        token: \"constant.numeric\",\n        // hex6 color\n        regex: \"#[a-f0-9]{6}\"\n      }, {\n        token: \"constant.numeric\",\n        // hex3 color\n        regex: \"#[a-f0-9]{3}\"\n      }, {\n        token: \"constant.numeric\",\n        regex: numRe\n      }, {\n        token: [\"support.function\", \"string\", \"support.function\"],\n        regex: \"(url\\\\()(.*)(\\\\))\"\n      }, {\n        token: function token(value) {\n          if (properties.hasOwnProperty(value.toLowerCase())) return \"support.type\";\n          if (keywords.hasOwnProperty(value)) return \"keyword\";else if (constants.hasOwnProperty(value)) return \"constant.language\";else if (functions.hasOwnProperty(value)) return \"support.function\";else if (colors.hasOwnProperty(value.toLowerCase())) return \"support.constant.color\";else if (tags.hasOwnProperty(value.toLowerCase())) return \"variable.language\";else return \"text\";\n        },\n        regex: \"\\\\-?[@a-z_][@a-z0-9_\\\\-]*\"\n      }, {\n        token: \"variable\",\n        regex: \"[a-z_\\\\-$][a-z0-9_\\\\-$]*\\\\b\"\n      }, {\n        token: \"variable.language\",\n        regex: \"#[a-z0-9-_]+\"\n      }, {\n        token: \"variable.language\",\n        regex: \"\\\\.[a-z0-9-_]+\"\n      }, {\n        token: \"variable.language\",\n        regex: \":[a-z0-9-_]+\"\n      }, {\n        token: \"constant\",\n        regex: \"[a-z0-9-_]+\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"<|>|<=|>=|==|!=|-|%|#|\\\\+|\\\\$|\\\\+|\\\\*\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }, {\n        caseInsensitive: true\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"qqstring\": [{\n        token: \"string\",\n        regex: '(?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?\"',\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }],\n      \"qstring\": [{\n        token: \"string\",\n        regex: \"(?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?'\",\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }]\n    };\n  };\n\n  oop.inherits(ScssHighlightRules, TextHighlightRules);\n  exports.ScssHighlightRules = ScssHighlightRules;\n});\nace.define(\"ace/mode/less_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\", \"ace/mode/css_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var CssHighlightRules = require('./css_highlight_rules');\n\n  var LessHighlightRules = function LessHighlightRules() {\n    var keywordList = \"@import|@media|@font-face|@keyframes|@-webkit-keyframes|@supports|\" + \"@charset|@plugin|@namespace|@document|@page|@viewport|@-ms-viewport|\" + \"or|and|when|not\";\n    var keywords = keywordList.split('|');\n    var properties = CssHighlightRules.supportType.split('|');\n    var keywordMapper = this.createKeywordMapper({\n      \"support.constant\": CssHighlightRules.supportConstant,\n      \"keyword\": keywordList,\n      \"support.constant.color\": CssHighlightRules.supportConstantColor,\n      \"support.constant.fonts\": CssHighlightRules.supportConstantFonts\n    }, \"identifier\", true);\n    var numRe = \"\\\\-?(?:(?:[0-9]+)|(?:[0-9]*\\\\.[0-9]+))\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"\\\\/\\\\/.*$\"\n      }, {\n        token: \"comment\",\n        // multi line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n      }, {\n        token: \"string\",\n        // single line\n        regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n      }, {\n        token: [\"constant.numeric\", \"keyword\"],\n        regex: \"(\" + numRe + \")(ch|cm|deg|em|ex|fr|gd|grad|Hz|in|kHz|mm|ms|pc|pt|px|rad|rem|s|turn|vh|vm|vw|%)\"\n      }, {\n        token: \"constant.numeric\",\n        // hex6 color\n        regex: \"#[a-f0-9]{6}\"\n      }, {\n        token: \"constant.numeric\",\n        // hex3 color\n        regex: \"#[a-f0-9]{3}\"\n      }, {\n        token: \"constant.numeric\",\n        regex: numRe\n      }, {\n        token: [\"support.function\", \"paren.lparen\", \"string\", \"paren.rparen\"],\n        regex: \"(url)(\\\\()(.*)(\\\\))\"\n      }, {\n        token: [\"support.function\", \"paren.lparen\"],\n        regex: \"(:extend|[a-z0-9_\\\\-]+)(\\\\()\"\n      }, {\n        token: function token(value) {\n          if (keywords.indexOf(value.toLowerCase()) > -1) return \"keyword\";else return \"variable\";\n        },\n        regex: \"[@\\\\$][a-z0-9_\\\\-@\\\\$]*\\\\b\"\n      }, {\n        token: \"variable\",\n        regex: \"[@\\\\$]\\\\{[a-z0-9_\\\\-@\\\\$]*\\\\}\"\n      }, {\n        token: function token(first, second) {\n          if (properties.indexOf(first.toLowerCase()) > -1) {\n            return [\"support.type.property\", \"text\"];\n          } else {\n            return [\"support.type.unknownProperty\", \"text\"];\n          }\n        },\n        regex: \"([a-z0-9-_]+)(\\\\s*:)\"\n      }, {\n        token: \"keyword\",\n        regex: \"&\" // special case - always treat as keyword\n\n      }, {\n        token: keywordMapper,\n        regex: \"\\\\-?[@a-z_][@a-z0-9_\\\\-]*\"\n      }, {\n        token: \"variable.language\",\n        regex: \"#[a-z0-9-_]+\"\n      }, {\n        token: \"variable.language\",\n        regex: \"\\\\.[a-z0-9-_]+\"\n      }, {\n        token: \"variable.language\",\n        regex: \":[a-z_][a-z0-9-_]*\"\n      }, {\n        token: \"constant\",\n        regex: \"[a-z0-9-_]+\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"<|>|<=|>=|=|!=|-|%|\\\\+|\\\\*\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }, {\n        caseInsensitive: true\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(LessHighlightRules, TextHighlightRules);\n  exports.LessHighlightRules = LessHighlightRules;\n});\nace.define(\"ace/mode/coffee_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  oop.inherits(CoffeeHighlightRules, TextHighlightRules);\n\n  function CoffeeHighlightRules() {\n    var identifier = \"[$A-Za-z_\\\\x7f-\\\\uffff][$\\\\w\\\\x7f-\\\\uffff]*\";\n    var keywords = \"this|throw|then|try|typeof|super|switch|return|break|by|continue|\" + \"catch|class|in|instanceof|is|isnt|if|else|extends|for|own|\" + \"finally|function|while|when|new|no|not|delete|debugger|do|loop|of|off|\" + \"or|on|unless|until|and|yes|yield|export|import|default\";\n    var langConstant = \"true|false|null|undefined|NaN|Infinity\";\n    var illegal = \"case|const|function|var|void|with|enum|implements|\" + \"interface|let|package|private|protected|public|static\";\n    var supportClass = \"Array|Boolean|Date|Function|Number|Object|RegExp|ReferenceError|String|\" + \"Error|EvalError|InternalError|RangeError|ReferenceError|StopIteration|\" + \"SyntaxError|TypeError|URIError|\" + \"ArrayBuffer|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|\" + \"Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray\";\n    var supportFunction = \"Math|JSON|isNaN|isFinite|parseInt|parseFloat|encodeURI|\" + \"encodeURIComponent|decodeURI|decodeURIComponent|String|\";\n    var variableLanguage = \"window|arguments|prototype|document\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword\": keywords,\n      \"constant.language\": langConstant,\n      \"invalid.illegal\": illegal,\n      \"language.support.class\": supportClass,\n      \"language.support.function\": supportFunction,\n      \"variable.language\": variableLanguage\n    }, \"identifier\");\n    var functionRule = {\n      token: [\"paren.lparen\", \"variable.parameter\", \"paren.rparen\", \"text\", \"storage.type\"],\n      regex: /(?:(\\()((?:\"[^\")]*?\"|'[^')]*?'|\\/[^\\/)]*?\\/|[^()\"'\\/])*?)(\\))(\\s*))?([\\-=]>)/.source\n    };\n    var stringEscape = /\\\\(?:x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)/;\n    this.$rules = {\n      start: [{\n        token: \"constant.numeric\",\n        regex: \"(?:0x[\\\\da-fA-F]+|(?:\\\\d+(?:\\\\.\\\\d+)?|\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?)\"\n      }, {\n        stateName: \"qdoc\",\n        token: \"string\",\n        regex: \"'''\",\n        next: [{\n          token: \"string\",\n          regex: \"'''\",\n          next: \"start\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: stringEscape\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"qqdoc\",\n        token: \"string\",\n        regex: '\"\"\"',\n        next: [{\n          token: \"string\",\n          regex: '\"\"\"',\n          next: \"start\"\n        }, {\n          token: \"paren.string\",\n          regex: '#{',\n          push: \"start\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: stringEscape\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"qstring\",\n        token: \"string\",\n        regex: \"'\",\n        next: [{\n          token: \"string\",\n          regex: \"'\",\n          next: \"start\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: stringEscape\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"qqstring\",\n        token: \"string.start\",\n        regex: '\"',\n        next: [{\n          token: \"string.end\",\n          regex: '\"',\n          next: \"start\"\n        }, {\n          token: \"paren.string\",\n          regex: '#{',\n          push: \"start\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: stringEscape\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"js\",\n        token: \"string\",\n        regex: \"`\",\n        next: [{\n          token: \"string\",\n          regex: \"`\",\n          next: \"start\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: stringEscape\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        regex: \"[{}]\",\n        onMatch: function onMatch(val, state, stack) {\n          this.next = \"\";\n\n          if (val == \"{\" && stack.length) {\n            stack.unshift(\"start\", state);\n            return \"paren\";\n          }\n\n          if (val == \"}\" && stack.length) {\n            stack.shift();\n            this.next = stack.shift() || \"\";\n            if (this.next.indexOf(\"string\") != -1) return \"paren.string\";\n          }\n\n          return \"paren\";\n        }\n      }, {\n        token: \"string.regex\",\n        regex: \"///\",\n        next: \"heregex\"\n      }, {\n        token: \"string.regex\",\n        regex: /(?:\\/(?![\\s=])[^[\\/\\n\\\\]*(?:(?:\\\\[\\s\\S]|\\[[^\\]\\n\\\\]*(?:\\\\[\\s\\S][^\\]\\n\\\\]*)*])[^[\\/\\n\\\\]*)*\\/)(?:[imgy]{0,4})(?!\\w)/\n      }, {\n        token: \"comment\",\n        regex: \"###(?!#)\",\n        next: \"comment\"\n      }, {\n        token: \"comment\",\n        regex: \"#.*\"\n      }, {\n        token: [\"punctuation.operator\", \"text\", \"identifier\"],\n        regex: \"(\\\\.)(\\\\s*)(\" + illegal + \")\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"\\\\.{1,3}\"\n      }, {\n        token: [\"keyword\", \"text\", \"language.support.class\", \"text\", \"keyword\", \"text\", \"language.support.class\"],\n        regex: \"(class)(\\\\s+)(\" + identifier + \")(?:(\\\\s+)(extends)(\\\\s+)(\" + identifier + \"))?\"\n      }, {\n        token: [\"entity.name.function\", \"text\", \"keyword.operator\", \"text\"].concat(functionRule.token),\n        regex: \"(\" + identifier + \")(\\\\s*)([=:])(\\\\s*)\" + functionRule.regex\n      }, functionRule, {\n        token: \"variable\",\n        regex: \"@(?:\" + identifier + \")?\"\n      }, {\n        token: keywordMapper,\n        regex: identifier\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"\\\\,|\\\\.\"\n      }, {\n        token: \"storage.type\",\n        regex: \"[\\\\-=]>\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"(?:[-+*/%<>&|^!?=]=|>>>=?|\\\\-\\\\-|\\\\+\\\\+|::|&&=|\\\\|\\\\|=|<<=|>>=|\\\\?\\\\.|\\\\.{2,3}|[!*+-=><])\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[({[]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\]})]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      heregex: [{\n        token: \"string.regex\",\n        regex: '.*?///[imgy]{0,4}',\n        next: \"start\"\n      }, {\n        token: \"comment.regex\",\n        regex: \"\\\\s+(?:#.*)?\"\n      }, {\n        token: \"string.regex\",\n        regex: \"\\\\S+\"\n      }],\n      comment: [{\n        token: \"comment\",\n        regex: '###',\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }]\n    };\n    this.normalizeRules();\n  }\n\n  exports.CoffeeHighlightRules = CoffeeHighlightRules;\n});\nace.define(\"ace/mode/jade_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\", \"ace/mode/markdown_highlight_rules\", \"ace/mode/scss_highlight_rules\", \"ace/mode/less_highlight_rules\", \"ace/mode/coffee_highlight_rules\", \"ace/mode/javascript_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var MarkdownHighlightRules = require(\"./markdown_highlight_rules\").MarkdownHighlightRules;\n\n  var SassHighlightRules = require(\"./scss_highlight_rules\").ScssHighlightRules;\n\n  var LessHighlightRules = require(\"./less_highlight_rules\").LessHighlightRules;\n\n  var CoffeeHighlightRules = require(\"./coffee_highlight_rules\").CoffeeHighlightRules;\n\n  var JavaScriptHighlightRules = require(\"./javascript_highlight_rules\").JavaScriptHighlightRules;\n\n  function mixin_embed(tag, prefix) {\n    return {\n      token: \"entity.name.function.jade\",\n      regex: \"^\\\\s*\\\\:\" + tag,\n      next: prefix + \"start\"\n    };\n  }\n\n  var JadeHighlightRules = function JadeHighlightRules() {\n    var escapedRe = \"\\\\\\\\(?:x[0-9a-fA-F]{2}|\" + // hex\n    \"u[0-9a-fA-F]{4}|\" + // unicode\n    \"[0-2][0-7]{0,2}|\" + // oct\n    \"3[0-6][0-7]?|\" + // oct\n    \"37[0-7]?|\" + // oct\n    \"[4-7][0-7]?|\" + //oct\n    \".)\";\n    this.$rules = {\n      \"start\": [{\n        token: \"keyword.control.import.include.jade\",\n        regex: \"\\\\s*\\\\binclude\\\\b\"\n      }, {\n        token: \"keyword.other.doctype.jade\",\n        regex: \"^!!!\\\\s*(?:[a-zA-Z0-9-_]+)?\"\n      }, {\n        onMatch: function onMatch(value, currentState, stack) {\n          stack.unshift(this.next, value.length - 2, currentState);\n          return \"comment\";\n        },\n        regex: /^\\s*\\/\\//,\n        next: \"comment_block\"\n      }, mixin_embed(\"markdown\", \"markdown-\"), mixin_embed(\"sass\", \"sass-\"), mixin_embed(\"less\", \"less-\"), mixin_embed(\"coffee\", \"coffee-\"), {\n        token: [\"storage.type.function.jade\", \"entity.name.function.jade\", \"punctuation.definition.parameters.begin.jade\", \"variable.parameter.function.jade\", \"punctuation.definition.parameters.end.jade\"],\n        regex: \"^(\\\\s*mixin)( [\\\\w\\\\-]+)(\\\\s*\\\\()(.*?)(\\\\))\"\n      }, {\n        token: [\"storage.type.function.jade\", \"entity.name.function.jade\"],\n        regex: \"^(\\\\s*mixin)( [\\\\w\\\\-]+)\"\n      }, {\n        token: \"source.js.embedded.jade\",\n        regex: \"^\\\\s*(?:-|=|!=)\",\n        next: \"js-start\"\n      }, {\n        token: \"string.interpolated.jade\",\n        regex: \"[#!]\\\\{[^\\\\}]+\\\\}\"\n      }, {\n        token: \"meta.tag.any.jade\",\n        regex: /^\\s*(?!\\w+:)(?:[\\w-]+|(?=\\.|#)])/,\n        next: \"tag_single\"\n      }, {\n        token: \"suport.type.attribute.id.jade\",\n        regex: \"#\\\\w+\"\n      }, {\n        token: \"suport.type.attribute.class.jade\",\n        regex: \"\\\\.\\\\w+\"\n      }, {\n        token: \"punctuation\",\n        regex: \"\\\\s*(?:\\\\()\",\n        next: \"tag_attributes\"\n      }],\n      \"comment_block\": [{\n        regex: /^\\s*(?:\\/\\/)?/,\n        onMatch: function onMatch(value, currentState, stack) {\n          if (value.length <= stack[1]) {\n            if (value.slice(-1) == \"/\") {\n              stack[1] = value.length - 2;\n              this.next = \"\";\n              return \"comment\";\n            }\n\n            stack.shift();\n            stack.shift();\n            this.next = stack.shift();\n            return \"text\";\n          } else {\n            this.next = \"\";\n            return \"comment\";\n          }\n        },\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"tag_single\": [{\n        token: \"entity.other.attribute-name.class.jade\",\n        regex: \"\\\\.[\\\\w-]+\"\n      }, {\n        token: \"entity.other.attribute-name.id.jade\",\n        regex: \"#[\\\\w-]+\"\n      }, {\n        token: [\"text\", \"punctuation\"],\n        regex: \"($)|((?!\\\\.|#|=|-))\",\n        next: \"start\"\n      }],\n      \"tag_attributes\": [{\n        token: \"string\",\n        regex: \"'(?=.)\",\n        next: \"qstring\"\n      }, {\n        token: \"string\",\n        regex: '\"(?=.)',\n        next: \"qqstring\"\n      }, {\n        token: [\"entity.other.attribute-name.jade\", \"punctuation\"],\n        regex: \"([a-zA-Z:\\\\.-]+)(=)?\",\n        next: \"attribute_strings\"\n      }, {\n        token: \"punctuation\",\n        regex: \"\\\\)\",\n        next: \"start\"\n      }],\n      \"attribute_strings\": [{\n        token: \"string\",\n        regex: \"'(?=.)\",\n        next: \"qstring\"\n      }, {\n        token: \"string\",\n        regex: '\"(?=.)',\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '(?=\\\\S)',\n        next: \"tag_attributes\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.language.escape\",\n        regex: escapedRe\n      }, {\n        token: \"string\",\n        regex: '[^\"\\\\\\\\]+'\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"tag_attributes\"\n      }],\n      \"qstring\": [{\n        token: \"constant.language.escape\",\n        regex: escapedRe\n      }, {\n        token: \"string\",\n        regex: \"[^'\\\\\\\\]+\"\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qstring\"\n      }, {\n        token: \"string\",\n        regex: \"'|$\",\n        next: \"tag_attributes\"\n      }]\n    };\n    this.embedRules(JavaScriptHighlightRules, \"js-\", [{\n      token: \"text\",\n      regex: \".$\",\n      next: \"start\"\n    }]);\n  };\n\n  oop.inherits(JadeHighlightRules, TextHighlightRules);\n  exports.JadeHighlightRules = JadeHighlightRules;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var Range = require(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/jade\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/jade_highlight_rules\", \"ace/mode/folding/coffee\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var JadeHighlightRules = require(\"./jade_highlight_rules\").JadeHighlightRules;\n\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = JadeHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.$id = \"ace/mode/jade\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/jade\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}