{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { withConfigConsumer } from '../config-provider/context';\nimport StatisticNumber from './Number';\n\nvar Statistic = function Statistic(props) {\n  var prefixCls = props.prefixCls,\n      className = props.className,\n      style = props.style,\n      valueStyle = props.valueStyle,\n      _props$value = props.value,\n      value = _props$value === void 0 ? 0 : _props$value,\n      title = props.title,\n      valueRender = props.valueRender,\n      prefix = props.prefix,\n      suffix = props.suffix,\n      direction = props.direction;\n  var valueNode = /*#__PURE__*/React.createElement(StatisticNumber, _extends({}, props, {\n    value: value\n  }));\n\n  if (valueRender) {\n    valueNode = valueRender(valueNode);\n  }\n\n  var cls = classNames(prefixCls, className, _defineProperty({}, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: cls,\n    style: style\n  }, title && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-title\")\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    style: valueStyle,\n    className: \"\".concat(prefixCls, \"-content\")\n  }, prefix && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-prefix\")\n  }, prefix), valueNode, suffix && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-suffix\")\n  }, suffix)));\n};\n\nStatistic.defaultProps = {\n  decimalSeparator: '.',\n  groupSeparator: ','\n};\nvar WrapperStatistic = withConfigConsumer({\n  prefixCls: 'statistic'\n})(Statistic);\nexport default WrapperStatistic;","map":null,"metadata":{},"sourceType":"module"}