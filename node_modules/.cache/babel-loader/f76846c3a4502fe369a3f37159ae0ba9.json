{"ast":null,"code":"ace.define(\"ace/mode/zeek_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var ZeekHighlightRules = function ZeekHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.line\",\n        regex: \"#.*$\"\n      }, {\n        token: \"string.double\",\n        regex: /\"/,\n        next: \"string-state\"\n      }, {\n        token: \"string.regexp\",\n        regex: \"(/)(?=.*/)\",\n        next: \"pattern-state\"\n      }, {\n        token: [\"keyword.other\", \"meta.preprocessor\"],\n        regex: /(@(?:load-plugin|load-sigs|load|unload))(.*$)/\n      }, {\n        token: \"keyword.other\",\n        regex: /@(?:DEBUG|DIR|FILENAME|deprecated|if|ifdef|ifndef|else|endif)/\n      }, {\n        token: [\"keyword.other\", \"meta.preprocessor\", \"keyword.operator\", \"meta.preprocessor\"],\n        regex: /(@prefixes)(\\s*)(\\+?=)(.*$)/\n      }, {\n        token: \"storage.modifier.attribute\",\n        regex: /\\&\\b(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|error_handler|type_column|deprecated)\\b/\n      }, {\n        token: \"constant.language\",\n        regex: /\\b(?:T|F)\\b/\n      }, {\n        token: \"constant.numeric.port\",\n        regex: /\\b\\d{1,5}\\/(?:udp|tcp|icmp|unknown)\\b/\n      }, {\n        token: \"constant.numeric.addr\",\n        regex: /\\b(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\b/,\n        comment: \"IPv4 address\"\n      }, {\n        token: \"constant.numeric.addr\",\n        regex: /\\[(?:[0-9a-fA-F]{0,4}:){2,7}(?:[0-9a-fA-F]{0,4})?(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2}))?\\]/,\n        comment: \"IPv6 address\"\n      }, {\n        token: \"constant.numeric.float.decimal.interval\",\n        regex: /(?:(?:\\d*\\.\\d*(?:[eE][+-]?\\d+)?|\\d*[eE][+-]?\\d+|\\d*\\.\\d*)|\\d+)\\s*(?:day|hr|min|msec|usec|sec)s?/\n      }, {\n        token: \"constant.numeric.float.decimal\",\n        regex: /\\d*\\.\\d*(?:[eE][+-]?\\d+)?|\\d*[eE][+-]?\\d+|\\d*\\.\\d*/\n      }, {\n        token: \"constant.numeric.hostname\",\n        regex: /\\b[A-Za-z0-9][A-Za-z0-9\\-]*(?:\\.[A-Za-z0-9][A-Za-z0-9\\-]*)+\\b/\n      }, {\n        token: \"constant.numeric.integer.hexadecimal\",\n        regex: /\\b0x[0-9a-fA-F]+\\b/\n      }, {\n        token: \"constant.numeric.integer.decimal\",\n        regex: /\\b\\d+\\b/\n      }, {\n        token: \"keyword.operator\",\n        regex: /==|!=|<=|<|>=|>/\n      }, {\n        token: \"keyword.operator\",\n        regex: /(&&)|(\\|\\|)|(!)/\n      }, {\n        token: \"keyword.operator\",\n        regex: /=|\\+=|-=/\n      }, {\n        token: \"keyword.operator\",\n        regex: /\\+\\+|\\+|--|-|\\*|\\/|%/\n      }, {\n        token: \"keyword.operator\",\n        regex: /&|\\||\\^|~/\n      }, {\n        token: \"keyword.operator\",\n        regex: /\\b(?:in|as|is)\\b/\n      }, {\n        token: \"punctuation.terminator\",\n        regex: /;/\n      }, {\n        token: \"punctuation.accessor\",\n        regex: /\\??\\$/\n      }, {\n        token: \"punctuation.accessor\",\n        regex: /::/\n      }, {\n        token: \"keyword.operator\",\n        regex: /\\?/\n      }, {\n        token: \"punctuation.separator\",\n        regex: /:/\n      }, {\n        token: \"punctuation.separator\",\n        regex: /,/\n      }, {\n        token: [\"keyword.other\", \"meta.namespace\", \"entity.name.namespace\"],\n        regex: /(module)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)/\n      }, {\n        token: \"keyword.other\",\n        regex: /\\bexport\\b/\n      }, {\n        token: \"keyword.control.conditional\",\n        regex: /\\b(?:if|else)\\b/\n      }, {\n        token: \"keyword.control\",\n        regex: /\\b(?:for|while)\\b/\n      }, {\n        token: \"keyword.control\",\n        regex: /\\b(?:return|break|next|continue|fallthrough)\\b/\n      }, {\n        token: \"keyword.control\",\n        regex: /\\b(?:switch|default|case)\\b/\n      }, {\n        token: \"keyword.other\",\n        regex: /\\b(?:add|delete)\\b/\n      }, {\n        token: \"keyword.other\",\n        regex: /\\bprint\\b/\n      }, {\n        token: \"keyword.control\",\n        regex: /\\b(?:when|timeout|schedule)\\b/\n      }, {\n        token: [\"keyword.other\", \"meta.struct.record\", \"entity.name.struct.record\", \"meta.struct.record\", \"punctuation.separator\", \"meta.struct.record\", \"storage.type.struct.record\"],\n        regex: /\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)(\\s*\\b)(record)\\b/\n      }, {\n        token: [\"keyword.other\", \"meta.enum\", \"entity.name.enum\", \"meta.enum\", \"punctuation.separator\", \"meta.enum\", \"storage.type.enum\"],\n        regex: /\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)(\\s*\\b)(enum)\\b/\n      }, {\n        token: [\"keyword.other\", \"meta.type\", \"entity.name.type\", \"meta.type\", \"punctuation.separator\"],\n        regex: /\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)/\n      }, {\n        token: [\"keyword.other\", \"meta.struct.record\", \"storage.type.struct.record\", \"meta.struct.record\", \"entity.name.struct.record\"],\n        regex: /\\b(redef)(\\s+)(record)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/\n      }, {\n        token: [\"keyword.other\", \"meta.enum\", \"storage.type.enum\", \"meta.enum\", \"entity.name.enum\"],\n        regex: /\\b(redef)(\\s+)(enum)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/\n      }, {\n        token: [\"storage.type\", \"text\", \"entity.name.function.event\"],\n        regex: /\\b(event)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/\n      }, {\n        token: [\"storage.type\", \"text\", \"entity.name.function.hook\"],\n        regex: /\\b(hook)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/\n      }, {\n        token: [\"storage.type\", \"text\", \"entity.name.function\"],\n        regex: /\\b(function)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/\n      }, {\n        token: \"keyword.other\",\n        regex: /\\bredef\\b/\n      }, {\n        token: \"storage.type\",\n        regex: /\\bany\\b/\n      }, {\n        token: \"storage.type\",\n        regex: /\\b(?:enum|record|set|table|vector)\\b/\n      }, {\n        token: [\"storage.type\", \"text\", \"keyword.operator\", \"text\", \"storage.type\"],\n        regex: /\\b(opaque)(\\s+)(of)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/\n      }, {\n        token: \"keyword.operator\",\n        regex: /\\bof\\b/\n      }, {\n        token: \"storage.type\",\n        regex: /\\b(?:addr|bool|count|double|file|int|interval|pattern|port|string|subnet|time)\\b/\n      }, {\n        token: \"storage.type\",\n        regex: /\\b(?:function|hook|event)\\b/\n      }, {\n        token: \"storage.modifier\",\n        regex: /\\b(?:global|local|const|option)\\b/\n      }, {\n        token: \"entity.name.function.call\",\n        regex: /\\b[A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*(?=s*\\()/\n      }, {\n        token: \"punctuation.section.block.begin\",\n        regex: /\\{/\n      }, {\n        token: \"punctuation.section.block.end\",\n        regex: /\\}/\n      }, {\n        token: \"punctuation.section.brackets.begin\",\n        regex: /\\[/\n      }, {\n        token: \"punctuation.section.brackets.end\",\n        regex: /\\]/\n      }, {\n        token: \"punctuation.section.parens.begin\",\n        regex: /\\(/\n      }, {\n        token: \"punctuation.section.parens.end\",\n        regex: /\\)/\n      }],\n      // state: start\n      \"string-state\": [{\n        token: \"constant.character.escape\",\n        regex: /\\\\./\n      }, {\n        token: \"string.double\",\n        regex: /\"/,\n        next: \"start\"\n      }, {\n        token: \"constant.other.placeholder\",\n        regex: /%-?[0-9]*(\\.[0-9]+)?[DTdxsefg]/\n      }, {\n        token: \"string.double\",\n        regex: \".\"\n      }],\n      // state: string-state\n      \"pattern-state\": [{\n        token: \"constant.character.escape\",\n        regex: /\\\\./\n      }, {\n        token: \"string.regexp\",\n        regex: \"/\",\n        next: \"start\"\n      }, {\n        token: \"string.regexp\",\n        regex: \".\"\n      }] // state: pattern-state\n\n    };\n    this.normalizeRules();\n  };\n\n  ZeekHighlightRules.metaData = {\n    fileTypes: [\"bro\", \"zeek\"],\n    name: \"Zeek\",\n    scopeName: \"source.zeek\"\n  };\n  oop.inherits(ZeekHighlightRules, TextHighlightRules);\n  exports.ZeekHighlightRules = ZeekHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/zeek\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/zeek_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var ZeekHighlightRules = require(\"./zeek_highlight_rules\").ZeekHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = ZeekHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/zeek\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/zeek\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}