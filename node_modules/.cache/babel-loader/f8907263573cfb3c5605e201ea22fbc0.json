{"ast":null,"code":"ace.define(\"ace/mode/logiql_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var LogiQLHighlightRules = function LogiQLHighlightRules() {\n    this.$rules = {\n      start: [{\n        token: 'comment.block',\n        regex: '/\\\\*',\n        push: [{\n          token: 'comment.block',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block'\n        }]\n      }, {\n        token: 'comment.single',\n        regex: '//.*'\n      }, {\n        token: 'constant.numeric',\n        regex: '\\\\d+(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?[fd]?'\n      }, {\n        token: 'string',\n        regex: '\"',\n        push: [{\n          token: 'string',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          defaultToken: 'string'\n        }]\n      }, {\n        token: 'constant.language',\n        regex: '\\\\b(true|false)\\\\b'\n      }, {\n        token: 'entity.name.type.logicblox',\n        regex: '`[a-zA-Z_:]+(\\\\d|\\\\a)*\\\\b'\n      }, {\n        token: 'keyword.start',\n        regex: '->',\n        comment: 'Constraint'\n      }, {\n        token: 'keyword.start',\n        regex: '-->',\n        comment: 'Level 1 Constraint'\n      }, {\n        token: 'keyword.start',\n        regex: '<-',\n        comment: 'Rule'\n      }, {\n        token: 'keyword.start',\n        regex: '<--',\n        comment: 'Level 1 Rule'\n      }, {\n        token: 'keyword.end',\n        regex: '\\\\.',\n        comment: 'Terminator'\n      }, {\n        token: 'keyword.other',\n        regex: '!',\n        comment: 'Negation'\n      }, {\n        token: 'keyword.other',\n        regex: ',',\n        comment: 'Conjunction'\n      }, {\n        token: 'keyword.other',\n        regex: ';',\n        comment: 'Disjunction'\n      }, {\n        token: 'keyword.operator',\n        regex: '<=|>=|!=|<|>',\n        comment: 'Equality'\n      }, {\n        token: 'keyword.other',\n        regex: '@',\n        comment: 'Equality'\n      }, {\n        token: 'keyword.operator',\n        regex: '\\\\+|-|\\\\*|/',\n        comment: 'Arithmetic operations'\n      }, {\n        token: 'keyword',\n        regex: '::',\n        comment: 'Colon colon'\n      }, {\n        token: 'support.function',\n        regex: '\\\\b(agg\\\\s*<<)',\n        push: [{\n          include: '$self'\n        }, {\n          token: 'support.function',\n          regex: '>>',\n          next: 'pop'\n        }]\n      }, {\n        token: 'storage.modifier',\n        regex: '\\\\b(lang:[\\\\w:]*)'\n      }, {\n        token: ['storage.type', 'text'],\n        regex: '(export|sealed|clauses|block|alias|alias_all)(\\\\s*\\\\()(?=`)'\n      }, {\n        token: 'entity.name',\n        regex: '[a-zA-Z_][a-zA-Z_0-9:]*(@prev|@init|@final)?(?=(\\\\(|\\\\[))'\n      }, {\n        token: 'variable.parameter',\n        regex: '([a-zA-Z][a-zA-Z_0-9]*|_)\\\\s*(?=(,|\\\\.|<-|->|\\\\)|\\\\]|=))'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(LogiQLHighlightRules, TextHighlightRules);\n  exports.LogiQLHighlightRules = LogiQLHighlightRules;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var Range = require(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/logiql\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/logiql_highlight_rules\", \"ace/mode/folding/coffee\", \"ace/token_iterator\", \"ace/range\", \"ace/mode/behaviour/cstyle\", \"ace/mode/matching_brace_outdent\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var LogiQLHighlightRules = require(\"./logiql_highlight_rules\").LogiQLHighlightRules;\n\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n\n  var TokenIterator = require(\"../token_iterator\").TokenIterator;\n\n  var Range = require(\"../range\").Range;\n\n  var CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var Mode = function Mode() {\n    this.HighlightRules = LogiQLHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n      if (/comment|string/.test(endState)) return indent;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment.single\") return indent;\n      var match = line.match();\n      if (/(-->|<--|<-|->|{)\\s*$/.test(line)) indent += tab;\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      if (this.$outdent.checkOutdent(line, input)) return true;\n      if (input !== \"\\n\" && input !== \"\\r\\n\") return false;\n      if (!/^\\s+/.test(line)) return false;\n      return true;\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      if (this.$outdent.autoOutdent(doc, row)) return;\n      var prevLine = doc.getLine(row);\n      var match = prevLine.match(/^\\s+/);\n      var column = prevLine.lastIndexOf(\".\") + 1;\n      if (!match || !row || !column) return 0;\n      var line = doc.getLine(row + 1);\n      var startRange = this.getMatching(doc, {\n        row: row,\n        column: column\n      });\n      if (!startRange || startRange.start.row == row) return 0;\n      column = match[0].length;\n      var indent = this.$getIndent(doc.getLine(startRange.start.row));\n      doc.replace(new Range(row + 1, 0, row + 1, column), indent);\n    };\n\n    this.getMatching = function (session, row, column) {\n      if (row == undefined) row = session.selection.lead;\n\n      if (typeof row == \"object\") {\n        column = row.column;\n        row = row.row;\n      }\n\n      var startToken = session.getTokenAt(row, column);\n      var KW_START = \"keyword.start\",\n          KW_END = \"keyword.end\";\n      var tok;\n      if (!startToken) return;\n\n      if (startToken.type == KW_START) {\n        var it = new TokenIterator(session, row, column);\n        it.step = it.stepForward;\n      } else if (startToken.type == KW_END) {\n        var it = new TokenIterator(session, row, column);\n        it.step = it.stepBackward;\n      } else return;\n\n      while (tok = it.step()) {\n        if (tok.type == KW_START || tok.type == KW_END) break;\n      }\n\n      if (!tok || tok.type == startToken.type) return;\n      var col = it.getCurrentTokenColumn();\n      var row = it.getCurrentTokenRow();\n      return new Range(row, col, row, col + tok.value.length);\n    };\n\n    this.$id = \"ace/mode/logiql\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/logiql\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}