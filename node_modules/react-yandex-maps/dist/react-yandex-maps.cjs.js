'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var reactIs_production_min = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports,"__esModule",{value:!0});
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.memo"):
60115,r=b?Symbol.for("react.lazy"):60116;function t(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return u}}case r:case q:case d:return u}}}function v(a){return t(a)===m}exports.typeOf=t;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;
exports.Fragment=e;exports.Lazy=r;exports.Memo=q;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||"object"===typeof a&&null!==a&&(a.$$typeof===r||a.$$typeof===q||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)};exports.isAsyncMode=function(a){return v(a)||t(a)===l};exports.isConcurrentMode=v;exports.isContextConsumer=function(a){return t(a)===k};
exports.isContextProvider=function(a){return t(a)===h};exports.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return t(a)===n};exports.isFragment=function(a){return t(a)===e};exports.isLazy=function(a){return t(a)===r};exports.isMemo=function(a){return t(a)===q};exports.isPortal=function(a){return t(a)===d};exports.isProfiler=function(a){return t(a)===g};exports.isStrictMode=function(a){return t(a)===f};
exports.isSuspense=function(a){return t(a)===p};
});

unwrapExports(reactIs_production_min);
var reactIs_production_min_1 = reactIs_production_min.typeOf;
var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
var reactIs_production_min_6 = reactIs_production_min.Element;
var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
var reactIs_production_min_8 = reactIs_production_min.Fragment;
var reactIs_production_min_9 = reactIs_production_min.Lazy;
var reactIs_production_min_10 = reactIs_production_min.Memo;
var reactIs_production_min_11 = reactIs_production_min.Portal;
var reactIs_production_min_12 = reactIs_production_min.Profiler;
var reactIs_production_min_13 = reactIs_production_min.StrictMode;
var reactIs_production_min_14 = reactIs_production_min.Suspense;
var reactIs_production_min_15 = reactIs_production_min.isValidElementType;
var reactIs_production_min_16 = reactIs_production_min.isAsyncMode;
var reactIs_production_min_17 = reactIs_production_min.isConcurrentMode;
var reactIs_production_min_18 = reactIs_production_min.isContextConsumer;
var reactIs_production_min_19 = reactIs_production_min.isContextProvider;
var reactIs_production_min_20 = reactIs_production_min.isElement;
var reactIs_production_min_21 = reactIs_production_min.isForwardRef;
var reactIs_production_min_22 = reactIs_production_min.isFragment;
var reactIs_production_min_23 = reactIs_production_min.isLazy;
var reactIs_production_min_24 = reactIs_production_min.isMemo;
var reactIs_production_min_25 = reactIs_production_min.isPortal;
var reactIs_production_min_26 = reactIs_production_min.isProfiler;
var reactIs_production_min_27 = reactIs_production_min.isStrictMode;
var reactIs_production_min_28 = reactIs_production_min.isSuspense;

var reactIs_development = createCommonjsModule(function (module, exports) {



if (process.env.NODE_ENV !== "production") {
  (function() {

Object.defineProperty(exports, '__esModule', { value: true });

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' ||
  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;
    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;
          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;
              default:
                return $$typeof;
            }
        }
      case REACT_LAZY_TYPE:
      case REACT_MEMO_TYPE:
      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
}

// AsyncMode is deprecated along with isAsyncMode
var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;

var hasWarnedAboutDeprecatedIsAsyncMode = false;

// AsyncMode should be deprecated
function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true;
      lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }
  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.typeOf = typeOf;
exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isValidElementType = isValidElementType;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
  })();
}
});

unwrapExports(reactIs_development);
var reactIs_development_1 = reactIs_development.typeOf;
var reactIs_development_2 = reactIs_development.AsyncMode;
var reactIs_development_3 = reactIs_development.ConcurrentMode;
var reactIs_development_4 = reactIs_development.ContextConsumer;
var reactIs_development_5 = reactIs_development.ContextProvider;
var reactIs_development_6 = reactIs_development.Element;
var reactIs_development_7 = reactIs_development.ForwardRef;
var reactIs_development_8 = reactIs_development.Fragment;
var reactIs_development_9 = reactIs_development.Lazy;
var reactIs_development_10 = reactIs_development.Memo;
var reactIs_development_11 = reactIs_development.Portal;
var reactIs_development_12 = reactIs_development.Profiler;
var reactIs_development_13 = reactIs_development.StrictMode;
var reactIs_development_14 = reactIs_development.Suspense;
var reactIs_development_15 = reactIs_development.isValidElementType;
var reactIs_development_16 = reactIs_development.isAsyncMode;
var reactIs_development_17 = reactIs_development.isConcurrentMode;
var reactIs_development_18 = reactIs_development.isContextConsumer;
var reactIs_development_19 = reactIs_development.isContextProvider;
var reactIs_development_20 = reactIs_development.isElement;
var reactIs_development_21 = reactIs_development.isForwardRef;
var reactIs_development_22 = reactIs_development.isFragment;
var reactIs_development_23 = reactIs_development.isLazy;
var reactIs_development_24 = reactIs_development.isMemo;
var reactIs_development_25 = reactIs_development.isPortal;
var reactIs_development_26 = reactIs_development.isProfiler;
var reactIs_development_27 = reactIs_development.isStrictMode;
var reactIs_development_28 = reactIs_development.isSuspense;

var reactIs = createCommonjsModule(function (module) {

if (process.env.NODE_ENV === 'production') {
  module.exports = reactIs_production_min;
} else {
  module.exports = reactIs_development;
}
});

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};

var checkPropTypes_1 = checkPropTypes;

var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning$1 = function() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning$1 = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning$1(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning$1(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has$1(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning$1(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = reactIs;

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});

var key = '__global_unique_id__';

var gud = function() {
  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction$1 = function emptyFunction() {};

emptyFunction$1.thatReturns = makeEmptyFunction;
emptyFunction$1.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction$1.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction$1.thatReturnsNull = makeEmptyFunction(null);
emptyFunction$1.thatReturnsThis = function () {
  return this;
};
emptyFunction$1.thatReturnsArgument = function (arg) {
  return arg;
};

var emptyFunction_1 = emptyFunction$1;

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction_1;

if (process.env.NODE_ENV !== 'production') {
  var printWarning$2 = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning$2.apply(undefined, [format].concat(args));
    }
  };
}

var warning_1 = warning;

var implementation = createCommonjsModule(function (module, exports) {

exports.__esModule = true;



var _react2 = _interopRequireDefault(React);



var _propTypes2 = _interopRequireDefault(propTypes);



var _gud2 = _interopRequireDefault(gud);



var _warning2 = _interopRequireDefault(warning_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MAX_SIGNED_31_BIT_INT = 1073741823;

// Inlined Object.is polyfill.
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
function objectIs(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function createEventEmitter(value) {
  var handlers = [];
  return {
    on: function on(handler) {
      handlers.push(handler);
    },
    off: function off(handler) {
      handlers = handlers.filter(function (h) {
        return h !== handler;
      });
    },
    get: function get() {
      return value;
    },
    set: function set(newValue, changedBits) {
      value = newValue;
      handlers.forEach(function (handler) {
        return handler(value, changedBits);
      });
    }
  };
}

function onlyChild(children) {
  return Array.isArray(children) ? children[0] : children;
}

function createReactContext(defaultValue, calculateChangedBits) {
  var _Provider$childContex, _Consumer$contextType;

  var contextProp = '__create-react-context-' + (0, _gud2.default)() + '__';

  var Provider = function (_Component) {
    _inherits(Provider, _Component);

    function Provider() {
      var _temp, _this, _ret;

      _classCallCheck(this, Provider);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.emitter = createEventEmitter(_this.props.value), _temp), _possibleConstructorReturn(_this, _ret);
    }

    Provider.prototype.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
    };

    Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        var oldValue = this.props.value;
        var newValue = nextProps.value;
        var changedBits = void 0;

        if (objectIs(oldValue, newValue)) {
          changedBits = 0; // No change
        } else {
          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          if (process.env.NODE_ENV !== 'production') {
            (0, _warning2.default)((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
          }

          changedBits |= 0;

          if (changedBits !== 0) {
            this.emitter.set(nextProps.value, changedBits);
          }
        }
      }
    };

    Provider.prototype.render = function render() {
      return this.props.children;
    };

    return Provider;
  }(React.Component);

  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes2.default.object.isRequired, _Provider$childContex);

  var Consumer = function (_Component2) {
    _inherits(Consumer, _Component2);

    function Consumer() {
      var _temp2, _this2, _ret2;

      _classCallCheck(this, Consumer);

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _Component2.call.apply(_Component2, [this].concat(args))), _this2), _this2.state = {
        value: _this2.getValue()
      }, _this2.onUpdate = function (newValue, changedBits) {
        var observedBits = _this2.observedBits | 0;
        if ((observedBits & changedBits) !== 0) {
          _this2.setState({ value: _this2.getValue() });
        }
      }, _temp2), _possibleConstructorReturn(_this2, _ret2);
    }

    Consumer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var observedBits = nextProps.observedBits;

      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
      : observedBits;
    };

    Consumer.prototype.componentDidMount = function componentDidMount() {
      if (this.context[contextProp]) {
        this.context[contextProp].on(this.onUpdate);
      }
      var observedBits = this.props.observedBits;

      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
      : observedBits;
    };

    Consumer.prototype.componentWillUnmount = function componentWillUnmount() {
      if (this.context[contextProp]) {
        this.context[contextProp].off(this.onUpdate);
      }
    };

    Consumer.prototype.getValue = function getValue() {
      if (this.context[contextProp]) {
        return this.context[contextProp].get();
      } else {
        return defaultValue;
      }
    };

    Consumer.prototype.render = function render() {
      return onlyChild(this.props.children)(this.state.value);
    };

    return Consumer;
  }(React.Component);

  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes2.default.object, _Consumer$contextType);


  return {
    Provider: Provider,
    Consumer: Consumer
  };
}

exports.default = createReactContext;
module.exports = exports['default'];
});

unwrapExports(implementation);

var lib = createCommonjsModule(function (module, exports) {

exports.__esModule = true;



var _react2 = _interopRequireDefault(React);



var _implementation2 = _interopRequireDefault(implementation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _react2.default.createContext || _implementation2.default;
module.exports = exports['default'];
});

var createReactContext = unwrapExports(lib);

var getDisplayName_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDisplayName;
function getDisplayName(Component) {
  return Component.displayName || Component.name || (typeof Component === 'string' && Component.length > 0 ? Component : 'Unknown');
}
});

var name = unwrapExports(getDisplayName_1);

var YMapsContext = createReactContext(null);
var withYMapsContext = function withYMapsContext(Component) {
  var displayName = name(Component);

  var WithYMapsContext = function WithYMapsContext(props) {
    return React.createElement(YMapsContext.Consumer, null, function (ymaps) {
      if (ymaps === null) {
        var message = "Couldn't find Yandex.Maps API in the context. " + "Make sure that <".concat(displayName, " /> is inside <YMaps /> provider");
        throw new Error(message);
      }

      return React.createElement(Component, _extends({
        ymaps: ymaps
      }, props));
    });
  };

  if (process.env.NODE_ENV !== 'production') {
    WithYMapsContext.displayName = "withYMapsContext(".concat(displayName, ")");
  }

  return WithYMapsContext;
};
var ParentContext = createReactContext(null);
var withParentContext = function withParentContext(Component) {
  var WithParentContext = function WithParentContext(props) {
    return React.createElement(ParentContext.Consumer, null, function (parent) {
      return React.createElement(Component, _extends({
        parent: parent
      }, props));
    });
  };

  if (process.env.NODE_ENV !== 'production') {
    WithParentContext.displayName = "withParentContext(".concat(name(Component), ")");
  }

  return WithParentContext;
};

/**
 * Set value in object by path
 *
 * @param {Object} object Object to set value to
 * @param {string | string[]} path Path to value
 * @param {any} value Value
 * @param {boolean} [ifNotExists] Will skip setting value if value exists
 */
var set = function set(object, path, value) {
  var ifNotExists = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  path = typeof path === 'string' ? path.split('.') : path.slice();
  var key,
      ref = object;

  while (path.length > 1) {
    key = path.shift();
    if (!ref[key]) ref[key] = {};
    ref = ref[key];
  }

  ref[path[0]] = ifNotExists === true ? ref[path[0]] || value : value;
  return object;
};

var defaultQuery = {
  lang: 'ru_RU',
  load: '',
  ns: '',
  mode: process.env.NODE_ENV !== 'production' ? 'debug' : 'release'
};
var YMapsPromiseMap = {};
var YMaps =
/*#__PURE__*/
function () {
  function YMaps(options) {
    _classCallCheck(this, YMaps);

    var hash = Date.now().toString(32);
    this.options = options;
    this.namespace = options.query.ns;
    this.onload = YMaps.onloadCallback + '$$' + hash;
    this.onerror = YMaps.onerrorCallback + '$$' + hash;
    this.api;
    this.promise;
  }

  _createClass(YMaps, [{
    key: "getApi",
    value: function getApi() {
      return typeof window !== 'undefined' && this.namespace ? window[this.namespace] : this.api;
    }
  }, {
    key: "setApi",
    value: function setApi(api) {
      return this.api = api;
    }
  }, {
    key: "getPromise",
    value: function getPromise() {
      return this.namespace ? YMapsPromiseMap[this.namespace] : this.promise;
    }
  }, {
    key: "setPromise",
    value: function setPromise(promise) {
      return this.namespace ? YMapsPromiseMap[this.namespace] = this.promise = promise : this.promise = promise;
    }
  }, {
    key: "load",
    value: function load() {
      var _this = this;

      if (this.getApi()) return Promise.resolve(this.setApi(this.getApi()));
      if (this.getPromise()) return this.setPromise(this.getPromise());
      var query = Object.assign({
        onload: this.onload,
        onerror: this.onerror
      }, defaultQuery, this.options.query);
      var queryString = Object.keys(query).map(function (key) {
        return "".concat(key, "=").concat(query[key]);
      }).join('&');
      var baseUrl = YMaps.getBaseUrl(this.options.enterprise);
      var url = [baseUrl, this.options.version, '?' + queryString].join('/');
      var promise = new Promise(function (resolve, reject) {
        window[_this.onload] = function (ymaps) {
          delete window[_this.onload];
          ymaps.loadModule = _this.loadModule.bind(_this);
          ymaps.ready(function () {
            return resolve(_this.setApi(ymaps));
          });
        };

        window[_this.onerror] = function (err) {
          delete window[_this.onerror];
          reject(err);
        };

        _this.fetchScript(url)["catch"](window[_this.onerror]);
      });
      return this.setPromise(promise);
    }
  }, {
    key: "fetchScript",
    value: function fetchScript(url) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _this2.script = document.createElement('script');
        _this2.script.type = 'text/javascript';
        _this2.script.onload = resolve;
        _this2.script.onerror = reject;
        _this2.script.src = url;
        _this2.script.async = 'async';
        document.head.appendChild(_this2.script);
      });
    }
  }, {
    key: "loadModule",
    value: function loadModule(moduleName) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        _this3.getApi().modules.require(moduleName, function (Module) {
          set(_this3.api, moduleName, Module, true);
          resolve(Module);
        }, reject, _this3.getApi());
      });
    }
  }]);

  return YMaps;
}();
YMaps._name = '__react-yandex-maps__';
YMaps.onloadCallback = '__yandex-maps-api-onload__';
YMaps.onerrorCallback = '__yandex-maps-api-onerror__';

YMaps.getBaseUrl = function getBaseUrl(isEnterprise) {
  return "https://".concat(isEnterprise ? 'enterprise.' : '', "api-maps.yandex.ru");
};

var Provider =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Provider, _React$Component);

  function Provider(props) {
    var _this;

    _classCallCheck(this, Provider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Provider).call(this, props));
    _this.ymaps = new YMaps(props);
    return _this;
  }

  _createClass(Provider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.preload === true) {
        this.ymaps.load();
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(YMapsContext.Provider, {
        value: this.ymaps
      }, this.props.children);
    }
  }]);

  return Provider;
}(React.Component);

if (process.env.NODE_ENV !== 'production') {
  Provider.propTypes = {
    version: propTypes.string.isRequired,
    enterprise: propTypes.bool,
    // Yandex.Maps API avaliable query params
    // https://tech.yandex.com/maps/doc/jsapi/2.1/dg/concepts/load-docpage/
    // Some query params will be omitted in any case because they are used
    // by the library: onload, onerror
    query: propTypes.shape({
      lang: propTypes.oneOf(['tr_TR', 'en_US', 'en_RU', 'ru_RU', 'ru_UA', 'uk_UA']),
      apikey: propTypes.string,
      coordorder: propTypes.oneOf(['latlong', 'longlat']),
      load: propTypes.string,
      mode: propTypes.oneOf(['release', 'debug']),
      csp: propTypes.bool,
      ns: propTypes.string
    }),
    children: propTypes.node,
    // Allows provider to preload Yandex.Maps API even if
    // there are no map components on the page
    preload: propTypes.bool
  };
}

Provider.defaultProps = {
  version: '2.1',
  enterprise: false,
  query: {
    lang: 'ru_RU',
    load: '',
    ns: ''
  },
  preload: false
};

/**
 * Helper method to remove keys from the object
 *
 * @param {Object} obj Object to remove keys from
 * @param {string[]} arr List of keys to remove
 * @returns {Object} Object with omitted keys
 */
var omit = function omit(obj, arr) {
  var res = {};

  for (var n in obj) {
    if (arr.indexOf(n) === -1) res[n] = obj[n];
  }

  return res;
};

function withYMaps(Component) {
  var waitForApi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var modules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var WithYMaps =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(WithYMaps, _React$Component);

    function WithYMaps() {
      var _this;

      _classCallCheck(this, WithYMaps);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithYMaps).call(this));
      _this.state = {
        loading: true
      };
      _this._isMounted = false;
      return _this;
    }

    _createClass(WithYMaps, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this._isMounted = true;
        this.props.ymaps.load().then(function (api) {
          return Promise.all(modules.concat(_this2.props.modules).map(api.loadModule)).then(function () {
            if (_this2._isMounted === true) {
              _this2.setState({
                loading: false
              }, function () {
                _this2.props.onLoad(api);
              });
            }
          });
        })["catch"](function (err) {
          if (_this2._isMounted === true) {
            _this2.props.onError(err);
          }
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
      }
    }, {
      key: "render",
      value: function render() {
        var ymaps = this.props.ymaps;
        var loading = this.state.loading;
        var shouldRender = waitForApi === false || loading === false;
        var props = omit(this.props, ['onLoad', 'onError', 'modules', 'ymaps']);
        return shouldRender && React.createElement(Component, _extends({
          ymaps: ymaps.getApi()
        }, props));
      }
    }]);

    return WithYMaps;
  }(React.Component);

  if (process.env.NODE_ENV !== 'production') {
    WithYMaps.displayName = "withYMaps(".concat(name(Component), ")");
    WithYMaps.propTypes = {
      onLoad: propTypes.func,
      onError: propTypes.func,
      modules: propTypes.arrayOf(propTypes.string),
      ymaps: propTypes.object
    };
  }

  WithYMaps.defaultProps = {
    onLoad: Function.prototype,
    onError: Function.prototype,
    modules: []
  };
  return withYMapsContext(WithYMaps);
}

var EVENTS_REGEX = /^on(?=[A-Z])/;
/**
 * Separates YMaps events from other component props based on prop name
 *
 * @param {Object} props Component props
 * @returns {Object} Separated _event props and other component props
 */

function separateEvents(props) {
  return Object.keys(props).reduce(function (acc, key) {
    if (EVENTS_REGEX.test(key)) {
      var eventName = key.replace(EVENTS_REGEX, '').toLowerCase();
      acc._events[eventName] = props[key];
    } else {
      acc[key] = props[key];
    }

    return acc;
  }, {
    _events: {}
  });
}
/**
 * Adds event to YMaps object
 *
 * @param {Object} instance YMaps object instance
 * @param {string} eventName Event name (e.g., "onclick", "ontouchstart")
 * @param {Function} handler Event handler method
 */

function addEvent(instance, eventName, handler) {
  if (typeof handler === 'function') {
    instance.events.add(eventName, handler);
  }
}
/**
 * Removes event from YMaps object
 *
 * @param {Object} instance YMaps object instance
 * @param {string} eventName Event name (e.g., "onclick", "ontouchstart")
 * @param {Function} handler Event handler method
 */

function removeEvent(instance, eventName, handler) {
  if (typeof handler === 'function') {
    instance.events.remove(eventName, handler);
  }
}
/**
 * Given two objects with new and old events, checks if event was
 * changed and updates it by removing the old one and adding the
 * new one
 *
 * @param {Object} instance YMaps object instance
 * @param {Object} oldEvents Map of old events
 * @param {Object} newEvents Map of new events
 */

function updateEvents(instance, oldEvents, newEvents) {
  Object.keys(Object.assign({}, oldEvents, newEvents)).forEach(function (eventName) {
    if (oldEvents[eventName] !== newEvents[eventName]) {
      removeEvent(instance, eventName, oldEvents[eventName]);
      addEvent(instance, eventName, newEvents[eventName]);
    }
  });
}

var defaultName = function defaultName(name) {
  return 'default' + name.charAt(0).toUpperCase() + name.slice(1);
};
/**
 * Checks if key exists on an object
 *
 * @param {Object} props Component props
 * @param {string} key Prop key
 * @returns {boolean} Check result
 */


function isControlledProp(props, key) {
  return props[key] !== undefined || props[defaultName(key)] === undefined;
}
/**
 * Checks if prop exists, otherwise returns "uncontrolled"
 * prop that starts with default (e.g., defaultValue)
 *
 * @param {Object} props Component props
 * @param {string} key Prop key
 * @return {any} Prop value
 */

function getProp(props, key, defaultValue) {
  return (isControlledProp(props, key) ? props[key] : props[defaultName(key)]) || defaultValue;
}

var Map =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Map, _React$Component);

  function Map() {
    var _this;

    _classCallCheck(this, Map);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this));
    _this.state = {
      instance: null
    };
    _this._parentElement = null;

    _this._getRef = function (ref) {
      _this._parentElement = ref;
    };

    return _this;
  }

  _createClass(Map, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var instance = Map.mountObject(this._parentElement, this.props.ymaps.Map, this.props);
      this.setState({
        instance: instance
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.state.instance !== null) {
        Map.updateObject(this.state.instance, prevProps, this.props);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      Map.unmountObject(this.state.instance, this.props);
    }
  }, {
    key: "render",
    value: function render() {
      var parentElementStyle = Map.getParentElementSize(this.props);
      var separatedProps = separateEvents(this.props);
      var parentElementProps = omit(separatedProps, ['_events', 'state', 'defaultState', 'options', 'defaultOptions', 'instanceRef', 'ymaps', 'children', 'width', 'height', 'style', 'className']);
      return React.createElement(ParentContext.Provider, {
        value: this.state.instance
      }, React.createElement("div", _extends({
        ref: this._getRef
      }, parentElementStyle, parentElementProps), this.props.children));
    }
  }], [{
    key: "getParentElementSize",
    value: function getParentElementSize(props) {
      var width = props.width,
          height = props.height,
          style = props.style,
          className = props.className;

      if (typeof style !== 'undefined' || typeof className !== 'undefined') {
        return Object.assign({}, style && {
          style: style
        }, className && {
          className: className
        });
      }

      return {
        style: {
          width: width,
          height: height
        }
      };
    }
  }, {
    key: "mountObject",
    value: function mountObject(parentElement, Map, props) {
      var _events$separateEvent = separateEvents(props),
          instanceRef = _events$separateEvent.instanceRef,
          _events = _events$separateEvent._events;

      var state = getProp(props, 'state');
      var options = getProp(props, 'options');
      var instance = new Map(parentElement, state, options);
      Object.keys(_events).forEach(function (key) {
        return addEvent(instance, key, _events[key]);
      });

      if (typeof instanceRef === 'function') {
        instanceRef(instance);
      }

      return instance;
    }
  }, {
    key: "updateObject",
    value: function updateObject(instance, oldProps, newProps) {
      var _events$separateEvent2 = separateEvents(newProps),
          newEvents = _events$separateEvent2._events,
          instanceRef = _events$separateEvent2.instanceRef;

      var _events$separateEvent3 = separateEvents(oldProps),
          oldEvents = _events$separateEvent3._events,
          oldRef = _events$separateEvent3.instanceRef;

      if (isControlledProp(newProps, 'state')) {
        var oldState = getProp(oldProps, 'state', {});
        var newState = getProp(newProps, 'state', {});

        if (oldState.type !== newState.type) {
          instance.setType(newState.type);
        }

        if (oldState.behaviors !== newState.behaviors) {
          if (oldState.behaviors) instance.behaviors.disable(oldState.behaviors);
          if (newState.behaviors) instance.behaviors.enable(newState.behaviors);
        }

        if (oldState.zoom !== newState.zoom) {
          instance.setZoom(newState.zoom);
        }

        if (oldState.center !== newState.center) {
          instance.setCenter(newState.center);
        }

        if (newState.bounds && oldState.bounds !== newState.bounds) {
          instance.setBounds(newState.bounds);
        }
      }

      if (isControlledProp(newProps, 'options')) {
        var oldOptions = getProp(oldProps, 'options');
        var newOptions = getProp(newProps, 'options', {});

        if (oldOptions !== newOptions) {
          instance.options.set(newOptions);
        }
      }

      if (getProp(oldProps, 'width') !== getProp(newProps, 'width') || getProp(oldProps, 'height') !== getProp(newProps, 'height')) {
        instance.container.fitToViewport();
      }

      updateEvents(instance, oldEvents, newEvents); // Mimic React callback ref behavior:
      // https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs

      if (oldRef !== instanceRef) {
        if (typeof oldRef === 'function') oldRef(null);
        if (typeof instanceRef === 'function') instanceRef(instance);
      }
    }
  }, {
    key: "unmountObject",
    value: function unmountObject(instance, props) {
      var _events$separateEvent4 = separateEvents(props),
          instanceRef = _events$separateEvent4.instanceRef,
          _events = _events$separateEvent4._events;

      if (instance !== null) {
        Object.keys(_events).forEach(function (key) {
          return removeEvent(instance, key, _events[key]);
        });
        instance.destroy();

        if (typeof instanceRef === 'function') {
          instanceRef(null);
        }
      }
    }
  }]);

  return Map;
}(React.Component);

if (process.env.NODE_ENV !== 'production') {
  var MapStatePropTypes = {
    bounds: propTypes.arrayOf(propTypes.arrayOf(propTypes.number)),
    center: propTypes.arrayOf(propTypes.number),
    controls: propTypes.arrayOf(propTypes.string),
    behaviors: propTypes.arrayOf(propTypes.string),
    margin: propTypes.oneOfType([propTypes.arrayOf(propTypes.number), propTypes.arrayOf(propTypes.arrayOf(propTypes.number))]),
    type: propTypes.oneOf(['yandex#map', 'yandex#satellite', 'yandex#hybrid']),
    zoom: propTypes.number
  }; // TODO: https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Map-docpage/

  var MapOptionsPropTypes = {};
  Map.propTypes = {
    // Map state parameters
    // https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Map-docpage/#param-state
    state: propTypes.shape(MapStatePropTypes),
    defaultState: propTypes.shape(MapStatePropTypes),
    // TODO: https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Map-docpage/
    options: propTypes.shape(MapOptionsPropTypes),
    defaultOptions: propTypes.shape(MapOptionsPropTypes),
    // ref prop but for YMaps object instances
    instanceRef: propTypes.func,
    // Yandex.Maps API object
    ymaps: propTypes.object,
    children: propTypes.node,

    /**
     * Yandex.Maps Map parent element should have at least
     * some size set to it, otherwise the map is rendered
     * into the container with size 0
     *
     * To avoid this we will use `width` and `height` props as default
     * way of sizing the map element, but then if we see that
     * the library user also provides `style` or `className` prop,
     * we will assume that the Map is sized by those and will
     * not use these
     */
    width: propTypes.oneOfType([propTypes.number, propTypes.string]),
    height: propTypes.oneOfType([propTypes.number, propTypes.string]),
    style: propTypes.object,
    className: propTypes.string
  };
}

Map.defaultProps = {
  width: 320,
  height: 240
};
var _Map = withYMaps(Map, true, ['Map']);

var Clusterer =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Clusterer, _React$Component);

  function Clusterer() {
    var _this;

    _classCallCheck(this, Clusterer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Clusterer).call(this));
    _this.state = {
      instance: null
    };
    return _this;
  }

  _createClass(Clusterer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var instance = Clusterer.mountObject(this.props.ymaps.Clusterer, this.props);
      this.setState({
        instance: instance
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.state.instance !== null) {
        Clusterer.updateObject(this.state.instance, prevProps, this.props);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      Clusterer.unmountObject(this.state.instance, this.props);
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(ParentContext.Provider, {
        value: this.state.instance
      }, this.props.children);
    }
  }], [{
    key: "mountObject",
    value: function mountObject(Clusterer, props) {
      var _events$separateEvent = separateEvents(props),
          instanceRef = _events$separateEvent.instanceRef,
          parent = _events$separateEvent.parent,
          _events = _events$separateEvent._events;

      var options = getProp(props, 'options');
      var instance = new Clusterer(options);
      Object.keys(_events).forEach(function (key) {
        return addEvent(instance, key, _events[key]);
      });

      if (parent.geoObjects && typeof parent.geoObjects.add === 'function') {
        parent.geoObjects.add(instance);
      } else if (parent.add && typeof parent.add === 'function') {
        parent.add(instance);
      } else {
        throw new Error('No parent found to mount Clusterer');
      }

      if (typeof instanceRef === 'function') {
        instanceRef(instance);
      }

      return instance;
    }
  }, {
    key: "updateObject",
    value: function updateObject(instance, oldProps, newProps) {
      var _events$separateEvent2 = separateEvents(newProps),
          newEvents = _events$separateEvent2._events,
          instanceRef = _events$separateEvent2.instanceRef;

      var _events$separateEvent3 = separateEvents(oldProps),
          oldEvents = _events$separateEvent3._events,
          oldRef = _events$separateEvent3.instanceRef;

      if (isControlledProp(newProps, 'options')) {
        var oldOptions = getProp(oldProps, 'options');
        var newOptions = getProp(newProps, 'options');

        if (oldOptions !== newOptions) {
          instance.options.set(newOptions);
        }
      }

      updateEvents(instance, oldEvents, newEvents); // Mimic React callback ref behavior:
      // https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs

      if (oldRef !== instanceRef) {
        if (typeof oldRef === 'function') oldRef(null);
        if (typeof instanceRef === 'function') instanceRef(instance);
      }
    }
  }, {
    key: "unmountObject",
    value: function unmountObject(instance, props) {
      var _events$separateEvent4 = separateEvents(props),
          instanceRef = _events$separateEvent4.instanceRef,
          parent = _events$separateEvent4.parent,
          _events = _events$separateEvent4._events;

      if (instance !== null) {
        Object.keys(_events).forEach(function (key) {
          return removeEvent(instance, key, _events[key]);
        });

        if (parent.geoObjects && typeof parent.geoObjects.remove === 'function') {
          parent.geoObjects.remove(instance);
        } else if (parent.remove && typeof parent.remove === 'function') {
          parent.remove(instance);
        }

        if (typeof instanceRef === 'function') {
          instanceRef(null);
        }
      }
    }
  }]);

  return Clusterer;
}(React.Component);

if (process.env.NODE_ENV !== 'production') {
  var ClustererOptionsPropTypes = propTypes.shape({});
  Clusterer.propTypes = {
    // Clusterer options
    // https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Clusterer-docpage/
    options: ClustererOptionsPropTypes,
    defaultOptions: ClustererOptionsPropTypes,
    // ref prop but for YMaps object instances
    instanceRef: propTypes.func,
    // Yandex.Maps API object
    ymaps: propTypes.object,
    // Clusterer parent object (e.g, ymaps.Map or ymaps.Clusterer)
    parent: propTypes.object,
    children: propTypes.node
  };
}

var Clusterer$1 = withParentContext(withYMaps(Clusterer, true, ['Clusterer']));

var ObjectManager =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ObjectManager, _React$Component);

  function ObjectManager() {
    var _this;

    _classCallCheck(this, ObjectManager);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ObjectManager).call(this));
    _this.state = {
      instance: null
    };
    return _this;
  }

  _createClass(ObjectManager, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var instance = ObjectManager.mountObject(this.props.ymaps.ObjectManager, this.props);
      this.setState({
        instance: instance
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.state.instance !== null) {
        ObjectManager.updateObject(this.state.instance, prevProps, this.props);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      ObjectManager.unmountObject(this.state.instance, this.props);
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }], [{
    key: "mountObject",
    value: function mountObject(ObjectManager, props) {
      var _events$separateEvent = separateEvents(props),
          instanceRef = _events$separateEvent.instanceRef,
          parent = _events$separateEvent.parent,
          _events = _events$separateEvent._events;

      var options = getProp(props, 'options');
      var features = getProp(props, 'features');
      var filter = getProp(props, 'filter');
      var objects = getProp(props, 'objects');
      var clusters = getProp(props, 'clusters');
      var instance = new ObjectManager(options);
      instance.add(features || []);
      instance.setFilter(filter);
      instance.objects.options.set(objects);
      instance.clusters.options.set(clusters);
      Object.keys(_events).forEach(function (key) {
        return addEvent(instance, key, _events[key]);
      });

      if (parent.geoObjects && typeof parent.geoObjects.add === 'function') {
        parent.geoObjects.add(instance);
      } else if (parent.add && typeof parent.add === 'function') {
        parent.add(instance);
      } else {
        throw new Error('No parent found to mount ObjectManager');
      }

      if (typeof instanceRef === 'function') {
        instanceRef(instance);
      }

      return instance;
    }
  }, {
    key: "updateObject",
    value: function updateObject(instance, oldProps, newProps) {
      var _events$separateEvent2 = separateEvents(newProps),
          newEvents = _events$separateEvent2._events,
          instanceRef = _events$separateEvent2.instanceRef;

      var _events$separateEvent3 = separateEvents(oldProps),
          oldEvents = _events$separateEvent3._events,
          oldRef = _events$separateEvent3.instanceRef;

      if (isControlledProp(newProps, 'options')) {
        var oldOptions = getProp(oldProps, 'options');
        var newOptions = getProp(newProps, 'options');

        if (oldOptions !== newOptions) {
          instance.options.set(newOptions);
        }
      }

      if (isControlledProp(newProps, 'objects')) {
        var oldObjectsOptions = getProp(oldProps, 'objects');
        var newObjectsOptions = getProp(newProps, 'objects');

        if (oldObjectsOptions !== newObjectsOptions) {
          instance.objects.options.set(newObjectsOptions);
        }
      }

      if (isControlledProp(newProps, 'clusters')) {
        var oldClustersOptions = getProp(oldProps, 'clusters');
        var newClustersOptions = getProp(newProps, 'clusters');

        if (oldClustersOptions !== newClustersOptions) {
          instance.clusters.options.set(newClustersOptions);
        }
      }

      if (isControlledProp(newProps, 'filter')) {
        var oldFilter = getProp(oldProps, 'filter');
        var newFilter = getProp(newProps, 'filter');

        if (oldFilter !== newFilter) {
          instance.options.set(newFilter);
        }
      }

      if (isControlledProp(newProps, 'features')) {
        var oldFeatures = getProp(oldProps, 'features');
        var newFeatures = getProp(newProps, 'features');

        if (oldFeatures !== newFeatures) {
          instance.remove(oldFeatures);
          instance.add(newFeatures);
        }
      }

      updateEvents(instance, oldEvents, newEvents); // Mimic React callback ref behavior:
      // https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs

      if (oldRef !== instanceRef) {
        if (typeof oldRef === 'function') oldRef(null);
        if (typeof instanceRef === 'function') instanceRef(instance);
      }
    }
  }, {
    key: "unmountObject",
    value: function unmountObject(instance, props) {
      var _events$separateEvent4 = separateEvents(props),
          instanceRef = _events$separateEvent4.instanceRef,
          parent = _events$separateEvent4.parent,
          _events = _events$separateEvent4._events;

      if (instance !== null) {
        Object.keys(_events).forEach(function (key) {
          return removeEvent(instance, key, _events[key]);
        });

        if (parent.geoObjects && typeof parent.geoObjects.remove === 'function') {
          parent.geoObjects.remove(instance);
        } else if (parent.remove && typeof parent.remove === 'function') {
          parent.remove(instance);
        }

        if (typeof instanceRef === 'function') {
          instanceRef(null);
        }
      }
    }
  }]);

  return ObjectManager;
}(React.Component);

if (process.env.NODE_ENV !== 'production') {
  var TYPE_FEATURE = 'Feature';
  var TYPE_FEATURE_COLLECTION = 'FeatureCollection'; // https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/ObjectManager-docpage/#add-param-objects

  var FeaturePropType = propTypes.shape({
    id: propTypes.oneOfType([propTypes.number, propTypes.string]).isRequired,
    type: propTypes.oneOf([TYPE_FEATURE]).isRequired,
    geometry: propTypes.object.isRequired,
    options: propTypes.object,
    properties: propTypes.object
  }); // INFO: A hack to make recursive prop-type check work properly

  var FeatureCollection = {
    type: propTypes.oneOf([TYPE_FEATURE_COLLECTION]).isRequired
  };
  FeatureCollection.features = propTypes.arrayOf(propTypes.oneOfType([propTypes.shape(FeatureCollection), FeaturePropType])).isRequired;
  var FeatureCollectionPropType = propTypes.shape(FeatureCollection);
  var FeaturesPropType = propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([FeatureCollectionPropType, FeaturePropType])), FeatureCollectionPropType]);
  var FilterPropType = propTypes.oneOfType([propTypes.string, propTypes.func]); // TODO

  var ObjectManagerOptionsPropType = propTypes.shape({}); // TODO

  var ObjectManagerObjectsOptionsPropType = propTypes.shape({}); // TODO

  var ObjectManagerClustersOptionsPropType = propTypes.shape({});
  ObjectManager.propTypes = {
    /**
     * ObjectManager features
     * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/ObjectManager-docpage/#method_detail__add-param-objects
     */
    features: FeaturesPropType,
    defaultFeatures: FeaturesPropType,

    /**
     * ObjectManager features filter
     * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/ObjectManager-docpage/#method_detail__setFilter-param-filterFunction
     */
    filter: FilterPropType,
    defaultFilter: FilterPropType,

    /**
     * ObjectManager options
     * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/ObjectManager-docpage/#ObjectManager__param-options
     */
    options: ObjectManagerOptionsPropType,
    defaultOptions: ObjectManagerOptionsPropType,

    /** ObjectManager object options */
    objects: ObjectManagerObjectsOptionsPropType,
    defaultObjects: ObjectManagerObjectsOptionsPropType,

    /** ObjectManager clusters options */
    clusters: ObjectManagerClustersOptionsPropType,
    defaultClusters: ObjectManagerClustersOptionsPropType,

    /** ref prop but for Yandex.Maps object instances */
    instanceRef: propTypes.func,

    /** Yandex.Maps API object */
    ymaps: propTypes.object,

    /** Parent object (e.g, ymaps.Map or ymaps.Clusterer) */
    parent: propTypes.object
  };
}

var ObjectManager$1 = withParentContext(withYMaps(ObjectManager, true, ['ObjectManager']));

var Panorama =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Panorama, _React$Component);

  function Panorama() {
    var _this;

    _classCallCheck(this, Panorama);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Panorama).call(this));
    _this.state = {
      instance: null
    };
    return _this;
  }

  _createClass(Panorama, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (!this.props.ymaps.panorama.isSupported()) {
        return;
      }

      Panorama.mountObject(this.props.ymaps.panorama, this.props).then(function (instance) {
        return _this2.setState({
          instance: instance
        });
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.state.instance !== null) {
        Panorama.updateObject(this.state.instance, prevProps, this.props);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      Panorama.unmountObject(this.state.instance, this.props);
    }
  }, {
    key: "render",
    value: function render() {
      var parentElementStyle = Panorama.getParentElementSize(this.props);
      return React.createElement("div", _extends({
        id: "player"
      }, parentElementStyle));
    }
  }], [{
    key: "getParentElementSize",
    value: function getParentElementSize(props) {
      var width = props.width,
          height = props.height,
          style = props.style,
          className = props.className;

      if (typeof style !== 'undefined' || typeof className !== 'undefined') {
        return Object.assign({}, style && {
          style: style
        }, className && {
          className: className
        });
      }

      return {
        style: {
          width: width,
          height: height
        }
      };
    }
  }, {
    key: "mountObject",
    value: function mountObject(panorama, props) {
      var _events$separateEvent = separateEvents(props),
          instanceRef = _events$separateEvent.instanceRef,
          _events = _events$separateEvent._events;

      var coordinates = getProp(props, 'coordinates');
      var options = getProp(props, 'options');
      return new Promise(function (resolve, reject) {
        panorama.locate(coordinates).done(function (panoramas) {
          if (panoramas.length > 0) {
            var instance = new panorama.Player('player', panoramas[0], options);

            if (typeof instanceRef === 'function') {
              instanceRef(instance);
            }

            Object.keys(_events).forEach(function (key) {
              return addEvent(instance, key, _events[key]);
            });
            resolve(instance);
          }
        }, function () {
          reject();
        });
      });
    }
  }, {
    key: "updateObject",
    value: function updateObject(instance, oldProps, newProps) {
      var _events$separateEvent2 = separateEvents(newProps),
          newEvents = _events$separateEvent2._events,
          instanceRef = _events$separateEvent2.instanceRef;

      var _events$separateEvent3 = separateEvents(oldProps),
          oldEvents = _events$separateEvent3._events,
          oldRef = _events$separateEvent3.instanceRef;

      if (isControlledProp(newProps, 'options')) {
        var oldOptions = getProp(oldProps, 'options');
        var newOptions = getProp(newProps, 'options');

        if (oldOptions !== newOptions) {
          instance.options.set(newOptions);
        }
      }

      updateEvents(instance, oldEvents, newEvents); // Mimic React callback ref behavior:
      // https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs

      if (oldRef !== instanceRef) {
        if (typeof oldRef === 'function') oldRef(null);
        if (typeof instanceRef === 'function') instanceRef(instance);
      }
    }
  }, {
    key: "unmountObject",
    value: function unmountObject(instance, props) {
      var _events$separateEvent4 = separateEvents(props),
          instanceRef = _events$separateEvent4.instanceRef,
          _events = _events$separateEvent4._events;

      if (instance !== null) {
        Object.keys(_events).forEach(function (key) {
          return removeEvent(instance, key, _events[key]);
        });

        if (typeof instanceRef === 'function') {
          instanceRef(null);
        }
      }
    }
  }]);

  return Panorama;
}(React.Component);

var Panorama$1 = withParentContext(withYMaps(Panorama, true, ['panorama.isSupported', 'panorama.locate', 'panorama.createPlayer', 'panorama.Player']));

if (process.env.NODE_ENV !== 'production') {
  Panorama.propTypes = {
    // Yandex.Maps API object
    ymaps: propTypes.object
  };
}

Panorama.defaultProps = {
  width: 320,
  height: 240
};

var BaseGeoObject =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BaseGeoObject, _React$Component);

  function BaseGeoObject() {
    var _this;

    _classCallCheck(this, BaseGeoObject);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseGeoObject).call(this));
    _this.state = {
      instance: null
    };
    return _this;
  }

  _createClass(BaseGeoObject, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          name = _this$props.name,
          dangerZone = _this$props.dangerZone,
          ymaps = _this$props.ymaps;
      var instance = BaseGeoObject.mountObject(dangerZone && dangerZone.modifyConstructor ? dangerZone.modifyConstructor(ymaps[name]) : ymaps[name], this.props);
      this.setState({
        instance: instance
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.state.instance !== null) {
        BaseGeoObject.updateObject(this.state.instance, prevProps, this.props);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      BaseGeoObject.unmountObject(this.state.instance, this.props);
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }], [{
    key: "mountObject",
    value: function mountObject(GeoObject, props) {
      var _events$separateEvent = separateEvents(props),
          instanceRef = _events$separateEvent.instanceRef,
          parent = _events$separateEvent.parent,
          _events = _events$separateEvent._events;

      var geometry = getProp(props, 'geometry');
      var properties = getProp(props, 'properties');
      var options = getProp(props, 'options');
      var instance = new GeoObject(geometry, properties, options);
      Object.keys(_events).forEach(function (key) {
        return addEvent(instance, key, _events[key]);
      });

      if (parent && parent.geoObjects && typeof parent.geoObjects.add === 'function') {
        parent.geoObjects.add(instance);
      } else if (parent && parent.add && typeof parent.add === 'function') {
        parent.add(instance);
      } else {
        throw new Error("No parent found to mount ".concat(props.name));
      }

      if (typeof instanceRef === 'function') {
        instanceRef(instance);
      }

      return instance;
    }
  }, {
    key: "updateObject",
    value: function updateObject(instance, oldProps, newProps) {
      var _events$separateEvent2 = separateEvents(newProps),
          newEvents = _events$separateEvent2._events,
          instanceRef = _events$separateEvent2.instanceRef;

      var _events$separateEvent3 = separateEvents(oldProps),
          oldEvents = _events$separateEvent3._events,
          oldRef = _events$separateEvent3.instanceRef;

      if (isControlledProp(newProps, 'geometry')) {
        var oldGeometry = getProp(oldProps, 'geometry', {});
        var newGeometry = getProp(newProps, 'geometry', {});

        if (Array.isArray(newGeometry) && newGeometry !== oldGeometry) {
          if ( // Circle geometry is a special case
          Array.isArray(newGeometry[0]) && typeof newGeometry[1] === 'number') {
            instance.geometry.setCoordinates(newGeometry[0]);
            instance.geometry.setRadius(newGeometry[1]);
          } else {
            instance.geometry.setCoordinates(newGeometry);
          }
        } else if (_typeof(newGeometry) === 'object') {
          if (newGeometry.coordinates !== oldGeometry.coordinates) {
            instance.geometry.setCoordinates(newGeometry.coordinates);
          }

          if (newGeometry.radius !== oldGeometry.radius) {
            instance.geometry.setRadius(newGeometry.radius);
          }
        }
      }

      if (isControlledProp(newProps, 'properties')) {
        var oldProperties = getProp(oldProps, 'properties');
        var newProperties = getProp(newProps, 'properties');

        if (oldProperties !== newProperties) {
          instance.properties.set(newProperties);
        }
      }

      if (isControlledProp(newProps, 'options')) {
        var oldOptions = getProp(oldProps, 'options');
        var newOptions = getProp(newProps, 'options');

        if (oldOptions !== newOptions) {
          instance.options.set(newOptions);
        }
      }

      updateEvents(instance, oldEvents, newEvents); // Mimic React callback ref behavior:
      // https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs

      if (oldRef !== instanceRef) {
        if (typeof oldRef === 'function') oldRef(null);
        if (typeof instanceRef === 'function') instanceRef(instance);
      }
    }
  }, {
    key: "unmountObject",
    value: function unmountObject(instance, props) {
      var _events$separateEvent4 = separateEvents(props),
          instanceRef = _events$separateEvent4.instanceRef,
          parent = _events$separateEvent4.parent,
          _events = _events$separateEvent4._events;

      if (instance !== null) {
        Object.keys(_events).forEach(function (key) {
          return removeEvent(instance, key, _events[key]);
        });

        if (parent.geoObjects && typeof parent.geoObjects.remove === 'function') {
          parent.geoObjects.remove(instance);
        } else if (parent.remove && typeof parent.remove === 'function') {
          parent.remove(instance);
        }

        if (typeof instanceRef === 'function') {
          instanceRef(null);
        }
      }
    }
  }]);

  return BaseGeoObject;
}(React.Component);

if (process.env.NODE_ENV !== 'production') {
  BaseGeoObject.propTypes = {
    /** ref prop but for Yandex.Maps object instances */
    instanceRef: propTypes.func,

    /** Yandex.Maps API object */
    ymaps: propTypes.object,

    /** Parent object (e.g, ymaps.Map or ymaps.Clusterer) */
    parent: propTypes.object,

    /** GeoObject name */
    name: propTypes.oneOf(['GeoObject', 'Placemark', 'Polyline', 'Rectangle', 'Polygon', 'Circle']).isRequired,

    /**
     * Escape hatch to modofy constructor before passing it to `mountObject`
     * This is needed to unify GeoObject with other GeoObjects, use at your own risk
     */
    dangerZone: propTypes.shape({
      modifyConstructor: propTypes.func
    })
  };
}

function createGeoObject(name, propTypes, modifyConstructor) {
  var GeoObject = function GeoObject(props) {
    return React.createElement(BaseGeoObject, _extends({
      name: name,
      dangerZone: modifyConstructor ? {
        modifyConstructor: modifyConstructor
      } : void 0
    }, props));
  };

  if (process.env.NODE_ENV !== 'production') {
    GeoObject.displayName = name;
    GeoObject.propTypes = propTypes;
  }

  return withParentContext(withYMaps(GeoObject, true, [name]));
}

var GeoObjectGeometryPropTypes = propTypes.shape({
  type: propTypes.oneOf(['Point', 'LineString', 'Rectangle', 'Polygon', 'Circle']).isRequired,
  coordinates: propTypes.oneOfType([propTypes.arrayOf(propTypes.number), propTypes.arrayOf(propTypes.arrayOf(propTypes.number)), propTypes.arrayOf(propTypes.arrayOf(propTypes.arrayOf(propTypes.number)))]).isRequired,
  radius: propTypes.number
});
var GeoObject = createGeoObject('GeoObject', process.env.NODE_ENV !== 'production' && {
  /**
   * GeoObject feature.geometry
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/GeoObject-docpage/#param-feature.geometry
   */
  geometry: GeoObjectGeometryPropTypes,
  defaultGeometry: GeoObjectGeometryPropTypes,

  /**
   * GeoObject feature.properties
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/GeoObject-docpage/#param-feature.properties
   */
  properties: propTypes.shape({}),
  defaultProperties: propTypes.shape({}),

  /**
   * GeoObject options
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/GeoObject-docpage/#param-options
   */
  options: propTypes.shape({}),
  defaultOptions: propTypes.shape({})
}, function (Constructor) {
  /**
   * The only difference between GeoObject and all the other,
   * more specific GeoObject constructors (like Placemark, Circle,
   * or Polyline) is the way in which the arguments are passed to
   * the constructor. GeoObject expects `feature` with `geometry` and
   * `properties` keys and all the other GeoObject constructors
   * expect `geometry` and `properties` as separate arguments
   *
   * We will hack around this difference with our custom constructor.
   * That way we can completely reuse GeoObject static methods.
   */
  var __Constructor = Constructor;

  function GeoObjectConstructor(geometry, properties, options) {
    __Constructor.call(this, {
      geometry: geometry,
      properties: properties
    }, options);
  }

  GeoObjectConstructor.prototype = Constructor.prototype;
  return GeoObjectConstructor;
});
var CircleGeometryPropTypes = propTypes.arrayOf(propTypes.oneOfType([propTypes.number, propTypes.arrayOf(propTypes.number)]));
var Circle = createGeoObject('Circle', process.env.NODE_ENV !== 'production' && {
  /**
   * Circle geometry
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Circle-docpage/#param-geometry
   */
  geometry: CircleGeometryPropTypes,
  defaultGeometry: CircleGeometryPropTypes,

  /**
   * Circle properties
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Circle-docpage/#param-properties
   */
  properties: propTypes.shape({}),
  defaultProperties: propTypes.shape({}),

  /**
   * Circle options
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Circle-docpage/#param-options
   */
  options: propTypes.shape({}),
  defaultOptions: propTypes.shape({})
});
var PlacemarkGeometryPropTypes = propTypes.arrayOf(propTypes.number);
var Placemark = createGeoObject('Placemark', process.env.NODE_ENV !== 'production' && {
  /**
   * Placemark geometry
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Placemark-docpage/#param-geometry
   */
  geometry: PlacemarkGeometryPropTypes,
  defaultGeometry: PlacemarkGeometryPropTypes,

  /**
   * Placemark properties
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Placemark-docpage/#param-properties
   */
  properties: propTypes.shape({}),
  defaultProperties: propTypes.shape({}),

  /**
   * Placemark options
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Placemark-docpage/#param-options
   */
  options: propTypes.shape({}),
  defaultOptions: propTypes.shape({})
});
var PolygonGeometryPropTypes = propTypes.arrayOf(propTypes.arrayOf(propTypes.arrayOf(propTypes.number)));
var Polygon = createGeoObject('Polygon', process.env.NODE_ENV !== 'production' && {
  /**
   * Polygon geometry
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Polygon-docpage/#param-geometry
   */
  geometry: PolygonGeometryPropTypes,
  defaultGeometry: PolygonGeometryPropTypes,

  /**
   * Polygon properties
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Polygon-docpage/#param-properties
   */
  properties: propTypes.shape({}),
  defaultProperties: propTypes.shape({}),

  /**
   * Polygon options
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Polygon-docpage/#param-options
   */
  options: propTypes.shape({}),
  defaultOptions: propTypes.shape({})
});
var PolylineGeometryPropTypes = propTypes.arrayOf(propTypes.arrayOf(propTypes.number));
var Polyline = createGeoObject('Polyline', process.env.NODE_ENV !== 'production' && {
  /**
   * Polyline geometry
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Polyline-docpage/#param-geometry
   */
  geometry: PolylineGeometryPropTypes,
  defaultGeometry: PolylineGeometryPropTypes,

  /**
   * Polyline properties
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Polyline-docpage/#param-properties
   */
  properties: propTypes.shape({}),
  defaultProperties: propTypes.shape({}),

  /**
   * Polyline options
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Polyline-docpage/#param-options
   */
  options: propTypes.shape({}),
  defaultOptions: propTypes.shape({})
});
var RectangleGeometryPropTypes = propTypes.arrayOf(propTypes.arrayOf(propTypes.number));
var Rectangle = createGeoObject('Rectangle', process.env.NODE_ENV !== 'production' && {
  /**
   * Rectangle geometry
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Rectangle-docpage/#param-geometry
   */
  geometry: RectangleGeometryPropTypes,
  defaultGeometry: RectangleGeometryPropTypes,

  /**
   * Rectangle properties
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Rectangle-docpage/#param-properties
   */
  properties: propTypes.shape({}),
  defaultProperties: propTypes.shape({}),

  /**
   * Rectangle options
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/Rectangle-docpage/#param-options
   */
  options: propTypes.shape({}),
  defaultOptions: propTypes.shape({})
});

var BaseControl =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BaseControl, _React$Component);

  function BaseControl() {
    var _this;

    _classCallCheck(this, BaseControl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseControl).call(this));
    _this.state = {
      instance: null
    };
    return _this;
  }

  _createClass(BaseControl, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var instance = BaseControl.mountControl(this.props.ymaps.control[this.props.name], this.props);
      this.setState({
        instance: instance
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.state.instance !== null) {
        BaseControl.updateControl(this.state.instance, prevProps, this.props);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      BaseControl.unmountControl(this.state.instance, this.props);
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(ParentContext.Provider, {
        value: this.state.instance
      }, this.props.children);
    }
  }], [{
    key: "mountControl",
    value: function mountControl(Control, props) {
      var _events$separateEvent = separateEvents(props),
          instanceRef = _events$separateEvent.instanceRef,
          parent = _events$separateEvent.parent,
          lazy = _events$separateEvent.lazy,
          _events = _events$separateEvent._events;

      var data = getProp(props, 'data');
      var options = getProp(props, 'options');
      var state = getProp(props, 'state');
      var mapTypes = getProp(props, 'mapTypes');
      var instance = new Control({
        data: data,
        options: options,
        state: state,
        mapTypes: mapTypes,
        lazy: lazy
      });
      Object.keys(_events).forEach(function (key) {
        return addEvent(instance, key, _events[key]);
      });

      if (parent && parent.controls && typeof parent.controls.add === 'function') {
        parent.controls.add(instance);
      } else if (parent && parent.add && typeof parent.add === 'function') {
        parent.add(instance);
      } else {
        throw new Error("No parent found to mount ".concat(props.name));
      }

      if (typeof instanceRef === 'function') {
        instanceRef(instance);
      }

      return instance;
    }
  }, {
    key: "updateControl",
    value: function updateControl(instance, oldProps, newProps) {
      var _events$separateEvent2 = separateEvents(newProps),
          newEvents = _events$separateEvent2._events,
          instanceRef = _events$separateEvent2.instanceRef;

      var _events$separateEvent3 = separateEvents(oldProps),
          oldEvents = _events$separateEvent3._events,
          oldRef = _events$separateEvent3.instanceRef;

      if (isControlledProp(newProps, 'options')) {
        var oldOptions = getProp(oldProps, 'options');
        var newOptions = getProp(newProps, 'options');

        if (oldOptions !== newOptions) {
          instance.options.set(newOptions);
        }
      }

      if (isControlledProp(newProps, 'data')) {
        var oldData = getProp(oldProps, 'data');
        var newData = getProp(newProps, 'data');

        if (oldData !== newData) {
          instance.data.set(newData);
        }
      }

      if (isControlledProp(newProps, 'state')) {
        var oldState = getProp(oldProps, 'state');
        var newState = getProp(newProps, 'state');

        if (oldState !== newState) {
          instance.state.set(newState);
        }
      }

      if (isControlledProp(newProps, 'mapTypes')) {
        var oldMapTypes = getProp(oldProps, 'mapTypes');
        var newMapTypes = getProp(newProps, 'mapTypes');

        if (oldMapTypes !== newMapTypes) {
          instance.removeAllMapTypes();
          newMapTypes.forEach(function (type) {
            return instance.addMapType(type);
          });
        }
      }

      updateEvents(instance, oldEvents, newEvents); // Mimic React callback ref behavior:
      // https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs

      if (oldRef !== instanceRef) {
        if (typeof oldRef === 'function') oldRef(null);
        if (typeof instanceRef === 'function') instanceRef(instance);
      }
    }
  }, {
    key: "unmountControl",
    value: function unmountControl(instance, props) {
      var _events$separateEvent4 = separateEvents(props),
          instanceRef = _events$separateEvent4.instanceRef,
          parent = _events$separateEvent4.parent,
          _events = _events$separateEvent4._events;

      if (instance !== null) {
        Object.keys(_events).forEach(function (key) {
          return removeEvent(instance, key, _events[key]);
        });

        if (parent.controls && typeof parent.controls.remove === 'function') {
          parent.controls.remove(instance);
        } else if (parent.remove && typeof parent.remove === 'function') {
          parent.remove(instance);
        }

        if (typeof instanceRef === 'function') {
          instanceRef(null);
        }
      }
    }
  }]);

  return BaseControl;
}(React.Component);

if (process.env.NODE_ENV !== 'production') {
  BaseControl.propTypes = {
    children: propTypes.node,

    /** ref prop but for Yandex.Maps object instances */
    instanceRef: propTypes.func,

    /** Yandex.Maps API object */
    ymaps: propTypes.object,

    /** Parent object (e.g, ymaps.Map or ymaps.Clusterer) */
    parent: propTypes.object,

    /** Control name */
    name: propTypes.oneOf(['Button', 'FullscreenControl', 'GeolocationControl', 'ListBox', 'ListBoxItem', 'RouteButton', 'RouteEditor', 'RoutePanel', 'RulerControl', 'SearchControl', 'TrafficControl', 'TypeSelector', 'ZoomControl']).isRequired
  };
}

function createControl(name, propTypes) {
  var Control = function Control(props) {
    return React.createElement(BaseControl, _extends({
      name: name
    }, props));
  };

  if (process.env.NODE_ENV !== 'production') {
    Control.displayName = name;
    Control.propTypes = propTypes;
  }

  return withParentContext(withYMaps(Control, true, ["control.".concat(name)]));
}

var Button = createControl('Button', process.env.NODE_ENV !== 'production' && {
  /* TODO: PropTypes */
});
var FullscreenControl = createControl('FullscreenControl', process.env.NODE_ENV !== 'production' && {
  /* TODO: PropTypes */
});
var GeolocationControl = createControl('GeolocationControl', process.env.NODE_ENV !== 'production' && {
  /* TODO: PropTypes */
});
var ListBox = createControl('ListBox', process.env.NODE_ENV !== 'production' && {
  /* TODO: PropTypes */
});
var ListBoxItem = createControl('ListBoxItem', process.env.NODE_ENV !== 'production' && {
  /* TODO: PropTypes */
});
var RouteButton = createControl('RouteButton', process.env.NODE_ENV !== 'production' && {
  /**
   * If set to true, all modules needed to work with routes will be loaded lazily when the user opens the panel the first time.
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/control.RouteButton-docpage/#control.RouteButton__param-parameters.lazy
   */
  lazy: propTypes.bool
});
var RouteEditor = createControl('RouteEditor', process.env.NODE_ENV !== 'production' && {
  /* TODO: PropTypes */
});
var RoutePanel = createControl('RoutePanel', process.env.NODE_ENV !== 'production' && {
  /* TODO: PropTypes */
});
var RulerControl = createControl('RulerControl', process.env.NODE_ENV !== 'production' && {
  /* TODO: PropTypes */
});
var SearchControl = createControl('SearchControl', process.env.NODE_ENV !== 'production' && {
  /* TODO: PropTypes */
});
var TrafficControl = createControl('TrafficControl', process.env.NODE_ENV !== 'production' && {
  /* TODO: PropTypes */
});
var TypeSelector = createControl('TypeSelector', process.env.NODE_ENV !== 'production' && {
  /**
   * Array of constructors for map types or keys. If the parameter is omitted, the item is added to the standard set of map types.
   * https://tech.yandex.com/maps/doc/jsapi/2.1/ref/reference/control.TypeSelector-docpage/#control.TypeSelector__param-parameters.mapTypes
   */
  mapTypes: propTypes.arrayOf(propTypes.oneOf(['yandex#map', 'yandex#satellite', 'yandex#hybrid'])),
  defaultMapTypes: propTypes.arrayOf(propTypes.oneOf(['yandex#map', 'yandex#satellite', 'yandex#hybrid']))
});
var ZoomControl = createControl('ZoomControl', process.env.NODE_ENV !== 'production' && {
  /* TODO: PropTypes */
});

exports.Button = Button;
exports.Circle = Circle;
exports.Clusterer = Clusterer$1;
exports.FullscreenControl = FullscreenControl;
exports.GeoObject = GeoObject;
exports.GeolocationControl = GeolocationControl;
exports.ListBox = ListBox;
exports.ListBoxItem = ListBoxItem;
exports.Map = _Map;
exports.ObjectManager = ObjectManager$1;
exports.Panorama = Panorama$1;
exports.Placemark = Placemark;
exports.Polygon = Polygon;
exports.Polyline = Polyline;
exports.Rectangle = Rectangle;
exports.RouteButton = RouteButton;
exports.RouteEditor = RouteEditor;
exports.RoutePanel = RoutePanel;
exports.RulerControl = RulerControl;
exports.SearchControl = SearchControl;
exports.TrafficControl = TrafficControl;
exports.TypeSelector = TypeSelector;
exports.YMaps = Provider;
exports.ZoomControl = ZoomControl;
exports.withYMaps = withYMaps;
